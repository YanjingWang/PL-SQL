DROP PACKAGE BODY GKDW.OWB_OPPORTUNITY_DIM;

CREATE OR REPLACE PACKAGE BODY GKDW."OWB_OPPORTUNITY_DIM" AS

-- Define cursors here so that they have global scope within the package (for debugger)

---------------------------------------------------------------------------
--
-- "SETOP_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "SETOP_c" IS
  SELECT
  "SETOP"."OPPORTUNITY_ID" "OPPORTUNITY_ID",
  "SETOP"."ACCOUNT_ID" "ACCOUNT_ID",
  "SETOP"."DESCRIPTION" "DESCRIPTION",
  "SETOP"."CLOSED" "CLOSED",
  "SETOP"."STAGE" "STAGE",
  "SETOP"."SALES_POTENTIAL" "SALES_POTENTIAL",
  "SETOP"."CLOSE_PROBABILITY" "CLOSE_PROBABILITY",
  "SETOP"."ACTUAL_AMOUNT" "ACTUAL_AMOUNT",
  "SETOP"."ESTIMATED_CLOSE" "ESTIMATED_CLOSE",
  "SETOP"."ACTUAL_CLOSE" "ACTUAL_CLOSE",
  "SETOP"."NOTES" "NOTES",
  "SETOP"."ACCOUNT_MANAGER_ID" "ACCOUNT_MANAGER_ID",
  "SETOP"."STATUS" "STATUS",
  "SETOP"."EO_NEXT_STEP" "EO_NEXT_STEP",
  "SETOP"."REASON" "REASON",
  "SETOP"."LEADSOURCE_ID" "LEADSOURCE_ID",
  "SETOP"."SECCODE_ID" "SECCODE_ID",
  "SETOP"."CREATE_USER" "CREATE_USER",
  "SETOP"."SO_CREATEDATE" "SO_CREATEDATE",
  "SETOP"."MODIFYUSER" "MODIFYUSER",
  "SETOP"."SO_MODIFYDATE" "SO_MODIFYDATE"
FROM
  (SELECT
  "OPPORTUNITY_ID" "OPPORTUNITY_ID",
  "ACCOUNT_ID" "ACCOUNT_ID",
  "DESCRIPTION" "DESCRIPTION",
  "CLOSED" "CLOSED",
  "STAGE" "STAGE",
  "SALES_POTENTIAL" "SALES_POTENTIAL",
  "CLOSE_PROBABILITY" "CLOSE_PROBABILITY",
  "ACTUAL_AMOUNT" "ACTUAL_AMOUNT",
  "ESTIMATED_CLOSE" "ESTIMATED_CLOSE",
  "ACTUAL_CLOSE" "ACTUAL_CLOSE",
  "NOTES" "NOTES",
  "ACCOUNT_MANAGER_ID" "ACCOUNT_MANAGER_ID",
  "STATUS" "STATUS",
  "EO_NEXT_STEP" "EO_NEXT_STEP",
  "REASON" "REASON",
  "LEADSOURCE_ID" "LEADSOURCE_ID",
  "SECCODE_ID" "SECCODE_ID",
  "CREATE_USER" "CREATE_USER",
  "SO_CREATEDATE" "SO_CREATEDATE",
  "MODIFYUSER" "MODIFYUSER",
  "SO_MODIFYDATE" "SO_MODIFYDATE",
  "CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  (SELECT
  "OPPORTUNITY"."OPPORTUNITYID" "OPPORTUNITY_ID",
  "OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "OPPORTUNITY"."CLOSED" "CLOSED",
  "OPPORTUNITY"."STAGE" "STAGE",
  "OPPORTUNITY"."SALESPOTENTIAL" "SALES_POTENTIAL",
  "OPPORTUNITY"."CLOSEPROBABILITY" "CLOSE_PROBABILITY",
  "OPPORTUNITY"."ACTUALAMOUNT" "ACTUAL_AMOUNT",
  "OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "OPPORTUNITY"."NOTES" "NOTES",
  "OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "OPPORTUNITY"."STATUS" "STATUS",
  "OPPORTUNITY"."NEXTSTEP" "EO_NEXT_STEP",
  "OPPORTUNITY"."REASON" "REASON",
  "OPPORTUNITY"."LEADSOURCEID" "LEADSOURCE_ID",
  "OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."OPPORTUNITY" "OPPORTUNITY"
  WHERE 
  ( "OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" )
UNION
SELECT
  "GK_SALES_OPPORTUNITY"."GK_SALES_OPPORTUNITYID" "OPPORTUNITY_ID",
  "GK_ENT_OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "GK_SALES_OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "GK_ENT_OPPORTUNITY"."CLOSED" "CLOSED",
  "GK_ENT_OPPORTUNITY"."STAGE" "STAGE",
  "GK_SALES_OPPORTUNITY"."LISTPRICE" "SALES_POTENTIAL",
  "GK_SALES_OPPORTUNITY"."ESTCLOSEDATE_PROBABILITY" "CLOSE_PROBABILITY",
  "GK_SALES_OPPORTUNITY"."NETTPRICE" "ACTUAL_AMOUNT",
  "GK_SALES_OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "GK_ENT_OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "GK_ENT_OPPORTUNITY"."DESCRIPTION" "NOTES",
  "GK_ENT_OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "GK_ENT_OPPORTUNITY"."STATUS" "STATUS",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_2_EO_NEXT_STEP" "EO_NEXT_STEP",
  "GK_ENT_OPPORTUNITY"."REASON" "REASON",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_3_LEADSOURCE_ID" "LEADSOURCE_ID",
  "GK_ENT_OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "GK_SALES_OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "GK_SALES_OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "GK_SALES_OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "GK_SALES_OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."GK_ENT_OPPORTUNITY" "GK_ENT_OPPORTUNITY",
"SLXDW"."GK_SALES_OPPORTUNITY" "GK_SALES_OPPORTUNITY"
  WHERE 
  ( "GK_ENT_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" = "GK_SALES_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" ) AND
  ( "GK_ENT_OPPORTUNITY"."ACCOUNTID" is not null ) AND
  ( ( "GK_ENT_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_ENT_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) OR ( "GK_SALES_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_SALES_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) )) ) "SETOP"; 

---------------------------------------------------------------------------
--
-- "SETOP_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "SETOP_c$1" IS
  SELECT
  "SETOP$1"."OPPORTUNITY_ID$1" "OPPORTUNITY_ID$1",
  "SETOP$1"."ACCOUNT_ID$1" "ACCOUNT_ID$1",
  "SETOP$1"."DESCRIPTION$1" "DESCRIPTION$1",
  "SETOP$1"."CLOSED$1" "CLOSED$1",
  "SETOP$1"."STAGE$1" "STAGE$1",
  "SETOP$1"."SALES_POTENTIAL$1" "SALES_POTENTIAL$1",
  "SETOP$1"."CLOSE_PROBABILITY$1" "CLOSE_PROBABILITY$1",
  "SETOP$1"."ACTUAL_AMOUNT$1" "ACTUAL_AMOUNT$1",
  "SETOP$1"."ESTIMATED_CLOSE$1" "ESTIMATED_CLOSE$1",
  "SETOP$1"."ACTUAL_CLOSE$1" "ACTUAL_CLOSE$1",
  "SETOP$1"."NOTES$1" "NOTES$1",
  "SETOP$1"."ACCOUNT_MANAGER_ID$1" "ACCOUNT_MANAGER_ID$1",
  "SETOP$1"."STATUS$1" "STATUS$1",
  "SETOP$1"."EO_NEXT_STEP$1" "EO_NEXT_STEP$1",
  "SETOP$1"."REASON$1" "REASON$1",
  "SETOP$1"."LEADSOURCE_ID$1" "LEADSOURCE_ID$1",
  "SETOP$1"."SECCODE_ID$1" "SECCODE_ID$1",
  "SETOP$1"."CREATE_USER$1" "CREATE_USER$1",
  "SETOP$1"."SO_CREATEDATE$1" "SO_CREATEDATE$1",
  "SETOP$1"."MODIFYUSER$1" "MODIFYUSER$1",
  "SETOP$1"."SO_MODIFYDATE$1" "SO_MODIFYDATE$1"
FROM
  (SELECT
  "OPPORTUNITY_ID" "OPPORTUNITY_ID$1",
  "ACCOUNT_ID" "ACCOUNT_ID$1",
  "DESCRIPTION" "DESCRIPTION$1",
  "CLOSED" "CLOSED$1",
  "STAGE" "STAGE$1",
  "SALES_POTENTIAL" "SALES_POTENTIAL$1",
  "CLOSE_PROBABILITY" "CLOSE_PROBABILITY$1",
  "ACTUAL_AMOUNT" "ACTUAL_AMOUNT$1",
  "ESTIMATED_CLOSE" "ESTIMATED_CLOSE$1",
  "ACTUAL_CLOSE" "ACTUAL_CLOSE$1",
  "NOTES" "NOTES$1",
  "ACCOUNT_MANAGER_ID" "ACCOUNT_MANAGER_ID$1",
  "STATUS" "STATUS$1",
  "EO_NEXT_STEP" "EO_NEXT_STEP$1",
  "REASON" "REASON$1",
  "LEADSOURCE_ID" "LEADSOURCE_ID$1",
  "SECCODE_ID" "SECCODE_ID$1",
  "CREATE_USER" "CREATE_USER$1",
  "SO_CREATEDATE" "SO_CREATEDATE$1",
  "MODIFYUSER" "MODIFYUSER$1",
  "SO_MODIFYDATE" "SO_MODIFYDATE$1",
  "CREATE_DATE_OUT" "CREATE_DATE_OUT$1",
  "MODIFY_DATE_OUT" "MODIFY_DATE_OUT$1"
FROM
  (SELECT
  "OPPORTUNITY"."OPPORTUNITYID" "OPPORTUNITY_ID",
  "OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "OPPORTUNITY"."CLOSED" "CLOSED",
  "OPPORTUNITY"."STAGE" "STAGE",
  "OPPORTUNITY"."SALESPOTENTIAL" "SALES_POTENTIAL",
  "OPPORTUNITY"."CLOSEPROBABILITY" "CLOSE_PROBABILITY",
  "OPPORTUNITY"."ACTUALAMOUNT" "ACTUAL_AMOUNT",
  "OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "OPPORTUNITY"."NOTES" "NOTES",
  "OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "OPPORTUNITY"."STATUS" "STATUS",
  "OPPORTUNITY"."NEXTSTEP" "EO_NEXT_STEP",
  "OPPORTUNITY"."REASON" "REASON",
  "OPPORTUNITY"."LEADSOURCEID" "LEADSOURCE_ID",
  "OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."OPPORTUNITY" "OPPORTUNITY"
  WHERE 
  ( "OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" )
UNION
SELECT
  "GK_SALES_OPPORTUNITY"."GK_SALES_OPPORTUNITYID" "OPPORTUNITY_ID",
  "GK_ENT_OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "GK_SALES_OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "GK_ENT_OPPORTUNITY"."CLOSED" "CLOSED",
  "GK_ENT_OPPORTUNITY"."STAGE" "STAGE",
  "GK_SALES_OPPORTUNITY"."LISTPRICE" "SALES_POTENTIAL",
  "GK_SALES_OPPORTUNITY"."ESTCLOSEDATE_PROBABILITY" "CLOSE_PROBABILITY",
  "GK_SALES_OPPORTUNITY"."NETTPRICE" "ACTUAL_AMOUNT",
  "GK_SALES_OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "GK_ENT_OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "GK_ENT_OPPORTUNITY"."DESCRIPTION" "NOTES",
  "GK_ENT_OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "GK_ENT_OPPORTUNITY"."STATUS" "STATUS",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_2_EO_NEXT_STEP" "EO_NEXT_STEP",
  "GK_ENT_OPPORTUNITY"."REASON" "REASON",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_3_LEADSOURCE_ID" "LEADSOURCE_ID",
  "GK_ENT_OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "GK_SALES_OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "GK_SALES_OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "GK_SALES_OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "GK_SALES_OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."GK_ENT_OPPORTUNITY" "GK_ENT_OPPORTUNITY",
"SLXDW"."GK_SALES_OPPORTUNITY" "GK_SALES_OPPORTUNITY"
  WHERE 
  ( "GK_ENT_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" = "GK_SALES_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" ) AND
  ( "GK_ENT_OPPORTUNITY"."ACCOUNTID" is not null ) AND
  ( ( "GK_ENT_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_ENT_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) OR ( "GK_SALES_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_SALES_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) )) ) "SETOP$1"; 


a_table_to_analyze a_table_to_analyze_type;


PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
FUNCTION "GET_CONST_0_TABLE_NAME" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_0_TABLE_NAME";
END "GET_CONST_0_TABLE_NAME";
FUNCTION "GET_CONST_1_GKDW_SOURCE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_1_GKDW_SOURCE";
END "GET_CONST_1_GKDW_SOURCE";
FUNCTION "GET_CONST_2_EO_NEXT_STEP" RETURN VARCHAR IS
BEGIN
  RETURN "CONST_2_EO_NEXT_STEP";
END "GET_CONST_2_EO_NEXT_STEP";
FUNCTION "GET_CONST_3_LEADSOURCE_ID" RETURN VARCHAR IS
BEGIN
  RETURN "CONST_3_LEADSOURCE_ID";
END "GET_CONST_3_LEADSOURCE_ID";
FUNCTION "get_PREMAPPING_1_CREATE_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_1_CREATE_DATE_OUT";
END "get_PREMAPPING_1_CREATE_DATE_O";
FUNCTION "get_PREMAPPING_2_MODIFY_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_2_MODIFY_DATE_OUT";
END "get_PREMAPPING_2_MODIFY_DATE_O";



---------------------------------------------------------------------------
-- Function "OPPORTUNITY_DIM_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "OPPORTUNITY_DIM_Bat"
 RETURN BOOLEAN IS
  batch_selected        NUMBER(22) := 0;
  batch_errors          NUMBER(22) := 0;
  batch_inserted        NUMBER(22) := 0;
  batch_merged          NUMBER(22) := 0;
  batch_action          VARCHAR2(20);
  actual_owner          VARCHAR2(30);
  actual_name           VARCHAR2(30);
  num_fk_err            NUMBER(22);
  l_rowkey              NUMBER(22) := 0;
  l_table               VARCHAR2(30) := 'CREATE';
  l_rowid               ROWID;
  l_owner               VARCHAR2(30);
  l_tablename           VARCHAR2(30);
  l_constraint          VARCHAR2(30);
  sql_excp_stmt         VARCHAR2(32767);
  batch_exception       BOOLEAN := FALSE;
  get_map_num_rows      NUMBER(22) := 0;
  TYPE exceptionsCurType IS REF CURSOR;
  exceptions_cursor     exceptionsCurType;
  batch_auditd_id       NUMBER(22) := 0;

BEGIN
  IF get_abort THEN
    RETURN FALSE;
  END IF;
  get_abort_procedure := FALSE;
  IF NOT (get_audit_level = AUDIT_NONE) THEN
    batch_auditd_id := WB_RT_MAPAUDIT.auditd_begin(  -- Template BatchAuditDetailBegin
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_name=>'"OPPORTUNITY_DIM_Bat"',
      p_source=>'*',
      p_source_uoid=>'*',
      p_target=>'"OPPORTUNITY_DIM"',
      p_target_uoid=>'A41FFB19D7015678E040007F01006C7D',
      p_stm=>NULL,p_info=>NULL,
      
      p_exec_mode=>MODE_SET
    );
    get_audit_detail_id := batch_auditd_id;
  	get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'A41FFB19D4245678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
    p_parent_object_name=>'OPPORTUNITY_DIM',
    p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
    p_parent_object_type=>'Table',
    p_object_name=>'OPPORTUNITY_DIM',
    p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
    p_object_type=>'Table',
    p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
  );
    	get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'A41FFB19D7005678E040007F01006C7D', -- Operator OPPORTUNITY
    p_parent_object_name=>'OPPORTUNITY',
    p_parent_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
    p_parent_object_type=>'Table',
    p_object_name=>'OPPORTUNITY',
    p_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
    p_object_type=>'Table',
    p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
  );
    	get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'A41FFB19D7015678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
    p_parent_object_name=>'OPPORTUNITY_DIM',
    p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
    p_parent_object_type=>'Table',
    p_object_name=>'OPPORTUNITY_DIM',
    p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
    p_object_type=>'Table',
    p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
  );
    
  END IF;
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.26
  END IF;

  IF NOT get_use_hc AND NOT get_no_commit THEN
    IF get_enable_parallel_dml THEN
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    ELSE
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    END IF;
  END IF;

  BEGIN
  
    IF NOT "OPPORTUNITY_DIM_St" THEN
    
      batch_action := 'BATCH MERGE';
batch_selected := SQL%ROWCOUNT;
MERGE
INTO
  "OPPORTUNITY_DIM"
USING
  (SELECT
  "SETOP$2"."OPPORTUNITY_ID$3" "OPPORTUNITY_ID$2",
  "SETOP$2"."ACCOUNT_ID$3" "ACCOUNT_ID$2",
  "SETOP$2"."DESCRIPTION$3" "DESCRIPTION$2",
  "SETOP$2"."CLOSED$3" "CLOSED$2",
  "SETOP$2"."STAGE$3" "STAGE$2",
  "SETOP$2"."SALES_POTENTIAL$3" "SALES_POTENTIAL$2",
  "SETOP$2"."CLOSE_PROBABILITY$3" "CLOSE_PROBABILITY$2",
  "SETOP$2"."ACTUAL_AMOUNT$3" "ACTUAL_AMOUNT$2",
  "SETOP$2"."ESTIMATED_CLOSE$3" "ESTIMATED_CLOSE$2",
  "SETOP$2"."ACTUAL_CLOSE$3" "ACTUAL_CLOSE$2",
  "SETOP$2"."NOTES$3" "NOTES$2",
  "SETOP$2"."ACCOUNT_MANAGER_ID$3" "ACCOUNT_MANAGER_ID$2",
  "SETOP$2"."STATUS$3" "STATUS$2",
  "SETOP$2"."EO_NEXT_STEP$3" "EO_NEXT_STEP$2",
  "SETOP$2"."REASON$3" "REASON$2",
  "SETOP$2"."LEADSOURCE_ID$3" "LEADSOURCE_ID$2",
  "SETOP$2"."SECCODE_ID$3" "SECCODE_ID$2",
  "SETOP$2"."CREATE_USER$3" "CREATE_USER$2",
  "SETOP$2"."SO_CREATEDATE$3" "SO_CREATEDATE$2",
  "SETOP$2"."MODIFYUSER$3" "MODIFYUSER$2",
  "SETOP$2"."SO_MODIFYDATE$3" "SO_MODIFYDATE$2",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE" "GKDW_SOURCE"
FROM
  (SELECT
  "OPPORTUNITY_ID" "OPPORTUNITY_ID$3",
  "ACCOUNT_ID" "ACCOUNT_ID$3",
  "DESCRIPTION" "DESCRIPTION$3",
  "CLOSED" "CLOSED$3",
  "STAGE" "STAGE$3",
  "SALES_POTENTIAL" "SALES_POTENTIAL$3",
  "CLOSE_PROBABILITY" "CLOSE_PROBABILITY$3",
  "ACTUAL_AMOUNT" "ACTUAL_AMOUNT$3",
  "ESTIMATED_CLOSE" "ESTIMATED_CLOSE$3",
  "ACTUAL_CLOSE" "ACTUAL_CLOSE$3",
  "NOTES" "NOTES$3",
  "ACCOUNT_MANAGER_ID" "ACCOUNT_MANAGER_ID$3",
  "STATUS" "STATUS$3",
  "EO_NEXT_STEP" "EO_NEXT_STEP$3",
  "REASON" "REASON$3",
  "LEADSOURCE_ID" "LEADSOURCE_ID$3",
  "SECCODE_ID" "SECCODE_ID$3",
  "CREATE_USER" "CREATE_USER$3",
  "SO_CREATEDATE" "SO_CREATEDATE$3",
  "MODIFYUSER" "MODIFYUSER$3",
  "SO_MODIFYDATE" "SO_MODIFYDATE$3",
  "CREATE_DATE_OUT" "CREATE_DATE_OUT$2",
  "MODIFY_DATE_OUT" "MODIFY_DATE_OUT$2"
FROM
  (SELECT
  "OPPORTUNITY"."OPPORTUNITYID" "OPPORTUNITY_ID",
  "OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "OPPORTUNITY"."CLOSED" "CLOSED",
  "OPPORTUNITY"."STAGE" "STAGE",
  "OPPORTUNITY"."SALESPOTENTIAL" "SALES_POTENTIAL",
  "OPPORTUNITY"."CLOSEPROBABILITY" "CLOSE_PROBABILITY",
  "OPPORTUNITY"."ACTUALAMOUNT" "ACTUAL_AMOUNT",
  "OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "OPPORTUNITY"."NOTES" "NOTES",
  "OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "OPPORTUNITY"."STATUS" "STATUS",
  "OPPORTUNITY"."NEXTSTEP" "EO_NEXT_STEP",
  "OPPORTUNITY"."REASON" "REASON",
  "OPPORTUNITY"."LEADSOURCEID" "LEADSOURCE_ID",
  "OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."OPPORTUNITY" "OPPORTUNITY"
  WHERE 
  ( "OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" )
UNION
SELECT
  "GK_SALES_OPPORTUNITY"."GK_SALES_OPPORTUNITYID" "OPPORTUNITY_ID",
  "GK_ENT_OPPORTUNITY"."ACCOUNTID" "ACCOUNT_ID",
  "GK_SALES_OPPORTUNITY"."DESCRIPTION" "DESCRIPTION",
  "GK_ENT_OPPORTUNITY"."CLOSED" "CLOSED",
  "GK_ENT_OPPORTUNITY"."STAGE" "STAGE",
  "GK_SALES_OPPORTUNITY"."LISTPRICE" "SALES_POTENTIAL",
  "GK_SALES_OPPORTUNITY"."ESTCLOSEDATE_PROBABILITY" "CLOSE_PROBABILITY",
  "GK_SALES_OPPORTUNITY"."NETTPRICE" "ACTUAL_AMOUNT",
  "GK_SALES_OPPORTUNITY"."ESTIMATEDCLOSE" "ESTIMATED_CLOSE",
  "GK_ENT_OPPORTUNITY"."ACTUALCLOSE" "ACTUAL_CLOSE",
  "GK_ENT_OPPORTUNITY"."DESCRIPTION" "NOTES",
  "GK_ENT_OPPORTUNITY"."ACCOUNTMANAGERID" "ACCOUNT_MANAGER_ID",
  "GK_ENT_OPPORTUNITY"."STATUS" "STATUS",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_2_EO_NEXT_STEP" "EO_NEXT_STEP",
  "GK_ENT_OPPORTUNITY"."REASON" "REASON",
  "OWB_OPPORTUNITY_DIM"."GET_CONST_3_LEADSOURCE_ID" "LEADSOURCE_ID",
  "GK_ENT_OPPORTUNITY"."SECCODEID" "SECCODE_ID",
  "GK_SALES_OPPORTUNITY"."CREATEUSER" "CREATE_USER",
  "GK_SALES_OPPORTUNITY"."CREATEDATE" "SO_CREATEDATE",
  "GK_SALES_OPPORTUNITY"."MODIFYUSER" "MODIFYUSER",
  "GK_SALES_OPPORTUNITY"."MODIFYDATE" "SO_MODIFYDATE",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT"
FROM
  "SLXDW"."GK_ENT_OPPORTUNITY" "GK_ENT_OPPORTUNITY",
"SLXDW"."GK_SALES_OPPORTUNITY" "GK_SALES_OPPORTUNITY"
  WHERE 
  ( "GK_ENT_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" = "GK_SALES_OPPORTUNITY"."GK_ENT_OPPORTUNITYID" ) AND
  ( "GK_ENT_OPPORTUNITY"."ACCOUNTID" is not null ) AND
  ( ( "GK_ENT_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_ENT_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) OR ( "GK_SALES_OPPORTUNITY"."CREATEDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT" Or "GK_SALES_OPPORTUNITY"."MODIFYDATE" >= "OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT" ) )) ) "SETOP$2"
  )
    MERGE_SUBQUERY
ON (
  "OPPORTUNITY_DIM"."OPPORTUNITY_ID" = "MERGE_SUBQUERY"."OPPORTUNITY_ID$2"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "ACCOUNT_ID" = "MERGE_SUBQUERY"."ACCOUNT_ID$2",
  "DESCRIPTION" = "MERGE_SUBQUERY"."DESCRIPTION$2",
  "CLOSED" = "MERGE_SUBQUERY"."CLOSED$2",
  "STAGE" = "MERGE_SUBQUERY"."STAGE$2",
  "SALES_POTENTIAL" = "MERGE_SUBQUERY"."SALES_POTENTIAL$2",
  "CLOSE_PROBABILITY" = "MERGE_SUBQUERY"."CLOSE_PROBABILITY$2",
  "ACTUAL_AMOUNT" = "MERGE_SUBQUERY"."ACTUAL_AMOUNT$2",
  "ESTIMATED_CLOSE" = "MERGE_SUBQUERY"."ESTIMATED_CLOSE$2",
  "ACTUAL_CLOSE" = "MERGE_SUBQUERY"."ACTUAL_CLOSE$2",
  "NOTES" = "MERGE_SUBQUERY"."NOTES$2",
  "ACCOUNT_MANAGER_ID" = "MERGE_SUBQUERY"."ACCOUNT_MANAGER_ID$2",
  "STATUS" = "MERGE_SUBQUERY"."STATUS$2",
  "NEXT_STEP" = "MERGE_SUBQUERY"."EO_NEXT_STEP$2",
  "REASON" = "MERGE_SUBQUERY"."REASON$2",
  "LEADSOURCE_ID" = "MERGE_SUBQUERY"."LEADSOURCE_ID$2",
  "SECCODE_ID" = "MERGE_SUBQUERY"."SECCODE_ID$2",
  "CREATE_USER" = "MERGE_SUBQUERY"."CREATE_USER$2",
  "CREATION_DATE" = "MERGE_SUBQUERY"."SO_CREATEDATE$2",
  "MODIFYUSER" = "MERGE_SUBQUERY"."MODIFYUSER$2",
  "LAST_UPDATE_DATE" = "MERGE_SUBQUERY"."SO_MODIFYDATE$2",
  "GKDW_SOURCE" = "MERGE_SUBQUERY"."GKDW_SOURCE"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("OPPORTUNITY_DIM"."OPPORTUNITY_ID",
      "OPPORTUNITY_DIM"."ACCOUNT_ID",
      "OPPORTUNITY_DIM"."DESCRIPTION",
      "OPPORTUNITY_DIM"."CLOSED",
      "OPPORTUNITY_DIM"."STAGE",
      "OPPORTUNITY_DIM"."SALES_POTENTIAL",
      "OPPORTUNITY_DIM"."CLOSE_PROBABILITY",
      "OPPORTUNITY_DIM"."ACTUAL_AMOUNT",
      "OPPORTUNITY_DIM"."ESTIMATED_CLOSE",
      "OPPORTUNITY_DIM"."ACTUAL_CLOSE",
      "OPPORTUNITY_DIM"."NOTES",
      "OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID",
      "OPPORTUNITY_DIM"."STATUS",
      "OPPORTUNITY_DIM"."NEXT_STEP",
      "OPPORTUNITY_DIM"."REASON",
      "OPPORTUNITY_DIM"."LEADSOURCE_ID",
      "OPPORTUNITY_DIM"."SECCODE_ID",
      "OPPORTUNITY_DIM"."CREATE_USER",
      "OPPORTUNITY_DIM"."CREATION_DATE",
      "OPPORTUNITY_DIM"."MODIFYUSER",
      "OPPORTUNITY_DIM"."LAST_UPDATE_DATE",
      "OPPORTUNITY_DIM"."GKDW_SOURCE")
    VALUES
      ("MERGE_SUBQUERY"."OPPORTUNITY_ID$2",
      "MERGE_SUBQUERY"."ACCOUNT_ID$2",
      "MERGE_SUBQUERY"."DESCRIPTION$2",
      "MERGE_SUBQUERY"."CLOSED$2",
      "MERGE_SUBQUERY"."STAGE$2",
      "MERGE_SUBQUERY"."SALES_POTENTIAL$2",
      "MERGE_SUBQUERY"."CLOSE_PROBABILITY$2",
      "MERGE_SUBQUERY"."ACTUAL_AMOUNT$2",
      "MERGE_SUBQUERY"."ESTIMATED_CLOSE$2",
      "MERGE_SUBQUERY"."ACTUAL_CLOSE$2",
      "MERGE_SUBQUERY"."NOTES$2",
      "MERGE_SUBQUERY"."ACCOUNT_MANAGER_ID$2",
      "MERGE_SUBQUERY"."STATUS$2",
      "MERGE_SUBQUERY"."EO_NEXT_STEP$2",
      "MERGE_SUBQUERY"."REASON$2",
      "MERGE_SUBQUERY"."LEADSOURCE_ID$2",
      "MERGE_SUBQUERY"."SECCODE_ID$2",
      "MERGE_SUBQUERY"."CREATE_USER$2",
      "MERGE_SUBQUERY"."SO_CREATEDATE$2",
      "MERGE_SUBQUERY"."MODIFYUSER$2",
      "MERGE_SUBQUERY"."SO_MODIFYDATE$2",
      "MERGE_SUBQUERY"."GKDW_SOURCE")
  ;
batch_merged := SQL%ROWCOUNT;
batch_selected := SQL%ROWCOUNT;

      
      IF get_errors + batch_errors > get_max_errors THEN
        get_abort := TRUE;
      END IF;
      IF NOT get_use_hc AND NOT get_no_commit THEN
        COMMIT; -- commit no.5
      END IF;
    END IF;
  
  EXCEPTION WHEN OTHERS THEN
      last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
    IF NOT get_no_commit THEN
      ROLLBACK;
    END IF;
    batch_errors := batch_errors + 1;
    IF get_errors + batch_errors > get_max_errors THEN
      get_abort := TRUE;
    END IF;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>batch_auditd_id,
        p_rowkey=>0,
        p_table=>'"OPPORTUNITY_DIM"',
        p_column=>'*',
        p_dstval=>NULL,
        p_stm=>'TRACE 485: ' || batch_action,
        p_sqlerr=>SQLCODE,
        p_sqlerrm=>SQLERRM,
        p_rowid=>NULL
      );
    END IF;
    get_errors := get_errors + batch_errors;
    get_selected := get_selected + batch_selected;
    
  
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        WB_RT_MAPAUDIT.auditd_end(
          p_rtd=>batch_auditd_id,
          p_sel=>batch_selected,
          p_ins=>NULL,
          p_upd=>NULL,
          p_del=>NULL,
          p_err=>batch_errors,
          p_dis=>NULL,  -- BatchErrorAuditDetailEnd
          p_mer=>NULL
        );
      END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.6
    END IF;
    batch_exception := TRUE;
  END;
  
  IF batch_exception THEN
    RETURN FALSE;
  END IF;
  get_inserted := get_inserted + batch_inserted;
  get_errors := get_errors + batch_errors;
  get_selected := get_selected + batch_selected;
  get_merged := get_merged + batch_merged;
  

  IF NOT (get_audit_level = AUDIT_NONE) THEN
    WB_RT_MAPAUDIT.auditd_end(
      p_rtd=>batch_auditd_id,
      p_sel=>batch_selected,
      p_ins=>batch_inserted,
      p_upd=>NULL,
      p_del=>NULL,
      p_err=>batch_errors,
      p_dis=>NULL,
      p_mer=>batch_merged, -- BatchAuditDetailEnd
      p_autotrans=>(NOT get_use_hc) 
    );
  END IF;
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.3
  END IF;
  RETURN TRUE;
END "OPPORTUNITY_DIM_Bat";



-- Procedure "SETOP_p" is the entry point for map "SETOP_p"

PROCEDURE "SETOP_p"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"SETOP_p"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."OPPORTUNITY"';
get_source_uoid            CONSTANT VARCHAR2(2000) := '';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"OPPORTUNITY_DIM_id" NUMBER(22) := 0;
"OPPORTUNITY_DIM_ins" NUMBER(22) := 0;
"OPPORTUNITY_DIM_upd" NUMBER(22) := 0;
"OPPORTUNITY_DIM_del" NUMBER(22) := 0;
"OPPORTUNITY_DIM_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"OPPORTUNITY_DIM_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"OPPORTUNITY_DIM_ir"  index_redirect_array;
"SV_OPPORTUNITY_DIM_srk" NUMBER;
"OPPORTUNITY_DIM_new"  BOOLEAN;
"OPPORTUNITY_DIM_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"SETOP_si" NUMBER(22) := 0;

"SETOP_i" NUMBER(22) := 0;


"OPPORTUNITY_DIM_si" NUMBER(22) := 0;

"OPPORTUNITY_DIM_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_SETOP_46_OPPORTUNITY_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_SETOP" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_47_ACCOUNT_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_48_DESCRIPTION" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_49_CLOSED" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_50_STAGE" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_51_SALES_POTENTIAL" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_52_CLOSE_PROBABILITY" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_53_ACTUAL_AMOUNT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_54_ESTIMATED_CLOSE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_55_ACTUAL_CLOSE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_56_NOTES" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_57_ACCOUNT_MANAGER_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_58_STATUS" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_59_EO_NEXT_STEP" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_60_REASON" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_61_LEADSOURCE_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_62_SECCODE_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_63_CREATE_USER" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_64_SO_CREATEDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_65_MODIFYUSER" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_66_SO_MODIFYDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_0_OPPORTUN" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_1_ACCOUNT_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_2_DESCRIPTI" IS TABLE OF VARCHAR2(128) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_3_CLOSED" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_4_STAGE" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_5_SALES_PO" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_6_CLOSE_PR" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_7_ACTUAL_A" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_8_ESTIMATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_9_ACTUAL_C" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_10_NOTES" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_11_ACCOUNT_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_12_STATUS" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_13_NEXT_STEP" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_14_REASON" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_15_LEADSOUR" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_16_SECCODE_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_17_CREATE_US" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_18_CREATION" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_19_MODIFYUS" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_20_LAST_UPD" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_25_GKDW_SOUR" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_SETOP_46_OPPORTUNITY_ID"  CHAR(12);
"SV_ROWKEY_SETOP"  VARCHAR2(18);
"SV_SETOP_47_ACCOUNT_ID"  CHAR(12);
"SV_SETOP_48_DESCRIPTION"  VARCHAR2(64);
"SV_SETOP_49_CLOSED"  CHAR(1);
"SV_SETOP_50_STAGE"  VARCHAR2(64);
"SV_SETOP_51_SALES_POTENTIAL"  NUMBER;
"SV_SETOP_52_CLOSE_PROBABILITY"  NUMBER;
"SV_SETOP_53_ACTUAL_AMOUNT"  NUMBER;
"SV_SETOP_54_ESTIMATED_CLOSE"  DATE;
"SV_SETOP_55_ACTUAL_CLOSE"  DATE;
"SV_SETOP_56_NOTES"  VARCHAR2(255);
"SV_SETOP_57_ACCOUNT_MANAGER_ID"  CHAR(12);
"SV_SETOP_58_STATUS"  VARCHAR2(64);
"SV_SETOP_59_EO_NEXT_STEP"  VARCHAR2(64);
"SV_SETOP_60_REASON"  VARCHAR2(64);
"SV_SETOP_61_LEADSOURCE_ID"  CHAR(12);
"SV_SETOP_62_SECCODE_ID"  CHAR(12);
"SV_SETOP_63_CREATE_USER"  CHAR(12);
"SV_SETOP_64_SO_CREATEDATE"  DATE;
"SV_SETOP_65_MODIFYUSER"  CHAR(12);
"SV_SETOP_66_SO_MODIFYDATE"  DATE;
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_OPPORTUN_0_OPPORTUN"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_1_ACCOUNT_"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_2_DESCRIPTI"  VARCHAR2(128);
"SV_OPPORTUNITY_DIM_3_CLOSED"  CHAR(1);
"SV_OPPORTUNITY_DIM_4_STAGE"  VARCHAR2(64);
"SV_OPPORTUN_5_SALES_PO"  NUMBER;
"SV_OPPORTUN_6_CLOSE_PR"  NUMBER;
"SV_OPPORTUN_7_ACTUAL_A"  NUMBER;
"SV_OPPORTUN_8_ESTIMATE"  DATE;
"SV_OPPORTUN_9_ACTUAL_C"  DATE;
"SV_OPPORTUNITY_DIM_10_NOTES"  VARCHAR2(255);
"SV_OPPORTUN_11_ACCOUNT_"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_12_STATUS"  VARCHAR2(64);
"SV_OPPORTUNITY_DIM_13_NEXT_ST"  VARCHAR2(64);
"SV_OPPORTUNITY_DIM_14_REASON"  VARCHAR2(64);
"SV_OPPORTUN_15_LEADSOUR"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_16_SECCODE_"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_17_CREATE_"  VARCHAR2(50);
"SV_OPPORTUN_18_CREATION"  DATE;
"SV_OPPORTUNITY_DIM_19_MODIFYUS"  VARCHAR2(50);
"SV_OPPORTUN_20_LAST_UPD"  DATE;
"SV_OPPORTUNITY_DIM_25_GKDW_SO"  VARCHAR2(20);

-- Bulk: intermediate collection variables
"SETOP_46_OPPORTUNITY_ID" "T_SETOP_46_OPPORTUNITY_ID";
"ROWKEY_SETOP" "T_ROWKEY_SETOP";
"SETOP_47_ACCOUNT_ID" "T_SETOP_47_ACCOUNT_ID";
"SETOP_48_DESCRIPTION" "T_SETOP_48_DESCRIPTION";
"SETOP_49_CLOSED" "T_SETOP_49_CLOSED";
"SETOP_50_STAGE" "T_SETOP_50_STAGE";
"SETOP_51_SALES_POTENTIAL" "T_SETOP_51_SALES_POTENTIAL";
"SETOP_52_CLOSE_PROBABILITY" "T_SETOP_52_CLOSE_PROBABILITY";
"SETOP_53_ACTUAL_AMOUNT" "T_SETOP_53_ACTUAL_AMOUNT";
"SETOP_54_ESTIMATED_CLOSE" "T_SETOP_54_ESTIMATED_CLOSE";
"SETOP_55_ACTUAL_CLOSE" "T_SETOP_55_ACTUAL_CLOSE";
"SETOP_56_NOTES" "T_SETOP_56_NOTES";
"SETOP_57_ACCOUNT_MANAGER_ID" "T_SETOP_57_ACCOUNT_MANAGER_ID";
"SETOP_58_STATUS" "T_SETOP_58_STATUS";
"SETOP_59_EO_NEXT_STEP" "T_SETOP_59_EO_NEXT_STEP";
"SETOP_60_REASON" "T_SETOP_60_REASON";
"SETOP_61_LEADSOURCE_ID" "T_SETOP_61_LEADSOURCE_ID";
"SETOP_62_SECCODE_ID" "T_SETOP_62_SECCODE_ID";
"SETOP_63_CREATE_USER" "T_SETOP_63_CREATE_USER";
"SETOP_64_SO_CREATEDATE" "T_SETOP_64_SO_CREATEDATE";
"SETOP_65_MODIFYUSER" "T_SETOP_65_MODIFYUSER";
"SETOP_66_SO_MODIFYDATE" "T_SETOP_66_SO_MODIFYDATE";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"OPPORTUN_0_OPPORTUN" "T_OPPORTUN_0_OPPORTUN";
"OPPORTUNITY_DIM_1_ACCOUNT_ID" "T_OPPORTUNITY_DIM_1_ACCOUNT_ID";
"OPPORTUNITY_DIM_2_DESCRIPTION" "T_OPPORTUNITY_DIM_2_DESCRIPTI";
"OPPORTUNITY_DIM_3_CLOSED" "T_OPPORTUNITY_DIM_3_CLOSED";
"OPPORTUNITY_DIM_4_STAGE" "T_OPPORTUNITY_DIM_4_STAGE";
"OPPORTUN_5_SALES_PO" "T_OPPORTUN_5_SALES_PO";
"OPPORTUN_6_CLOSE_PR" "T_OPPORTUN_6_CLOSE_PR";
"OPPORTUN_7_ACTUAL_A" "T_OPPORTUN_7_ACTUAL_A";
"OPPORTUN_8_ESTIMATE" "T_OPPORTUN_8_ESTIMATE";
"OPPORTUN_9_ACTUAL_C" "T_OPPORTUN_9_ACTUAL_C";
"OPPORTUNITY_DIM_10_NOTES" "T_OPPORTUNITY_DIM_10_NOTES";
"OPPORTUN_11_ACCOUNT_" "T_OPPORTUN_11_ACCOUNT_";
"OPPORTUNITY_DIM_12_STATUS" "T_OPPORTUNITY_DIM_12_STATUS";
"OPPORTUNITY_DIM_13_NEXT_STEP" "T_OPPORTUNITY_DIM_13_NEXT_STEP";
"OPPORTUNITY_DIM_14_REASON" "T_OPPORTUNITY_DIM_14_REASON";
"OPPORTUN_15_LEADSOUR" "T_OPPORTUN_15_LEADSOUR";
"OPPORTUNITY_DIM_16_SECCODE_ID" "T_OPPORTUNITY_DIM_16_SECCODE_";
"OPPORTUNITY_DIM_17_CREATE_USER" "T_OPPORTUNITY_DIM_17_CREATE_US";
"OPPORTUN_18_CREATION" "T_OPPORTUN_18_CREATION";
"OPPORTUNITY_DIM_19_MODIFYUSER" "T_OPPORTUNITY_DIM_19_MODIFYUS";
"OPPORTUN_20_LAST_UPD" "T_OPPORTUN_20_LAST_UPD";
"OPPORTUNITY_DIM_25_GKDW_SOURCE" "T_OPPORTUNITY_DIM_25_GKDW_SOUR";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "SETOP_ES"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_46_OPPORTUNITY_ID',0,80),
    p_value=>SUBSTRB("SETOP_46_OPPORTUNITY_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_47_ACCOUNT_ID',0,80),
    p_value=>SUBSTRB("SETOP_47_ACCOUNT_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_48_DESCRIPTION',0,80),
    p_value=>SUBSTRB("SETOP_48_DESCRIPTION"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_49_CLOSED',0,80),
    p_value=>SUBSTRB("SETOP_49_CLOSED"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_50_STAGE',0,80),
    p_value=>SUBSTRB("SETOP_50_STAGE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_51_SALES_POTENTIAL',0,80),
    p_value=>SUBSTRB("SETOP_51_SALES_POTENTIAL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_52_CLOSE_PROBABILITY',0,80),
    p_value=>SUBSTRB("SETOP_52_CLOSE_PROBABILITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_53_ACTUAL_AMOUNT',0,80),
    p_value=>SUBSTRB("SETOP_53_ACTUAL_AMOUNT"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_54_ESTIMATED_CLOSE',0,80),
    p_value=>SUBSTRB("SETOP_54_ESTIMATED_CLOSE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_55_ACTUAL_CLOSE',0,80),
    p_value=>SUBSTRB("SETOP_55_ACTUAL_CLOSE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_56_NOTES',0,80),
    p_value=>SUBSTRB("SETOP_56_NOTES"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_57_ACCOUNT_MANAGER_ID',0,80),
    p_value=>SUBSTRB("SETOP_57_ACCOUNT_MANAGER_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_58_STATUS',0,80),
    p_value=>SUBSTRB("SETOP_58_STATUS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_59_EO_NEXT_STEP',0,80),
    p_value=>SUBSTRB("SETOP_59_EO_NEXT_STEP"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_60_REASON',0,80),
    p_value=>SUBSTRB("SETOP_60_REASON"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_61_LEADSOURCE_ID',0,80),
    p_value=>SUBSTRB("SETOP_61_LEADSOURCE_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_62_SECCODE_ID',0,80),
    p_value=>SUBSTRB("SETOP_62_SECCODE_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_63_CREATE_USER',0,80),
    p_value=>SUBSTRB("SETOP_63_CREATE_USER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_64_SO_CREATEDATE',0,80),
    p_value=>SUBSTRB("SETOP_64_SO_CREATEDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_65_MODIFYUSER',0,80),
    p_value=>SUBSTRB("SETOP_65_MODIFYUSER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_66_SO_MODIFYDATE',0,80),
    p_value=>SUBSTRB("SETOP_66_SO_MODIFYDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "SETOP_ES";

---------------------------------------------------------------------------
-- Procedure "SETOP_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "SETOP_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 486: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "SETOP_ES"(p_error_index);
  END IF;
END "SETOP_ER";



---------------------------------------------------------------------------
-- Procedure "SETOP_SU" opens and initializes data source
-- for map "SETOP_p"
---------------------------------------------------------------------------
PROCEDURE "SETOP_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "SETOP_c"%ISOPEN) THEN
    OPEN "SETOP_c";
  END IF;
  get_read_success := TRUE;
END "SETOP_SU";

---------------------------------------------------------------------------
-- Procedure "SETOP_RD" fetches a bulk of rows from
--   the data source for map "SETOP_p"
---------------------------------------------------------------------------
PROCEDURE "SETOP_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "SETOP_46_OPPORTUNITY_ID".DELETE;
    "SETOP_47_ACCOUNT_ID".DELETE;
    "SETOP_48_DESCRIPTION".DELETE;
    "SETOP_49_CLOSED".DELETE;
    "SETOP_50_STAGE".DELETE;
    "SETOP_51_SALES_POTENTIAL".DELETE;
    "SETOP_52_CLOSE_PROBABILITY".DELETE;
    "SETOP_53_ACTUAL_AMOUNT".DELETE;
    "SETOP_54_ESTIMATED_CLOSE".DELETE;
    "SETOP_55_ACTUAL_CLOSE".DELETE;
    "SETOP_56_NOTES".DELETE;
    "SETOP_57_ACCOUNT_MANAGER_ID".DELETE;
    "SETOP_58_STATUS".DELETE;
    "SETOP_59_EO_NEXT_STEP".DELETE;
    "SETOP_60_REASON".DELETE;
    "SETOP_61_LEADSOURCE_ID".DELETE;
    "SETOP_62_SECCODE_ID".DELETE;
    "SETOP_63_CREATE_USER".DELETE;
    "SETOP_64_SO_CREATEDATE".DELETE;
    "SETOP_65_MODIFYUSER".DELETE;
    "SETOP_66_SO_MODIFYDATE".DELETE;

    FETCH
      "SETOP_c"
    BULK COLLECT INTO
      "SETOP_46_OPPORTUNITY_ID",
      "SETOP_47_ACCOUNT_ID",
      "SETOP_48_DESCRIPTION",
      "SETOP_49_CLOSED",
      "SETOP_50_STAGE",
      "SETOP_51_SALES_POTENTIAL",
      "SETOP_52_CLOSE_PROBABILITY",
      "SETOP_53_ACTUAL_AMOUNT",
      "SETOP_54_ESTIMATED_CLOSE",
      "SETOP_55_ACTUAL_CLOSE",
      "SETOP_56_NOTES",
      "SETOP_57_ACCOUNT_MANAGER_ID",
      "SETOP_58_STATUS",
      "SETOP_59_EO_NEXT_STEP",
      "SETOP_60_REASON",
      "SETOP_61_LEADSOURCE_ID",
      "SETOP_62_SECCODE_ID",
      "SETOP_63_CREATE_USER",
      "SETOP_64_SO_CREATEDATE",
      "SETOP_65_MODIFYUSER",
      "SETOP_66_SO_MODIFYDATE"
    LIMIT get_bulk_size;

    IF "SETOP_c"%NOTFOUND AND "SETOP_46_OPPORTUNITY_ID".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "SETOP_46_OPPORTUNITY_ID".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "SETOP_46_OPPORTUNITY_ID".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 487: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "SETOP_RD";

---------------------------------------------------------------------------
-- Procedure "SETOP_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "SETOP_DML"(si NUMBER, firstround BOOLEAN) IS
  "OPPORTUNITY_DIM_ins0" NUMBER := "OPPORTUNITY_DIM_ins";
  "OPPORTUNITY_DIM_upd0" NUMBER := "OPPORTUNITY_DIM_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "OPPORTUNITY_DIM_St" THEN
  -- Update/Insert DML for "OPPORTUNITY_DIM"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"OPPORTUNITY_DIM"';
    get_audit_detail_id := "OPPORTUNITY_DIM_id";
    "OPPORTUNITY_DIM_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "OPPORTUNITY_DIM_i" > get_bulk_size 
   OR "SETOP_c"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "OPPORTUNITY_DIM_si".."OPPORTUNITY_DIM_i" - 1 
            UPDATE
              "OPPORTUNITY_DIM"
            SET
  
  						"OPPORTUNITY_DIM"."ACCOUNT_ID" = "OPPORTUNITY_DIM_1_ACCOUNT_ID"
  (i),						"OPPORTUNITY_DIM"."DESCRIPTION" = "OPPORTUNITY_DIM_2_DESCRIPTION"
  (i),						"OPPORTUNITY_DIM"."CLOSED" = "OPPORTUNITY_DIM_3_CLOSED"
  (i),						"OPPORTUNITY_DIM"."STAGE" = "OPPORTUNITY_DIM_4_STAGE"
  (i),						"OPPORTUNITY_DIM"."SALES_POTENTIAL" = "OPPORTUN_5_SALES_PO"
  (i),						"OPPORTUNITY_DIM"."CLOSE_PROBABILITY" = "OPPORTUN_6_CLOSE_PR"
  (i),						"OPPORTUNITY_DIM"."ACTUAL_AMOUNT" = "OPPORTUN_7_ACTUAL_A"
  (i),						"OPPORTUNITY_DIM"."ESTIMATED_CLOSE" = "OPPORTUN_8_ESTIMATE"
  (i),						"OPPORTUNITY_DIM"."ACTUAL_CLOSE" = "OPPORTUN_9_ACTUAL_C"
  (i),						"OPPORTUNITY_DIM"."NOTES" = "OPPORTUNITY_DIM_10_NOTES"
  (i),						"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID" = "OPPORTUN_11_ACCOUNT_"
  (i),						"OPPORTUNITY_DIM"."STATUS" = "OPPORTUNITY_DIM_12_STATUS"
  (i),						"OPPORTUNITY_DIM"."NEXT_STEP" = "OPPORTUNITY_DIM_13_NEXT_STEP"
  (i),						"OPPORTUNITY_DIM"."REASON" = "OPPORTUNITY_DIM_14_REASON"
  (i),						"OPPORTUNITY_DIM"."LEADSOURCE_ID" = "OPPORTUN_15_LEADSOUR"
  (i),						"OPPORTUNITY_DIM"."SECCODE_ID" = "OPPORTUNITY_DIM_16_SECCODE_ID"
  (i),						"OPPORTUNITY_DIM"."CREATE_USER" = "OPPORTUNITY_DIM_17_CREATE_USER"
  (i),						"OPPORTUNITY_DIM"."CREATION_DATE" = "OPPORTUN_18_CREATION"
  (i),						"OPPORTUNITY_DIM"."MODIFYUSER" = "OPPORTUNITY_DIM_19_MODIFYUSER"
  (i),						"OPPORTUNITY_DIM"."LAST_UPDATE_DATE" = "OPPORTUN_20_LAST_UPD"
  (i),						"OPPORTUNITY_DIM"."GKDW_SOURCE" = "OPPORTUNITY_DIM_25_GKDW_SOURCE"
  (i)
    
            WHERE
  
  						"OPPORTUNITY_DIM"."OPPORTUNITY_ID" = "OPPORTUN_0_OPPORTUN"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "OPPORTUNITY_DIM_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "OPPORTUNITY_DIM_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd" + get_rowid.COUNT;
          "OPPORTUNITY_DIM_si" := "OPPORTUNITY_DIM_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "OPPORTUNITY_DIM_si".."OPPORTUNITY_DIM_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "OPPORTUNITY_DIM_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "OPPORTUNITY_DIM_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "OPPORTUNITY_DIM"
                SET
  
  								"OPPORTUNITY_DIM"."ACCOUNT_ID" = "OPPORTUNITY_DIM_1_ACCOUNT_ID"
  (last_successful_index),								"OPPORTUNITY_DIM"."DESCRIPTION" = "OPPORTUNITY_DIM_2_DESCRIPTION"
  (last_successful_index),								"OPPORTUNITY_DIM"."CLOSED" = "OPPORTUNITY_DIM_3_CLOSED"
  (last_successful_index),								"OPPORTUNITY_DIM"."STAGE" = "OPPORTUNITY_DIM_4_STAGE"
  (last_successful_index),								"OPPORTUNITY_DIM"."SALES_POTENTIAL" = "OPPORTUN_5_SALES_PO"
  (last_successful_index),								"OPPORTUNITY_DIM"."CLOSE_PROBABILITY" = "OPPORTUN_6_CLOSE_PR"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACTUAL_AMOUNT" = "OPPORTUN_7_ACTUAL_A"
  (last_successful_index),								"OPPORTUNITY_DIM"."ESTIMATED_CLOSE" = "OPPORTUN_8_ESTIMATE"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACTUAL_CLOSE" = "OPPORTUN_9_ACTUAL_C"
  (last_successful_index),								"OPPORTUNITY_DIM"."NOTES" = "OPPORTUNITY_DIM_10_NOTES"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID" = "OPPORTUN_11_ACCOUNT_"
  (last_successful_index),								"OPPORTUNITY_DIM"."STATUS" = "OPPORTUNITY_DIM_12_STATUS"
  (last_successful_index),								"OPPORTUNITY_DIM"."NEXT_STEP" = "OPPORTUNITY_DIM_13_NEXT_STEP"
  (last_successful_index),								"OPPORTUNITY_DIM"."REASON" = "OPPORTUNITY_DIM_14_REASON"
  (last_successful_index),								"OPPORTUNITY_DIM"."LEADSOURCE_ID" = "OPPORTUN_15_LEADSOUR"
  (last_successful_index),								"OPPORTUNITY_DIM"."SECCODE_ID" = "OPPORTUNITY_DIM_16_SECCODE_ID"
  (last_successful_index),								"OPPORTUNITY_DIM"."CREATE_USER" = "OPPORTUNITY_DIM_17_CREATE_USER"
  (last_successful_index),								"OPPORTUNITY_DIM"."CREATION_DATE" = "OPPORTUN_18_CREATION"
  (last_successful_index),								"OPPORTUNITY_DIM"."MODIFYUSER" = "OPPORTUNITY_DIM_19_MODIFYUSER"
  (last_successful_index),								"OPPORTUNITY_DIM"."LAST_UPDATE_DATE" = "OPPORTUN_20_LAST_UPD"
  (last_successful_index),								"OPPORTUNITY_DIM"."GKDW_SOURCE" = "OPPORTUNITY_DIM_25_GKDW_SOURCE"
  (last_successful_index)
  
                WHERE
  
  								"OPPORTUNITY_DIM"."OPPORTUNITY_ID" = "OPPORTUN_0_OPPORTUN"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "OPPORTUNITY_DIM_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_1_ACCOUNT_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."DESCRIPTION"',0,80),SUBSTRB("OPPORTUNITY_DIM_2_DESCRIPTION"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSED"',0,80),SUBSTRB("OPPORTUNITY_DIM_3_CLOSED"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STAGE"',0,80),SUBSTRB("OPPORTUNITY_DIM_4_STAGE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SALES_POTENTIAL"',0,80),SUBSTRB("OPPORTUN_5_SALES_PO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSE_PROBABILITY"',0,80),SUBSTRB("OPPORTUN_6_CLOSE_PR"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_AMOUNT"',0,80),SUBSTRB("OPPORTUN_7_ACTUAL_A"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ESTIMATED_CLOSE"',0,80),SUBSTRB("OPPORTUN_8_ESTIMATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_CLOSE"',0,80),SUBSTRB("OPPORTUN_9_ACTUAL_C"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NOTES"',0,80),SUBSTRB("OPPORTUNITY_DIM_10_NOTES"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID"',0,80),SUBSTRB("OPPORTUN_11_ACCOUNT_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STATUS"',0,80),SUBSTRB("OPPORTUNITY_DIM_12_STATUS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NEXT_STEP"',0,80),SUBSTRB("OPPORTUNITY_DIM_13_NEXT_STEP"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."REASON"',0,80),SUBSTRB("OPPORTUNITY_DIM_14_REASON"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LEADSOURCE_ID"',0,80),SUBSTRB("OPPORTUN_15_LEADSOUR"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SECCODE_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_16_SECCODE_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATE_USER"',0,80),SUBSTRB("OPPORTUNITY_DIM_17_CREATE_USER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATION_DATE"',0,80),SUBSTRB("OPPORTUN_18_CREATION"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."MODIFYUSER"',0,80),SUBSTRB("OPPORTUNITY_DIM_19_MODIFYUSER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("OPPORTUN_20_LAST_UPD"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("OPPORTUNITY_DIM_25_GKDW_SOURCE"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
                
                IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "OPPORTUNITY_DIM_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "OPPORTUNITY_DIM_si" >= "OPPORTUNITY_DIM_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "OPPORTUNITY_DIM_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"OPPORTUN_0_OPPORTUN"(insert_bulk_index) := "OPPORTUN_0_OPPORTUN"(update_bulk(j));
  		"OPPORTUNITY_DIM_1_ACCOUNT_ID"(insert_bulk_index) := "OPPORTUNITY_DIM_1_ACCOUNT_ID"(update_bulk(j));
  		"OPPORTUNITY_DIM_2_DESCRIPTION"(insert_bulk_index) := "OPPORTUNITY_DIM_2_DESCRIPTION"(update_bulk(j));
  		"OPPORTUNITY_DIM_3_CLOSED"(insert_bulk_index) := "OPPORTUNITY_DIM_3_CLOSED"(update_bulk(j));
  		"OPPORTUNITY_DIM_4_STAGE"(insert_bulk_index) := "OPPORTUNITY_DIM_4_STAGE"(update_bulk(j));
  		"OPPORTUN_5_SALES_PO"(insert_bulk_index) := "OPPORTUN_5_SALES_PO"(update_bulk(j));
  		"OPPORTUN_6_CLOSE_PR"(insert_bulk_index) := "OPPORTUN_6_CLOSE_PR"(update_bulk(j));
  		"OPPORTUN_7_ACTUAL_A"(insert_bulk_index) := "OPPORTUN_7_ACTUAL_A"(update_bulk(j));
  		"OPPORTUN_8_ESTIMATE"(insert_bulk_index) := "OPPORTUN_8_ESTIMATE"(update_bulk(j));
  		"OPPORTUN_9_ACTUAL_C"(insert_bulk_index) := "OPPORTUN_9_ACTUAL_C"(update_bulk(j));
  		"OPPORTUNITY_DIM_10_NOTES"(insert_bulk_index) := "OPPORTUNITY_DIM_10_NOTES"(update_bulk(j));
  		"OPPORTUN_11_ACCOUNT_"(insert_bulk_index) := "OPPORTUN_11_ACCOUNT_"(update_bulk(j));
  		"OPPORTUNITY_DIM_12_STATUS"(insert_bulk_index) := "OPPORTUNITY_DIM_12_STATUS"(update_bulk(j));
  		"OPPORTUNITY_DIM_13_NEXT_STEP"(insert_bulk_index) := "OPPORTUNITY_DIM_13_NEXT_STEP"(update_bulk(j));
  		"OPPORTUNITY_DIM_14_REASON"(insert_bulk_index) := "OPPORTUNITY_DIM_14_REASON"(update_bulk(j));
  		"OPPORTUN_15_LEADSOUR"(insert_bulk_index) := "OPPORTUN_15_LEADSOUR"(update_bulk(j));
  		"OPPORTUNITY_DIM_16_SECCODE_ID"(insert_bulk_index) := "OPPORTUNITY_DIM_16_SECCODE_ID"(update_bulk(j));
  		"OPPORTUNITY_DIM_17_CREATE_USER"(insert_bulk_index) := "OPPORTUNITY_DIM_17_CREATE_USER"(update_bulk(j));
  		"OPPORTUN_18_CREATION"(insert_bulk_index) := "OPPORTUN_18_CREATION"(update_bulk(j));
  		"OPPORTUNITY_DIM_19_MODIFYUSER"(insert_bulk_index) := "OPPORTUNITY_DIM_19_MODIFYUSER"(update_bulk(j));
  		"OPPORTUN_20_LAST_UPD"(insert_bulk_index) := "OPPORTUN_20_LAST_UPD"(update_bulk(j));
  		"OPPORTUNITY_DIM_25_GKDW_SOURCE"(insert_bulk_index) := "OPPORTUNITY_DIM_25_GKDW_SOURCE"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "OPPORTUNITY_DIM_srk"(insert_bulk_index) := "OPPORTUNITY_DIM_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "OPPORTUNITY_DIM_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "OPPORTUNITY_DIM_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "OPPORTUNITY_DIM_si"..insert_bulk_index
          INSERT INTO
            "OPPORTUNITY_DIM"
            ("OPPORTUNITY_DIM"."OPPORTUNITY_ID",
            "OPPORTUNITY_DIM"."ACCOUNT_ID",
            "OPPORTUNITY_DIM"."DESCRIPTION",
            "OPPORTUNITY_DIM"."CLOSED",
            "OPPORTUNITY_DIM"."STAGE",
            "OPPORTUNITY_DIM"."SALES_POTENTIAL",
            "OPPORTUNITY_DIM"."CLOSE_PROBABILITY",
            "OPPORTUNITY_DIM"."ACTUAL_AMOUNT",
            "OPPORTUNITY_DIM"."ESTIMATED_CLOSE",
            "OPPORTUNITY_DIM"."ACTUAL_CLOSE",
            "OPPORTUNITY_DIM"."NOTES",
            "OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID",
            "OPPORTUNITY_DIM"."STATUS",
            "OPPORTUNITY_DIM"."NEXT_STEP",
            "OPPORTUNITY_DIM"."REASON",
            "OPPORTUNITY_DIM"."LEADSOURCE_ID",
            "OPPORTUNITY_DIM"."SECCODE_ID",
            "OPPORTUNITY_DIM"."CREATE_USER",
            "OPPORTUNITY_DIM"."CREATION_DATE",
            "OPPORTUNITY_DIM"."MODIFYUSER",
            "OPPORTUNITY_DIM"."LAST_UPDATE_DATE",
            "OPPORTUNITY_DIM"."GKDW_SOURCE")
          VALUES
            ("OPPORTUN_0_OPPORTUN"(i),
            "OPPORTUNITY_DIM_1_ACCOUNT_ID"(i),
            "OPPORTUNITY_DIM_2_DESCRIPTION"(i),
            "OPPORTUNITY_DIM_3_CLOSED"(i),
            "OPPORTUNITY_DIM_4_STAGE"(i),
            "OPPORTUN_5_SALES_PO"(i),
            "OPPORTUN_6_CLOSE_PR"(i),
            "OPPORTUN_7_ACTUAL_A"(i),
            "OPPORTUN_8_ESTIMATE"(i),
            "OPPORTUN_9_ACTUAL_C"(i),
            "OPPORTUNITY_DIM_10_NOTES"(i),
            "OPPORTUN_11_ACCOUNT_"(i),
            "OPPORTUNITY_DIM_12_STATUS"(i),
            "OPPORTUNITY_DIM_13_NEXT_STEP"(i),
            "OPPORTUNITY_DIM_14_REASON"(i),
            "OPPORTUN_15_LEADSOUR"(i),
            "OPPORTUNITY_DIM_16_SECCODE_ID"(i),
            "OPPORTUNITY_DIM_17_CREATE_USER"(i),
            "OPPORTUN_18_CREATION"(i),
            "OPPORTUNITY_DIM_19_MODIFYUSER"(i),
            "OPPORTUN_20_LAST_UPD"(i),
            "OPPORTUNITY_DIM_25_GKDW_SOURCE"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "OPPORTUNITY_DIM_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "OPPORTUNITY_DIM_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "OPPORTUNITY_DIM_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 488: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("OPPORTUN_0_OPPORTUN"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_1_ACCOUNT_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."DESCRIPTION"',0,80),SUBSTRB("OPPORTUNITY_DIM_2_DESCRIPTION"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSED"',0,80),SUBSTRB("OPPORTUNITY_DIM_3_CLOSED"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STAGE"',0,80),SUBSTRB("OPPORTUNITY_DIM_4_STAGE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SALES_POTENTIAL"',0,80),SUBSTRB("OPPORTUN_5_SALES_PO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSE_PROBABILITY"',0,80),SUBSTRB("OPPORTUN_6_CLOSE_PR"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_AMOUNT"',0,80),SUBSTRB("OPPORTUN_7_ACTUAL_A"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ESTIMATED_CLOSE"',0,80),SUBSTRB("OPPORTUN_8_ESTIMATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_CLOSE"',0,80),SUBSTRB("OPPORTUN_9_ACTUAL_C"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NOTES"',0,80),SUBSTRB("OPPORTUNITY_DIM_10_NOTES"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID"',0,80),SUBSTRB("OPPORTUN_11_ACCOUNT_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STATUS"',0,80),SUBSTRB("OPPORTUNITY_DIM_12_STATUS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NEXT_STEP"',0,80),SUBSTRB("OPPORTUNITY_DIM_13_NEXT_STEP"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."REASON"',0,80),SUBSTRB("OPPORTUNITY_DIM_14_REASON"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LEADSOURCE_ID"',0,80),SUBSTRB("OPPORTUN_15_LEADSOUR"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SECCODE_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_16_SECCODE_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATE_USER"',0,80),SUBSTRB("OPPORTUNITY_DIM_17_CREATE_USER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATION_DATE"',0,80),SUBSTRB("OPPORTUN_18_CREATION"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."MODIFYUSER"',0,80),SUBSTRB("OPPORTUNITY_DIM_19_MODIFYUSER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("OPPORTUN_20_LAST_UPD"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("OPPORTUNITY_DIM_25_GKDW_SOURCE"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
          
          IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "OPPORTUNITY_DIM_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "OPPORTUNITY_DIM_ins" := "OPPORTUNITY_DIM_ins" + get_rowid.COUNT;
      "OPPORTUNITY_DIM_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "OPPORTUNITY_DIM_ins" := "OPPORTUNITY_DIM_ins0"; 
    "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd0";
  END IF;

END "SETOP_DML";

---------------------------------------------------------------------------
-- "SETOP_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "OPPORTUNITY_DIM_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "SETOP_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "OPPORTUNITY_DIM_St" THEN
          "OPPORTUNITY_DIM_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"OPPORTUNITY_DIM"',
              p_target_uoid=>'A41FFB19D7015678E040007F01006C7D',
              p_stm=>'TRACE 490',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "OPPORTUNITY_DIM_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D4245678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
              p_parent_object_name=>'OPPORTUNITY_DIM',
              p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY_DIM',
              p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D7005678E040007F01006C7D', -- Operator OPPORTUNITY
              p_parent_object_name=>'OPPORTUNITY',
              p_parent_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY',
              p_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D7015678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
              p_parent_object_name=>'OPPORTUNITY_DIM',
              p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY_DIM',
              p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "SETOP_si" := 0;
    "OPPORTUNITY_DIM_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "SETOP_SU";

      LOOP
        IF "SETOP_si" = 0 THEN
          "SETOP_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "SETOP_46_OPPORTUNITY_ID".COUNT - 1;
          ELSE
            bulk_count := "SETOP_46_OPPORTUNITY_ID".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "OPPORTUNITY_DIM_ir".DELETE;
"OPPORTUNITY_DIM_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "SETOP_i" := "SETOP_si";
        BEGIN
          
          LOOP
            EXIT WHEN "OPPORTUNITY_DIM_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "SETOP_i" := "SETOP_i" + 1;
            "SETOP_si" := "SETOP_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "OPPORTUNITY_DIM_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("SETOP_c"%NOTFOUND AND
               "SETOP_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "SETOP_i" > bulk_count THEN
            
              "SETOP_si" := 0;
              EXIT;
            END IF;


            
get_target_name := '"OPPORTUNITY_DIM"';
            get_audit_detail_id := "OPPORTUNITY_DIM_id";
            IF NOT "OPPORTUNITY_DIM_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"OPPORTUN_0_OPPORTUN"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_46_OPPORTUNITY_ID"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_0_OPPORTUN"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_46_OPPORTUNITY_ID"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_0_OPPORTUN"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_46_OPPORTUNITY_ID"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_0_OPPORTUN" :=
            
            RTRIM("SETOP_46_OPPORTUNITY_ID"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_1_ACCOUNT_ID"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_47_ACCOUNT_ID"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_1_ACCOUNT_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_47_ACCOUNT_ID"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_1_ACCOUNT_ID"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_47_ACCOUNT_ID"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_1_ACCOUNT_" :=
            
            RTRIM("SETOP_47_ACCOUNT_ID"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_2_DESCRIPTION"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_48_DESCRIPTION"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_2_DESCRIPTION"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_48_DESCRIPTION"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_2_DESCRIPTION"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_48_DESCRIPTION"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_2_DESCRIPTI" :=
            
            "SETOP_48_DESCRIPTION"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_3_CLOSED"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_49_CLOSED"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_3_CLOSED"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_49_CLOSED"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_3_CLOSED"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_49_CLOSED"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_3_CLOSED" :=
            
            RTRIM("SETOP_49_CLOSED"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_4_STAGE"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_50_STAGE"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_4_STAGE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_50_STAGE"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_4_STAGE"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_50_STAGE"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_4_STAGE" :=
            
            "SETOP_50_STAGE"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_5_SALES_PO"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_51_SALES_POTENTIAL"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_5_SALES_PO"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_51_SALES_POTENTIAL"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_5_SALES_PO"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_51_SALES_POTENTIAL"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_5_SALES_PO" :=
            
            "SETOP_51_SALES_POTENTIAL"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_6_CLOSE_PR"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_52_CLOSE_PROBABILITY"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_6_CLOSE_PR"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_52_CLOSE_PROBABILITY"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_6_CLOSE_PR"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_52_CLOSE_PROBABILITY"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_6_CLOSE_PR" :=
            
            "SETOP_52_CLOSE_PROBABILITY"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_7_ACTUAL_A"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_53_ACTUAL_AMOUNT"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_7_ACTUAL_A"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_53_ACTUAL_AMOUNT"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_7_ACTUAL_A"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_53_ACTUAL_AMOUNT"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_7_ACTUAL_A" :=
            
            "SETOP_53_ACTUAL_AMOUNT"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_8_ESTIMATE"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_54_ESTIMATED_CLOSE"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_8_ESTIMATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_54_ESTIMATED_CLOSE"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_8_ESTIMATE"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_54_ESTIMATED_CLOSE"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_8_ESTIMATE" :=
            
            "SETOP_54_ESTIMATED_CLOSE"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_9_ACTUAL_C"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_55_ACTUAL_CLOSE"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_9_ACTUAL_C"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_55_ACTUAL_CLOSE"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_9_ACTUAL_C"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_55_ACTUAL_CLOSE"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_9_ACTUAL_C" :=
            
            "SETOP_55_ACTUAL_CLOSE"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_10_NOTES"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_56_NOTES"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_10_NOTES"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_56_NOTES"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_10_NOTES"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_56_NOTES"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_10_NOTES" :=
            
            "SETOP_56_NOTES"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_11_ACCOUNT_"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_11_ACCOUNT_"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_57_ACCOUNT_MANAGER_ID"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_11_ACCOUNT_"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_11_ACCOUNT_" :=
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_12_STATUS"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_58_STATUS"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_12_STATUS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_58_STATUS"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_12_STATUS"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_58_STATUS"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_12_STATUS" :=
            
            "SETOP_58_STATUS"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_13_NEXT_STEP"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_59_EO_NEXT_STEP"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_13_NEXT_STEP"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_59_EO_NEXT_STEP"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_13_NEXT_STEP"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_59_EO_NEXT_STEP"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_13_NEXT_ST" :=
            
            "SETOP_59_EO_NEXT_STEP"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_14_REASON"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_60_REASON"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_14_REASON"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_60_REASON"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_14_REASON"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_60_REASON"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_14_REASON" :=
            
            "SETOP_60_REASON"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_15_LEADSOUR"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_61_LEADSOURCE_ID"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_15_LEADSOUR"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_61_LEADSOURCE_ID"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_15_LEADSOUR"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_61_LEADSOURCE_ID"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_15_LEADSOUR" :=
            
            RTRIM("SETOP_61_LEADSOURCE_ID"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_16_SECCODE_ID"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_62_SECCODE_ID"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_16_SECCODE_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_62_SECCODE_ID"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_16_SECCODE_ID"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_62_SECCODE_ID"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_16_SECCODE_" :=
            
            RTRIM("SETOP_62_SECCODE_ID"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_17_CREATE_USER"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_63_CREATE_USER"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_17_CREATE_USER"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_63_CREATE_USER"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_17_CREATE_USER"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_63_CREATE_USER"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_17_CREATE_" :=
            
            RTRIM("SETOP_63_CREATE_USER"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_18_CREATION"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_64_SO_CREATEDATE"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_18_CREATION"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_64_SO_CREATEDATE"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_18_CREATION"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_64_SO_CREATEDATE"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_18_CREATION" :=
            
            "SETOP_64_SO_CREATEDATE"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_19_MODIFYUSER"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_65_MODIFYUSER"("SETOP_i"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_19_MODIFYUSER"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_65_MODIFYUSER"("SETOP_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_19_MODIFYUSER"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_65_MODIFYUSER"("SETOP_i"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_19_MODIFYUS" :=
            
            RTRIM("SETOP_65_MODIFYUSER"("SETOP_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_20_LAST_UPD"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_66_SO_MODIFYDATE"("SETOP_i");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_20_LAST_UPD"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_66_SO_MODIFYDATE"("SETOP_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_20_LAST_UPD"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_66_SO_MODIFYDATE"("SETOP_i");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_20_LAST_UPD" :=
            
            "SETOP_66_SO_MODIFYDATE"("SETOP_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_25_GKDW_SOURCE"("OPPORTUNITY_DIM_i") := 
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_25_GKDW_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_25_GKDW_SOURCE"("OPPORTUNITY_DIM_i") :=
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_25_GKDW_SO" :=
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "OPPORTUNITY_DIM_srk"("OPPORTUNITY_DIM_i") := get_rowkey + "SETOP_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_OPPORTUNITY_DIM_srk" := get_rowkey + "SETOP_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "OPPORTUNITY_DIM_new" := TRUE;
                ELSE
                  "OPPORTUNITY_DIM_i" := "OPPORTUNITY_DIM_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "SETOP_ER"('TRACE 491: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "SETOP_i");
                  
                  "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
                  
                  IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("OPPORTUNITY_DIM_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "OPPORTUNITY_DIM_new" 
            AND (NOT "OPPORTUNITY_DIM_nul") THEN
              "OPPORTUNITY_DIM_ir"(dml_bsize) := "OPPORTUNITY_DIM_i";
            	"OPPORTUN_0_OPPORTUN"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_0_OPPORTUN";
            	"OPPORTUNITY_DIM_1_ACCOUNT_ID"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_1_ACCOUNT_";
            	"OPPORTUNITY_DIM_2_DESCRIPTION"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_2_DESCRIPTI";
            	"OPPORTUNITY_DIM_3_CLOSED"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_3_CLOSED";
            	"OPPORTUNITY_DIM_4_STAGE"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_4_STAGE";
            	"OPPORTUN_5_SALES_PO"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_5_SALES_PO";
            	"OPPORTUN_6_CLOSE_PR"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_6_CLOSE_PR";
            	"OPPORTUN_7_ACTUAL_A"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_7_ACTUAL_A";
            	"OPPORTUN_8_ESTIMATE"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_8_ESTIMATE";
            	"OPPORTUN_9_ACTUAL_C"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_9_ACTUAL_C";
            	"OPPORTUNITY_DIM_10_NOTES"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_10_NOTES";
            	"OPPORTUN_11_ACCOUNT_"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_11_ACCOUNT_";
            	"OPPORTUNITY_DIM_12_STATUS"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_12_STATUS";
            	"OPPORTUNITY_DIM_13_NEXT_STEP"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_13_NEXT_ST";
            	"OPPORTUNITY_DIM_14_REASON"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_14_REASON";
            	"OPPORTUN_15_LEADSOUR"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_15_LEADSOUR";
            	"OPPORTUNITY_DIM_16_SECCODE_ID"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_16_SECCODE_";
            	"OPPORTUNITY_DIM_17_CREATE_USER"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_17_CREATE_";
            	"OPPORTUN_18_CREATION"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_18_CREATION";
            	"OPPORTUNITY_DIM_19_MODIFYUSER"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_19_MODIFYUS";
            	"OPPORTUN_20_LAST_UPD"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_20_LAST_UPD";
            	"OPPORTUNITY_DIM_25_GKDW_SOURCE"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_25_GKDW_SO";
              "OPPORTUNITY_DIM_srk"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_srk";
              "OPPORTUNITY_DIM_i" := "OPPORTUNITY_DIM_i" + 1;
            ELSE
              "OPPORTUNITY_DIM_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "SETOP_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "SETOP_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "SETOP_ER"('TRACE 489: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "SETOP_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "SETOP_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "SETOP_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "SETOP_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "SETOP_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "OPPORTUNITY_DIM_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"OPPORTUNITY_DIM_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"OPPORTUNITY_DIM_ins",
        p_upd=>"OPPORTUNITY_DIM_upd",
        p_del=>"OPPORTUNITY_DIM_del",
        p_err=>"OPPORTUNITY_DIM_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "OPPORTUNITY_DIM_ins";
    get_updated  := get_updated  + "OPPORTUNITY_DIM_upd";
    get_deleted  := get_deleted  + "OPPORTUNITY_DIM_del";
    get_errors   := get_errors   + "OPPORTUNITY_DIM_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "SETOP_p";



-- Procedure "SETOP_t" is the entry point for map "SETOP_t"

PROCEDURE "SETOP_t"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"SETOP_t"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."OPPORTUNITY"';
get_source_uoid            CONSTANT VARCHAR2(2000) := '';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"OPPORTUNITY_DIM_id" NUMBER(22) := 0;
"OPPORTUNITY_DIM_ins" NUMBER(22) := 0;
"OPPORTUNITY_DIM_upd" NUMBER(22) := 0;
"OPPORTUNITY_DIM_del" NUMBER(22) := 0;
"OPPORTUNITY_DIM_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"OPPORTUNITY_DIM_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"OPPORTUNITY_DIM_ir"  index_redirect_array;
"SV_OPPORTUNITY_DIM_srk" NUMBER;
"OPPORTUNITY_DIM_new"  BOOLEAN;
"OPPORTUNITY_DIM_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"SETOP_si$1" NUMBER(22) := 0;

"SETOP_i$1" NUMBER(22) := 0;


"OPPORTUNITY_DIM_si" NUMBER(22) := 0;

"OPPORTUNITY_DIM_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_SETOP_46_OPPORTUNITY_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_SETOP$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_47_ACCOUNT_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_48_DESCRIPTION$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_49_CLOSED$1" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_50_STAGE$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_51_SALES_POTENTIAL$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_52_CLOSE_PROBABILITY$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_53_ACTUAL_AMOUNT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_54_ESTIMATED_CLOSE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_55_ACTUAL_CLOSE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_56_NOTES$1" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_57_ACCOUNT_MANAGER_" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_58_STATUS$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_59_EO_NEXT_STEP$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_60_REASON$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_61_LEADSOURCE_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_62_SECCODE_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_63_CREATE_USER$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_64_SO_CREATEDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_65_MODIFYUSER$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_SETOP_66_SO_MODIFYDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_0_OPPORTUN$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_1_ACCOUNT_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_2_DESCRIP" IS TABLE OF VARCHAR2(128) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_3_CLOSED$1" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_4_STAGE$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_5_SALES_PO$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_6_CLOSE_PR$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_7_ACTUAL_A$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_8_ESTIMATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_9_ACTUAL_C$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_10_NOTES$1" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_11_ACCOUNT_$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_12_STATUS$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_13_NEXT_ST" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_14_REASON$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_15_LEADSOUR$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_16_SECCOD" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_17_CREATE_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_18_CREATION$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_19_MODIFY" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUN_20_LAST_UPD$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_OPPORTUNITY_DIM_25_GKDW_SO" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_SETOP_46_OPPORTUNITY_ID$1"  CHAR(12);
"SV_ROWKEY_SETOP$1"  VARCHAR2(18);
"SV_SETOP_47_ACCOUNT_ID$1"  CHAR(12);
"SV_SETOP_48_DESCRIPTION$1"  VARCHAR2(64);
"SV_SETOP_49_CLOSED$1"  CHAR(1);
"SV_SETOP_50_STAGE$1"  VARCHAR2(64);
"SV_SETOP_51_SALES_POTENTIAL$1"  NUMBER;
"SV_SETOP_52_CLOSE_PROBABILI"  NUMBER;
"SV_SETOP_53_ACTUAL_AMOUNT$1"  NUMBER;
"SV_SETOP_54_ESTIMATED_CLOSE$1"  DATE;
"SV_SETOP_55_ACTUAL_CLOSE$1"  DATE;
"SV_SETOP_56_NOTES$1"  VARCHAR2(255);
"SV_SETOP_57_ACCOUNT_MANAGER_"  CHAR(12);
"SV_SETOP_58_STATUS$1"  VARCHAR2(64);
"SV_SETOP_59_EO_NEXT_STEP$1"  VARCHAR2(64);
"SV_SETOP_60_REASON$1"  VARCHAR2(64);
"SV_SETOP_61_LEADSOURCE_ID$1"  CHAR(12);
"SV_SETOP_62_SECCODE_ID$1"  CHAR(12);
"SV_SETOP_63_CREATE_USER$1"  CHAR(12);
"SV_SETOP_64_SO_CREATEDATE$1"  DATE;
"SV_SETOP_65_MODIFYUSER$1"  CHAR(12);
"SV_SETOP_66_SO_MODIFYDATE$1"  DATE;
"SV_ROWKEY_DUMMY_TABLE_CURSOR$1"  VARCHAR2(18);
"SV_OPPORTUN_0_OPPORTUN$1"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_1_ACCOUN"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_2_DESCRIP"  VARCHAR2(128);
"SV_OPPORTUNITY_DIM_3_CLOSED$1"  CHAR(1);
"SV_OPPORTUNITY_DIM_4_STAGE$1"  VARCHAR2(64);
"SV_OPPORTUN_5_SALES_PO$1"  NUMBER;
"SV_OPPORTUN_6_CLOSE_PR$1"  NUMBER;
"SV_OPPORTUN_7_ACTUAL_A$1"  NUMBER;
"SV_OPPORTUN_8_ESTIMATE$1"  DATE;
"SV_OPPORTUN_9_ACTUAL_C$1"  DATE;
"SV_OPPORTUNITY_DIM_10_NOTES$1"  VARCHAR2(255);
"SV_OPPORTUN_11_ACCOUNT_$1"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_12_STATUS$1"  VARCHAR2(64);
"SV_OPPORTUNITY_DIM_13_NEXT_"  VARCHAR2(64);
"SV_OPPORTUNITY_DIM_14_REASON$1"  VARCHAR2(64);
"SV_OPPORTUN_15_LEADSOUR$1"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_16_SECCOD"  VARCHAR2(50);
"SV_OPPORTUNITY_DIM_17_CREAT"  VARCHAR2(50);
"SV_OPPORTUN_18_CREATION$1"  DATE;
"SV_OPPORTUNITY_DIM_19_MODIFY"  VARCHAR2(50);
"SV_OPPORTUN_20_LAST_UPD$1"  DATE;
"SV_OPPORTUNITY_DIM_25_GKDW_"  VARCHAR2(20);

-- Bulk: intermediate collection variables
"SETOP_46_OPPORTUNITY_ID$1" "T_SETOP_46_OPPORTUNITY_ID$1";
"ROWKEY_SETOP$1" "T_ROWKEY_SETOP$1";
"SETOP_47_ACCOUNT_ID$1" "T_SETOP_47_ACCOUNT_ID$1";
"SETOP_48_DESCRIPTION$1" "T_SETOP_48_DESCRIPTION$1";
"SETOP_49_CLOSED$1" "T_SETOP_49_CLOSED$1";
"SETOP_50_STAGE$1" "T_SETOP_50_STAGE$1";
"SETOP_51_SALES_POTENTIAL$1" "T_SETOP_51_SALES_POTENTIAL$1";
"SETOP_52_CLOSE_PROBABILITY$1" "T_SETOP_52_CLOSE_PROBABILITY$1";
"SETOP_53_ACTUAL_AMOUNT$1" "T_SETOP_53_ACTUAL_AMOUNT$1";
"SETOP_54_ESTIMATED_CLOSE$1" "T_SETOP_54_ESTIMATED_CLOSE$1";
"SETOP_55_ACTUAL_CLOSE$1" "T_SETOP_55_ACTUAL_CLOSE$1";
"SETOP_56_NOTES$1" "T_SETOP_56_NOTES$1";
"SETOP_57_ACCOUNT_MANAGER_ID$1" "T_SETOP_57_ACCOUNT_MANAGER_";
"SETOP_58_STATUS$1" "T_SETOP_58_STATUS$1";
"SETOP_59_EO_NEXT_STEP$1" "T_SETOP_59_EO_NEXT_STEP$1";
"SETOP_60_REASON$1" "T_SETOP_60_REASON$1";
"SETOP_61_LEADSOURCE_ID$1" "T_SETOP_61_LEADSOURCE_ID$1";
"SETOP_62_SECCODE_ID$1" "T_SETOP_62_SECCODE_ID$1";
"SETOP_63_CREATE_USER$1" "T_SETOP_63_CREATE_USER$1";
"SETOP_64_SO_CREATEDATE$1" "T_SETOP_64_SO_CREATEDATE$1";
"SETOP_65_MODIFYUSER$1" "T_SETOP_65_MODIFYUSER$1";
"SETOP_66_SO_MODIFYDATE$1" "T_SETOP_66_SO_MODIFYDATE$1";
"ROWKEY_DUMMY_TABLE_CURSOR$1" "T_ROWKEY_DUMMY_TABLE_CURSOR$1";
"OPPORTUN_0_OPPORTUN$1" "T_OPPORTUN_0_OPPORTUN$1";
"OPPORTUNITY_DIM_1_ACCOUNT_ID$1" "T_OPPORTUNITY_DIM_1_ACCOUNT_";
"OPPORTUNITY_DIM_2_DESCRIPTI" "T_OPPORTUNITY_DIM_2_DESCRIP";
"OPPORTUNITY_DIM_3_CLOSED$1" "T_OPPORTUNITY_DIM_3_CLOSED$1";
"OPPORTUNITY_DIM_4_STAGE$1" "T_OPPORTUNITY_DIM_4_STAGE$1";
"OPPORTUN_5_SALES_PO$1" "T_OPPORTUN_5_SALES_PO$1";
"OPPORTUN_6_CLOSE_PR$1" "T_OPPORTUN_6_CLOSE_PR$1";
"OPPORTUN_7_ACTUAL_A$1" "T_OPPORTUN_7_ACTUAL_A$1";
"OPPORTUN_8_ESTIMATE$1" "T_OPPORTUN_8_ESTIMATE$1";
"OPPORTUN_9_ACTUAL_C$1" "T_OPPORTUN_9_ACTUAL_C$1";
"OPPORTUNITY_DIM_10_NOTES$1" "T_OPPORTUNITY_DIM_10_NOTES$1";
"OPPORTUN_11_ACCOUNT_$1" "T_OPPORTUN_11_ACCOUNT_$1";
"OPPORTUNITY_DIM_12_STATUS$1" "T_OPPORTUNITY_DIM_12_STATUS$1";
"OPPORTUNITY_DIM_13_NEXT_STEP$1" "T_OPPORTUNITY_DIM_13_NEXT_ST";
"OPPORTUNITY_DIM_14_REASON$1" "T_OPPORTUNITY_DIM_14_REASON$1";
"OPPORTUN_15_LEADSOUR$1" "T_OPPORTUN_15_LEADSOUR$1";
"OPPORTUNITY_DIM_16_SECCODE_" "T_OPPORTUNITY_DIM_16_SECCOD";
"OPPORTUNITY_DIM_17_CREATE_US" "T_OPPORTUNITY_DIM_17_CREATE_";
"OPPORTUN_18_CREATION$1" "T_OPPORTUN_18_CREATION$1";
"OPPORTUNITY_DIM_19_MODIFYUS" "T_OPPORTUNITY_DIM_19_MODIFY";
"OPPORTUN_20_LAST_UPD$1" "T_OPPORTUN_20_LAST_UPD$1";
"OPPORTUNITY_DIM_25_GKDW_SOUR" "T_OPPORTUNITY_DIM_25_GKDW_SO";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "SETOP_ES$1"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_46_OPPORTUNITY_ID',0,80),
    p_value=>SUBSTRB("SETOP_46_OPPORTUNITY_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_47_ACCOUNT_ID',0,80),
    p_value=>SUBSTRB("SETOP_47_ACCOUNT_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_48_DESCRIPTION',0,80),
    p_value=>SUBSTRB("SETOP_48_DESCRIPTION$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_49_CLOSED',0,80),
    p_value=>SUBSTRB("SETOP_49_CLOSED$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_50_STAGE',0,80),
    p_value=>SUBSTRB("SETOP_50_STAGE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_51_SALES_POTENTIAL',0,80),
    p_value=>SUBSTRB("SETOP_51_SALES_POTENTIAL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_52_CLOSE_PROBABILITY',0,80),
    p_value=>SUBSTRB("SETOP_52_CLOSE_PROBABILITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_53_ACTUAL_AMOUNT',0,80),
    p_value=>SUBSTRB("SETOP_53_ACTUAL_AMOUNT$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_54_ESTIMATED_CLOSE',0,80),
    p_value=>SUBSTRB("SETOP_54_ESTIMATED_CLOSE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_55_ACTUAL_CLOSE',0,80),
    p_value=>SUBSTRB("SETOP_55_ACTUAL_CLOSE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_56_NOTES',0,80),
    p_value=>SUBSTRB("SETOP_56_NOTES$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_57_ACCOUNT_MANAGER_ID',0,80),
    p_value=>SUBSTRB("SETOP_57_ACCOUNT_MANAGER_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_58_STATUS',0,80),
    p_value=>SUBSTRB("SETOP_58_STATUS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_59_EO_NEXT_STEP',0,80),
    p_value=>SUBSTRB("SETOP_59_EO_NEXT_STEP$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_60_REASON',0,80),
    p_value=>SUBSTRB("SETOP_60_REASON$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_61_LEADSOURCE_ID',0,80),
    p_value=>SUBSTRB("SETOP_61_LEADSOURCE_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_62_SECCODE_ID',0,80),
    p_value=>SUBSTRB("SETOP_62_SECCODE_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_63_CREATE_USER',0,80),
    p_value=>SUBSTRB("SETOP_63_CREATE_USER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_64_SO_CREATEDATE',0,80),
    p_value=>SUBSTRB("SETOP_64_SO_CREATEDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_65_MODIFYUSER',0,80),
    p_value=>SUBSTRB("SETOP_65_MODIFYUSER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."OPPORTUNITY"',0,80),
    p_column=>SUBSTR('SETOP_66_SO_MODIFYDATE',0,80),
    p_value=>SUBSTRB("SETOP_66_SO_MODIFYDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "SETOP_ES$1";

---------------------------------------------------------------------------
-- Procedure "SETOP_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "SETOP_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 492: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "SETOP_ES$1"(p_error_index);
  END IF;
END "SETOP_ER$1";



---------------------------------------------------------------------------
-- Procedure "SETOP_SU$1" opens and initializes data source
-- for map "SETOP_t"
---------------------------------------------------------------------------
PROCEDURE "SETOP_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "SETOP_c$1"%ISOPEN) THEN
    OPEN "SETOP_c$1";
  END IF;
  get_read_success := TRUE;
END "SETOP_SU$1";

---------------------------------------------------------------------------
-- Procedure "SETOP_RD$1" fetches a bulk of rows from
--   the data source for map "SETOP_t"
---------------------------------------------------------------------------
PROCEDURE "SETOP_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "SETOP_46_OPPORTUNITY_ID$1".DELETE;
    "SETOP_47_ACCOUNT_ID$1".DELETE;
    "SETOP_48_DESCRIPTION$1".DELETE;
    "SETOP_49_CLOSED$1".DELETE;
    "SETOP_50_STAGE$1".DELETE;
    "SETOP_51_SALES_POTENTIAL$1".DELETE;
    "SETOP_52_CLOSE_PROBABILITY$1".DELETE;
    "SETOP_53_ACTUAL_AMOUNT$1".DELETE;
    "SETOP_54_ESTIMATED_CLOSE$1".DELETE;
    "SETOP_55_ACTUAL_CLOSE$1".DELETE;
    "SETOP_56_NOTES$1".DELETE;
    "SETOP_57_ACCOUNT_MANAGER_ID$1".DELETE;
    "SETOP_58_STATUS$1".DELETE;
    "SETOP_59_EO_NEXT_STEP$1".DELETE;
    "SETOP_60_REASON$1".DELETE;
    "SETOP_61_LEADSOURCE_ID$1".DELETE;
    "SETOP_62_SECCODE_ID$1".DELETE;
    "SETOP_63_CREATE_USER$1".DELETE;
    "SETOP_64_SO_CREATEDATE$1".DELETE;
    "SETOP_65_MODIFYUSER$1".DELETE;
    "SETOP_66_SO_MODIFYDATE$1".DELETE;

    FETCH
      "SETOP_c$1"
    BULK COLLECT INTO
      "SETOP_46_OPPORTUNITY_ID$1",
      "SETOP_47_ACCOUNT_ID$1",
      "SETOP_48_DESCRIPTION$1",
      "SETOP_49_CLOSED$1",
      "SETOP_50_STAGE$1",
      "SETOP_51_SALES_POTENTIAL$1",
      "SETOP_52_CLOSE_PROBABILITY$1",
      "SETOP_53_ACTUAL_AMOUNT$1",
      "SETOP_54_ESTIMATED_CLOSE$1",
      "SETOP_55_ACTUAL_CLOSE$1",
      "SETOP_56_NOTES$1",
      "SETOP_57_ACCOUNT_MANAGER_ID$1",
      "SETOP_58_STATUS$1",
      "SETOP_59_EO_NEXT_STEP$1",
      "SETOP_60_REASON$1",
      "SETOP_61_LEADSOURCE_ID$1",
      "SETOP_62_SECCODE_ID$1",
      "SETOP_63_CREATE_USER$1",
      "SETOP_64_SO_CREATEDATE$1",
      "SETOP_65_MODIFYUSER$1",
      "SETOP_66_SO_MODIFYDATE$1"
    LIMIT get_bulk_size;

    IF "SETOP_c$1"%NOTFOUND AND "SETOP_46_OPPORTUNITY_ID$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "SETOP_46_OPPORTUNITY_ID$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "SETOP_46_OPPORTUNITY_ID$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 493: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "SETOP_RD$1";

---------------------------------------------------------------------------
-- Procedure "SETOP_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "SETOP_DML$1"(si NUMBER, firstround BOOLEAN) IS
  "OPPORTUNITY_DIM_ins0" NUMBER := "OPPORTUNITY_DIM_ins";
  "OPPORTUNITY_DIM_upd0" NUMBER := "OPPORTUNITY_DIM_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "OPPORTUNITY_DIM_St" THEN
  -- Update/Insert DML for "OPPORTUNITY_DIM"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"OPPORTUNITY_DIM"';
    get_audit_detail_id := "OPPORTUNITY_DIM_id";
    "OPPORTUNITY_DIM_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "OPPORTUNITY_DIM_i" > get_bulk_size 
   OR "SETOP_c$1"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "OPPORTUNITY_DIM_si".."OPPORTUNITY_DIM_i" - 1 
            UPDATE
              "OPPORTUNITY_DIM"
            SET
  
  						"OPPORTUNITY_DIM"."ACCOUNT_ID" = "OPPORTUNITY_DIM_1_ACCOUNT_ID$1"
  (i),						"OPPORTUNITY_DIM"."DESCRIPTION" = "OPPORTUNITY_DIM_2_DESCRIPTI"
  (i),						"OPPORTUNITY_DIM"."CLOSED" = "OPPORTUNITY_DIM_3_CLOSED$1"
  (i),						"OPPORTUNITY_DIM"."STAGE" = "OPPORTUNITY_DIM_4_STAGE$1"
  (i),						"OPPORTUNITY_DIM"."SALES_POTENTIAL" = "OPPORTUN_5_SALES_PO$1"
  (i),						"OPPORTUNITY_DIM"."CLOSE_PROBABILITY" = "OPPORTUN_6_CLOSE_PR$1"
  (i),						"OPPORTUNITY_DIM"."ACTUAL_AMOUNT" = "OPPORTUN_7_ACTUAL_A$1"
  (i),						"OPPORTUNITY_DIM"."ESTIMATED_CLOSE" = "OPPORTUN_8_ESTIMATE$1"
  (i),						"OPPORTUNITY_DIM"."ACTUAL_CLOSE" = "OPPORTUN_9_ACTUAL_C$1"
  (i),						"OPPORTUNITY_DIM"."NOTES" = "OPPORTUNITY_DIM_10_NOTES$1"
  (i),						"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID" = "OPPORTUN_11_ACCOUNT_$1"
  (i),						"OPPORTUNITY_DIM"."STATUS" = "OPPORTUNITY_DIM_12_STATUS$1"
  (i),						"OPPORTUNITY_DIM"."NEXT_STEP" = "OPPORTUNITY_DIM_13_NEXT_STEP$1"
  (i),						"OPPORTUNITY_DIM"."REASON" = "OPPORTUNITY_DIM_14_REASON$1"
  (i),						"OPPORTUNITY_DIM"."LEADSOURCE_ID" = "OPPORTUN_15_LEADSOUR$1"
  (i),						"OPPORTUNITY_DIM"."SECCODE_ID" = "OPPORTUNITY_DIM_16_SECCODE_"
  (i),						"OPPORTUNITY_DIM"."CREATE_USER" = "OPPORTUNITY_DIM_17_CREATE_US"
  (i),						"OPPORTUNITY_DIM"."CREATION_DATE" = "OPPORTUN_18_CREATION$1"
  (i),						"OPPORTUNITY_DIM"."MODIFYUSER" = "OPPORTUNITY_DIM_19_MODIFYUS"
  (i),						"OPPORTUNITY_DIM"."LAST_UPDATE_DATE" = "OPPORTUN_20_LAST_UPD$1"
  (i),						"OPPORTUNITY_DIM"."GKDW_SOURCE" = "OPPORTUNITY_DIM_25_GKDW_SOUR"
  (i)
    
            WHERE
  
  						"OPPORTUNITY_DIM"."OPPORTUNITY_ID" = "OPPORTUN_0_OPPORTUN$1"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "OPPORTUNITY_DIM_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "OPPORTUNITY_DIM_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd" + get_rowid.COUNT;
          "OPPORTUNITY_DIM_si" := "OPPORTUNITY_DIM_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "OPPORTUNITY_DIM_si".."OPPORTUNITY_DIM_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "OPPORTUNITY_DIM_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "OPPORTUNITY_DIM_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "OPPORTUNITY_DIM"
                SET
  
  								"OPPORTUNITY_DIM"."ACCOUNT_ID" = "OPPORTUNITY_DIM_1_ACCOUNT_ID$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."DESCRIPTION" = "OPPORTUNITY_DIM_2_DESCRIPTI"
  (last_successful_index),								"OPPORTUNITY_DIM"."CLOSED" = "OPPORTUNITY_DIM_3_CLOSED$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."STAGE" = "OPPORTUNITY_DIM_4_STAGE$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."SALES_POTENTIAL" = "OPPORTUN_5_SALES_PO$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."CLOSE_PROBABILITY" = "OPPORTUN_6_CLOSE_PR$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACTUAL_AMOUNT" = "OPPORTUN_7_ACTUAL_A$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."ESTIMATED_CLOSE" = "OPPORTUN_8_ESTIMATE$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACTUAL_CLOSE" = "OPPORTUN_9_ACTUAL_C$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."NOTES" = "OPPORTUNITY_DIM_10_NOTES$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID" = "OPPORTUN_11_ACCOUNT_$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."STATUS" = "OPPORTUNITY_DIM_12_STATUS$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."NEXT_STEP" = "OPPORTUNITY_DIM_13_NEXT_STEP$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."REASON" = "OPPORTUNITY_DIM_14_REASON$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."LEADSOURCE_ID" = "OPPORTUN_15_LEADSOUR$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."SECCODE_ID" = "OPPORTUNITY_DIM_16_SECCODE_"
  (last_successful_index),								"OPPORTUNITY_DIM"."CREATE_USER" = "OPPORTUNITY_DIM_17_CREATE_US"
  (last_successful_index),								"OPPORTUNITY_DIM"."CREATION_DATE" = "OPPORTUN_18_CREATION$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."MODIFYUSER" = "OPPORTUNITY_DIM_19_MODIFYUS"
  (last_successful_index),								"OPPORTUNITY_DIM"."LAST_UPDATE_DATE" = "OPPORTUN_20_LAST_UPD$1"
  (last_successful_index),								"OPPORTUNITY_DIM"."GKDW_SOURCE" = "OPPORTUNITY_DIM_25_GKDW_SOUR"
  (last_successful_index)
  
                WHERE
  
  								"OPPORTUNITY_DIM"."OPPORTUNITY_ID" = "OPPORTUN_0_OPPORTUN$1"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "OPPORTUNITY_DIM_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_1_ACCOUNT_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."DESCRIPTION"',0,80),SUBSTRB("OPPORTUNITY_DIM_2_DESCRIPTI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSED"',0,80),SUBSTRB("OPPORTUNITY_DIM_3_CLOSED$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STAGE"',0,80),SUBSTRB("OPPORTUNITY_DIM_4_STAGE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SALES_POTENTIAL"',0,80),SUBSTRB("OPPORTUN_5_SALES_PO$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSE_PROBABILITY"',0,80),SUBSTRB("OPPORTUN_6_CLOSE_PR$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_AMOUNT"',0,80),SUBSTRB("OPPORTUN_7_ACTUAL_A$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ESTIMATED_CLOSE"',0,80),SUBSTRB("OPPORTUN_8_ESTIMATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_CLOSE"',0,80),SUBSTRB("OPPORTUN_9_ACTUAL_C$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NOTES"',0,80),SUBSTRB("OPPORTUNITY_DIM_10_NOTES$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID"',0,80),SUBSTRB("OPPORTUN_11_ACCOUNT_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STATUS"',0,80),SUBSTRB("OPPORTUNITY_DIM_12_STATUS$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NEXT_STEP"',0,80),SUBSTRB("OPPORTUNITY_DIM_13_NEXT_STEP$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."REASON"',0,80),SUBSTRB("OPPORTUNITY_DIM_14_REASON$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LEADSOURCE_ID"',0,80),SUBSTRB("OPPORTUN_15_LEADSOUR$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SECCODE_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_16_SECCODE_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATE_USER"',0,80),SUBSTRB("OPPORTUNITY_DIM_17_CREATE_US"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATION_DATE"',0,80),SUBSTRB("OPPORTUN_18_CREATION$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."MODIFYUSER"',0,80),SUBSTRB("OPPORTUNITY_DIM_19_MODIFYUS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("OPPORTUN_20_LAST_UPD$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("OPPORTUNITY_DIM_25_GKDW_SOUR"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
                
                IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "OPPORTUNITY_DIM_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "OPPORTUNITY_DIM_si" >= "OPPORTUNITY_DIM_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "OPPORTUNITY_DIM_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"OPPORTUN_0_OPPORTUN$1"(insert_bulk_index) := "OPPORTUN_0_OPPORTUN$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_1_ACCOUNT_ID$1"(insert_bulk_index) := "OPPORTUNITY_DIM_1_ACCOUNT_ID$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_2_DESCRIPTI"(insert_bulk_index) := "OPPORTUNITY_DIM_2_DESCRIPTI"(update_bulk(j));
  		"OPPORTUNITY_DIM_3_CLOSED$1"(insert_bulk_index) := "OPPORTUNITY_DIM_3_CLOSED$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_4_STAGE$1"(insert_bulk_index) := "OPPORTUNITY_DIM_4_STAGE$1"(update_bulk(j));
  		"OPPORTUN_5_SALES_PO$1"(insert_bulk_index) := "OPPORTUN_5_SALES_PO$1"(update_bulk(j));
  		"OPPORTUN_6_CLOSE_PR$1"(insert_bulk_index) := "OPPORTUN_6_CLOSE_PR$1"(update_bulk(j));
  		"OPPORTUN_7_ACTUAL_A$1"(insert_bulk_index) := "OPPORTUN_7_ACTUAL_A$1"(update_bulk(j));
  		"OPPORTUN_8_ESTIMATE$1"(insert_bulk_index) := "OPPORTUN_8_ESTIMATE$1"(update_bulk(j));
  		"OPPORTUN_9_ACTUAL_C$1"(insert_bulk_index) := "OPPORTUN_9_ACTUAL_C$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_10_NOTES$1"(insert_bulk_index) := "OPPORTUNITY_DIM_10_NOTES$1"(update_bulk(j));
  		"OPPORTUN_11_ACCOUNT_$1"(insert_bulk_index) := "OPPORTUN_11_ACCOUNT_$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_12_STATUS$1"(insert_bulk_index) := "OPPORTUNITY_DIM_12_STATUS$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_13_NEXT_STEP$1"(insert_bulk_index) := "OPPORTUNITY_DIM_13_NEXT_STEP$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_14_REASON$1"(insert_bulk_index) := "OPPORTUNITY_DIM_14_REASON$1"(update_bulk(j));
  		"OPPORTUN_15_LEADSOUR$1"(insert_bulk_index) := "OPPORTUN_15_LEADSOUR$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_16_SECCODE_"(insert_bulk_index) := "OPPORTUNITY_DIM_16_SECCODE_"(update_bulk(j));
  		"OPPORTUNITY_DIM_17_CREATE_US"(insert_bulk_index) := "OPPORTUNITY_DIM_17_CREATE_US"(update_bulk(j));
  		"OPPORTUN_18_CREATION$1"(insert_bulk_index) := "OPPORTUN_18_CREATION$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_19_MODIFYUS"(insert_bulk_index) := "OPPORTUNITY_DIM_19_MODIFYUS"(update_bulk(j));
  		"OPPORTUN_20_LAST_UPD$1"(insert_bulk_index) := "OPPORTUN_20_LAST_UPD$1"(update_bulk(j));
  		"OPPORTUNITY_DIM_25_GKDW_SOUR"(insert_bulk_index) := "OPPORTUNITY_DIM_25_GKDW_SOUR"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "OPPORTUNITY_DIM_srk"(insert_bulk_index) := "OPPORTUNITY_DIM_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "OPPORTUNITY_DIM_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "OPPORTUNITY_DIM_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "OPPORTUNITY_DIM_si"..insert_bulk_index
          INSERT INTO
            "OPPORTUNITY_DIM"
            ("OPPORTUNITY_DIM"."OPPORTUNITY_ID",
            "OPPORTUNITY_DIM"."ACCOUNT_ID",
            "OPPORTUNITY_DIM"."DESCRIPTION",
            "OPPORTUNITY_DIM"."CLOSED",
            "OPPORTUNITY_DIM"."STAGE",
            "OPPORTUNITY_DIM"."SALES_POTENTIAL",
            "OPPORTUNITY_DIM"."CLOSE_PROBABILITY",
            "OPPORTUNITY_DIM"."ACTUAL_AMOUNT",
            "OPPORTUNITY_DIM"."ESTIMATED_CLOSE",
            "OPPORTUNITY_DIM"."ACTUAL_CLOSE",
            "OPPORTUNITY_DIM"."NOTES",
            "OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID",
            "OPPORTUNITY_DIM"."STATUS",
            "OPPORTUNITY_DIM"."NEXT_STEP",
            "OPPORTUNITY_DIM"."REASON",
            "OPPORTUNITY_DIM"."LEADSOURCE_ID",
            "OPPORTUNITY_DIM"."SECCODE_ID",
            "OPPORTUNITY_DIM"."CREATE_USER",
            "OPPORTUNITY_DIM"."CREATION_DATE",
            "OPPORTUNITY_DIM"."MODIFYUSER",
            "OPPORTUNITY_DIM"."LAST_UPDATE_DATE",
            "OPPORTUNITY_DIM"."GKDW_SOURCE")
          VALUES
            ("OPPORTUN_0_OPPORTUN$1"(i),
            "OPPORTUNITY_DIM_1_ACCOUNT_ID$1"(i),
            "OPPORTUNITY_DIM_2_DESCRIPTI"(i),
            "OPPORTUNITY_DIM_3_CLOSED$1"(i),
            "OPPORTUNITY_DIM_4_STAGE$1"(i),
            "OPPORTUN_5_SALES_PO$1"(i),
            "OPPORTUN_6_CLOSE_PR$1"(i),
            "OPPORTUN_7_ACTUAL_A$1"(i),
            "OPPORTUN_8_ESTIMATE$1"(i),
            "OPPORTUN_9_ACTUAL_C$1"(i),
            "OPPORTUNITY_DIM_10_NOTES$1"(i),
            "OPPORTUN_11_ACCOUNT_$1"(i),
            "OPPORTUNITY_DIM_12_STATUS$1"(i),
            "OPPORTUNITY_DIM_13_NEXT_STEP$1"(i),
            "OPPORTUNITY_DIM_14_REASON$1"(i),
            "OPPORTUN_15_LEADSOUR$1"(i),
            "OPPORTUNITY_DIM_16_SECCODE_"(i),
            "OPPORTUNITY_DIM_17_CREATE_US"(i),
            "OPPORTUN_18_CREATION$1"(i),
            "OPPORTUNITY_DIM_19_MODIFYUS"(i),
            "OPPORTUN_20_LAST_UPD$1"(i),
            "OPPORTUNITY_DIM_25_GKDW_SOUR"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "OPPORTUNITY_DIM_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "OPPORTUNITY_DIM_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "OPPORTUNITY_DIM_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 494: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("OPPORTUN_0_OPPORTUN$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_1_ACCOUNT_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."DESCRIPTION"',0,80),SUBSTRB("OPPORTUNITY_DIM_2_DESCRIPTI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSED"',0,80),SUBSTRB("OPPORTUNITY_DIM_3_CLOSED$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STAGE"',0,80),SUBSTRB("OPPORTUNITY_DIM_4_STAGE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SALES_POTENTIAL"',0,80),SUBSTRB("OPPORTUN_5_SALES_PO$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CLOSE_PROBABILITY"',0,80),SUBSTRB("OPPORTUN_6_CLOSE_PR$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_AMOUNT"',0,80),SUBSTRB("OPPORTUN_7_ACTUAL_A$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ESTIMATED_CLOSE"',0,80),SUBSTRB("OPPORTUN_8_ESTIMATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACTUAL_CLOSE"',0,80),SUBSTRB("OPPORTUN_9_ACTUAL_C$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NOTES"',0,80),SUBSTRB("OPPORTUNITY_DIM_10_NOTES$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."ACCOUNT_MANAGER_ID"',0,80),SUBSTRB("OPPORTUN_11_ACCOUNT_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."STATUS"',0,80),SUBSTRB("OPPORTUNITY_DIM_12_STATUS$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."NEXT_STEP"',0,80),SUBSTRB("OPPORTUNITY_DIM_13_NEXT_STEP$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."REASON"',0,80),SUBSTRB("OPPORTUNITY_DIM_14_REASON$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LEADSOURCE_ID"',0,80),SUBSTRB("OPPORTUN_15_LEADSOUR$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."SECCODE_ID"',0,80),SUBSTRB("OPPORTUNITY_DIM_16_SECCODE_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATE_USER"',0,80),SUBSTRB("OPPORTUNITY_DIM_17_CREATE_US"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."CREATION_DATE"',0,80),SUBSTRB("OPPORTUN_18_CREATION$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."MODIFYUSER"',0,80),SUBSTRB("OPPORTUNITY_DIM_19_MODIFYUS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("OPPORTUN_20_LAST_UPD$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"OPPORTUNITY_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("OPPORTUNITY_DIM_25_GKDW_SOUR"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
          
          IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "OPPORTUNITY_DIM_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "OPPORTUNITY_DIM_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "OPPORTUNITY_DIM_ins" := "OPPORTUNITY_DIM_ins" + get_rowid.COUNT;
      "OPPORTUNITY_DIM_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "OPPORTUNITY_DIM_ins" := "OPPORTUNITY_DIM_ins0"; 
    "OPPORTUNITY_DIM_upd" := "OPPORTUNITY_DIM_upd0";
  END IF;

END "SETOP_DML$1";

---------------------------------------------------------------------------
-- "SETOP_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "OPPORTUNITY_DIM_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "SETOP_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "OPPORTUNITY_DIM_St" THEN
          "OPPORTUNITY_DIM_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"OPPORTUNITY_DIM"',
              p_target_uoid=>'A41FFB19D7015678E040007F01006C7D',
              p_stm=>'TRACE 496',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "OPPORTUNITY_DIM_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D4245678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
              p_parent_object_name=>'OPPORTUNITY_DIM',
              p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY_DIM',
              p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D7005678E040007F01006C7D', -- Operator OPPORTUNITY
              p_parent_object_name=>'OPPORTUNITY',
              p_parent_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY',
              p_object_uoid=>'A41FFB1909565678E040007F01006C7D', -- Table OPPORTUNITY
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19D7015678E040007F01006C7D', -- Operator OPPORTUNITY_DIM
              p_parent_object_name=>'OPPORTUNITY_DIM',
              p_parent_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'OPPORTUNITY_DIM',
              p_object_uoid=>'A41FA16DB042655CE040007F01006B9E', -- Table OPPORTUNITY_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "SETOP_si$1" := 0;
    "OPPORTUNITY_DIM_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "SETOP_SU$1";

      LOOP
        IF "SETOP_si$1" = 0 THEN
          "SETOP_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "SETOP_46_OPPORTUNITY_ID$1".COUNT - 1;
          ELSE
            bulk_count := "SETOP_46_OPPORTUNITY_ID$1".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "OPPORTUNITY_DIM_ir".DELETE;
"OPPORTUNITY_DIM_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "SETOP_i$1" := "SETOP_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "OPPORTUNITY_DIM_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "SETOP_i$1" := "SETOP_i$1" + 1;
            "SETOP_si$1" := "SETOP_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "OPPORTUNITY_DIM_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("SETOP_c$1"%NOTFOUND AND
               "SETOP_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "SETOP_i$1" > bulk_count THEN
            
              "SETOP_si$1" := 0;
              EXIT;
            END IF;


            
get_target_name := '"OPPORTUNITY_DIM"';
            get_audit_detail_id := "OPPORTUNITY_DIM_id";
            IF NOT "OPPORTUNITY_DIM_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"OPPORTUN_0_OPPORTUN$1"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_46_OPPORTUNITY_ID$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_0_OPPORTUN$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_46_OPPORTUNITY_ID$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_0_OPPORTUN$1"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_46_OPPORTUNITY_ID$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_0_OPPORTUN$1" :=
            
            RTRIM("SETOP_46_OPPORTUNITY_ID$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_1_ACCOUNT_ID$1"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_47_ACCOUNT_ID$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_1_ACCOUNT_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_47_ACCOUNT_ID$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_1_ACCOUNT_ID$1"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_47_ACCOUNT_ID$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_1_ACCOUN" :=
            
            RTRIM("SETOP_47_ACCOUNT_ID$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_2_DESCRIPTI"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_48_DESCRIPTION$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_2_DESCRIPTI"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_48_DESCRIPTION$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_2_DESCRIPTI"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_48_DESCRIPTION$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_2_DESCRIP" :=
            
            "SETOP_48_DESCRIPTION$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_3_CLOSED$1"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_49_CLOSED$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_3_CLOSED$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_49_CLOSED$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_3_CLOSED$1"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_49_CLOSED$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_3_CLOSED$1" :=
            
            RTRIM("SETOP_49_CLOSED$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_4_STAGE$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_50_STAGE$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_4_STAGE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_50_STAGE$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_4_STAGE$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_50_STAGE$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_4_STAGE$1" :=
            
            "SETOP_50_STAGE$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_5_SALES_PO$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_51_SALES_POTENTIAL$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_5_SALES_PO$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_51_SALES_POTENTIAL$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_5_SALES_PO$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_51_SALES_POTENTIAL$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_5_SALES_PO$1" :=
            
            "SETOP_51_SALES_POTENTIAL$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_6_CLOSE_PR$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_52_CLOSE_PROBABILITY$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_6_CLOSE_PR$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_52_CLOSE_PROBABILITY$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_6_CLOSE_PR$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_52_CLOSE_PROBABILITY$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_6_CLOSE_PR$1" :=
            
            "SETOP_52_CLOSE_PROBABILITY$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_7_ACTUAL_A$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_53_ACTUAL_AMOUNT$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_7_ACTUAL_A$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_53_ACTUAL_AMOUNT$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_7_ACTUAL_A$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_53_ACTUAL_AMOUNT$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_7_ACTUAL_A$1" :=
            
            "SETOP_53_ACTUAL_AMOUNT$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_8_ESTIMATE$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_54_ESTIMATED_CLOSE$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_8_ESTIMATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_54_ESTIMATED_CLOSE$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_8_ESTIMATE$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_54_ESTIMATED_CLOSE$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_8_ESTIMATE$1" :=
            
            "SETOP_54_ESTIMATED_CLOSE$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_9_ACTUAL_C$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_55_ACTUAL_CLOSE$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_9_ACTUAL_C$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_55_ACTUAL_CLOSE$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_9_ACTUAL_C$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_55_ACTUAL_CLOSE$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_9_ACTUAL_C$1" :=
            
            "SETOP_55_ACTUAL_CLOSE$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_10_NOTES$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_56_NOTES$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_10_NOTES$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_56_NOTES$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_10_NOTES$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_56_NOTES$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_10_NOTES$1" :=
            
            "SETOP_56_NOTES$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_11_ACCOUNT_$1"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_11_ACCOUNT_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_57_ACCOUNT_MANAGER_ID$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_11_ACCOUNT_$1"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_11_ACCOUNT_$1" :=
            
            RTRIM("SETOP_57_ACCOUNT_MANAGER_ID$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_12_STATUS$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_58_STATUS$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_12_STATUS$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_58_STATUS$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_12_STATUS$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_58_STATUS$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_12_STATUS$1" :=
            
            "SETOP_58_STATUS$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_13_NEXT_STEP$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_59_EO_NEXT_STEP$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_13_NEXT_STEP$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_59_EO_NEXT_STEP$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_13_NEXT_STEP$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_59_EO_NEXT_STEP$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_13_NEXT_" :=
            
            "SETOP_59_EO_NEXT_STEP$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_14_REASON$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_60_REASON$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_14_REASON$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_60_REASON$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_14_REASON$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_60_REASON$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_14_REASON$1" :=
            
            "SETOP_60_REASON$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_15_LEADSOUR$1"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_61_LEADSOURCE_ID$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUN_15_LEADSOUR$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_61_LEADSOURCE_ID$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_15_LEADSOUR$1"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_61_LEADSOURCE_ID$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_15_LEADSOUR$1" :=
            
            RTRIM("SETOP_61_LEADSOURCE_ID$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_16_SECCODE_"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_62_SECCODE_ID$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_16_SECCODE_"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_62_SECCODE_ID$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_16_SECCODE_"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_62_SECCODE_ID$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_16_SECCOD" :=
            
            RTRIM("SETOP_62_SECCODE_ID$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_17_CREATE_US"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_63_CREATE_USER$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_17_CREATE_US"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_63_CREATE_USER$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_17_CREATE_US"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_63_CREATE_USER$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_17_CREAT" :=
            
            RTRIM("SETOP_63_CREATE_USER$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_18_CREATION$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_64_SO_CREATEDATE$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_18_CREATION$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_64_SO_CREATEDATE$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_18_CREATION$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_64_SO_CREATEDATE$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_18_CREATION$1" :=
            
            "SETOP_64_SO_CREATEDATE$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_19_MODIFYUS"("OPPORTUNITY_DIM_i") := 
            
            RTRIM("SETOP_65_MODIFYUSER$1"("SETOP_i$1"));',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_19_MODIFYUS"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("SETOP_65_MODIFYUSER$1"("SETOP_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_19_MODIFYUS"("OPPORTUNITY_DIM_i") :=
            
            RTRIM("SETOP_65_MODIFYUSER$1"("SETOP_i$1"));
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_19_MODIFY" :=
            
            RTRIM("SETOP_65_MODIFYUSER$1"("SETOP_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUN_20_LAST_UPD$1"("OPPORTUNITY_DIM_i") := 
            
            "SETOP_66_SO_MODIFYDATE$1"("SETOP_i$1");',0,2000);
            error_column := SUBSTRB('"OPPORTUN_20_LAST_UPD$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("SETOP_66_SO_MODIFYDATE$1"("SETOP_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUN_20_LAST_UPD$1"("OPPORTUNITY_DIM_i") :=
            
            "SETOP_66_SO_MODIFYDATE$1"("SETOP_i$1");
            
            ELSIF get_row_status THEN
              "SV_OPPORTUN_20_LAST_UPD$1" :=
            
            "SETOP_66_SO_MODIFYDATE$1"("SETOP_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"OPPORTUNITY_DIM_25_GKDW_SOUR"("OPPORTUNITY_DIM_i") := 
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";',0,2000);
            error_column := SUBSTRB('"OPPORTUNITY_DIM_25_GKDW_SOUR"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "OPPORTUNITY_DIM_25_GKDW_SOUR"("OPPORTUNITY_DIM_i") :=
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_OPPORTUNITY_DIM_25_GKDW_" :=
            
            "OWB_OPPORTUNITY_DIM"."GET_CONST_1_GKDW_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "OPPORTUNITY_DIM_srk"("OPPORTUNITY_DIM_i") := get_rowkey + "SETOP_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_OPPORTUNITY_DIM_srk" := get_rowkey + "SETOP_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "OPPORTUNITY_DIM_new" := TRUE;
                ELSE
                  "OPPORTUNITY_DIM_i" := "OPPORTUNITY_DIM_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "SETOP_ER$1"('TRACE 497: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "SETOP_i$1");
                  
                  "OPPORTUNITY_DIM_err" := "OPPORTUNITY_DIM_err" + 1;
                  
                  IF get_errors + "OPPORTUNITY_DIM_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("OPPORTUNITY_DIM_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "OPPORTUNITY_DIM_new" 
            AND (NOT "OPPORTUNITY_DIM_nul") THEN
              "OPPORTUNITY_DIM_ir"(dml_bsize) := "OPPORTUNITY_DIM_i";
            	"OPPORTUN_0_OPPORTUN$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_0_OPPORTUN$1";
            	"OPPORTUNITY_DIM_1_ACCOUNT_ID$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_1_ACCOUN";
            	"OPPORTUNITY_DIM_2_DESCRIPTI"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_2_DESCRIP";
            	"OPPORTUNITY_DIM_3_CLOSED$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_3_CLOSED$1";
            	"OPPORTUNITY_DIM_4_STAGE$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_4_STAGE$1";
            	"OPPORTUN_5_SALES_PO$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_5_SALES_PO$1";
            	"OPPORTUN_6_CLOSE_PR$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_6_CLOSE_PR$1";
            	"OPPORTUN_7_ACTUAL_A$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_7_ACTUAL_A$1";
            	"OPPORTUN_8_ESTIMATE$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_8_ESTIMATE$1";
            	"OPPORTUN_9_ACTUAL_C$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_9_ACTUAL_C$1";
            	"OPPORTUNITY_DIM_10_NOTES$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_10_NOTES$1";
            	"OPPORTUN_11_ACCOUNT_$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_11_ACCOUNT_$1";
            	"OPPORTUNITY_DIM_12_STATUS$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_12_STATUS$1";
            	"OPPORTUNITY_DIM_13_NEXT_STEP$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_13_NEXT_";
            	"OPPORTUNITY_DIM_14_REASON$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_14_REASON$1";
            	"OPPORTUN_15_LEADSOUR$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_15_LEADSOUR$1";
            	"OPPORTUNITY_DIM_16_SECCODE_"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_16_SECCOD";
            	"OPPORTUNITY_DIM_17_CREATE_US"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_17_CREAT";
            	"OPPORTUN_18_CREATION$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_18_CREATION$1";
            	"OPPORTUNITY_DIM_19_MODIFYUS"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_19_MODIFY";
            	"OPPORTUN_20_LAST_UPD$1"("OPPORTUNITY_DIM_i") := "SV_OPPORTUN_20_LAST_UPD$1";
            	"OPPORTUNITY_DIM_25_GKDW_SOUR"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_25_GKDW_";
              "OPPORTUNITY_DIM_srk"("OPPORTUNITY_DIM_i") := "SV_OPPORTUNITY_DIM_srk";
              "OPPORTUNITY_DIM_i" := "OPPORTUNITY_DIM_i" + 1;
            ELSE
              "OPPORTUNITY_DIM_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "SETOP_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "SETOP_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "SETOP_ER$1"('TRACE 495: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "SETOP_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "SETOP_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "SETOP_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "SETOP_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "SETOP_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "OPPORTUNITY_DIM_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"OPPORTUNITY_DIM_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"OPPORTUNITY_DIM_ins",
        p_upd=>"OPPORTUNITY_DIM_upd",
        p_del=>"OPPORTUNITY_DIM_del",
        p_err=>"OPPORTUNITY_DIM_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "OPPORTUNITY_DIM_ins";
    get_updated  := get_updated  + "OPPORTUNITY_DIM_upd";
    get_deleted  := get_deleted  + "OPPORTUNITY_DIM_del";
    get_errors   := get_errors   + "OPPORTUNITY_DIM_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "SETOP_t";







PROCEDURE Initialize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  get_selected := 0;
  get_inserted := 0;
  get_updated  := 0;
  get_deleted  := 0;
  get_merged   := 0;
  get_errors   := 0;
  get_logical_errors := 0;
  get_abort    := FALSE;
  get_abort_procedure  := FALSE;

  FOR i IN 1..p_env.COUNT LOOP
    IF p_env(i).param_value IS NOT NULL THEN
      IF p_env(i).param_name = 'MAX_NO_OF_ERRORS' THEN
        get_max_errors := p_env(i).param_value;

      ELSIF p_env(i).param_name = 'COMMIT_FREQUENCY' THEN
        get_commit_frequency := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OPERATING_MODE' THEN
        get_operating_mode := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'BULK_SIZE' THEN
        get_bulk_size := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_LEVEL' THEN
        get_audit_level := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_ID' THEN
        get_audit_id := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'PURGE_GROUP' THEN
        get_purge_group := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OBJECT_ID' THEN
        OWB$MAP_OBJECT_ID := p_env(i).param_value;
      END IF;
    END IF;
  END LOOP;




  IF NOT (get_audit_level = AUDIT_NONE) THEN
    get_runtime_audit_id := WB_RT_MAPAUDIT.audit_begin(  -- Template AuditBegin
      p_auditid=>get_audit_id,
      p_lob_uoid=>get_lob_uoid,
      p_lob_name=>get_model_name,
      p_purge_group=>get_purge_group,
      p_parent=>NULL,
      p_source=>'"SLXDW"."OPPORTUNITY"',
      p_source_uoid=>'*',
      p_target=>'"OPPORTUNITY_DIM"',
      p_target_uoid=>'A41FFB19D7015678E040007F01006C7D',      p_info=>NULL,
      
            p_type=>'PLSQLMap',
      
      p_date=>get_cycle_date
    );
  END IF;



BEGIN
  -- Expression statement
      error_stmt := SUBSTRB('
  
      
      GET_MAX_DATE("OWB_OPPORTUNITY_DIM"."GET_CONST_0_TABLE_NAME","OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT","OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT");
  
  ',0,2000);
  
      
      GET_MAX_DATE("OWB_OPPORTUNITY_DIM"."GET_CONST_0_TABLE_NAME","OWB_OPPORTUNITY_DIM"."PREMAPPING_1_CREATE_DATE_OUT","OWB_OPPORTUNITY_DIM"."PREMAPPING_2_MODIFY_DATE_OUT");
  
    -- End expression statement
  
  
EXCEPTION WHEN OTHERS THEN
  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_rtd=>NULL,
      p_rowkey=>0,
      p_table=>NULL,
      p_column=>NULL,
      p_dstval=>NULL,
      p_stm=>'PRE_MAP_TRIGGER',
      p_sqlerr=>SQLCODE,
      p_sqlerrm=>SQLERRM,
      p_rowid=>NULL
    );
  END IF;
  get_errors := get_errors + 1;
  get_abort  := TRUE;
  get_trigger_success := FALSE;
END;
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.1
  END IF;
END Initialize;

PROCEDURE Analyze_Targets IS
BEGIN
  FOR i IN 1..tables_to_analyze.COUNT LOOP
    WB_RT_MAPAUDIT_UTIL_INVOKER.gather_table_stats(
      p_ownname          => tables_to_analyze(i).ownname,
      p_tabname          => tables_to_analyze(i).tabname,
      p_estimate_percent => tables_to_analyze(i).estimate_percent,
      p_granularity      => tables_to_analyze(i).granularity,
      p_cascade          => tables_to_analyze(i).cascade,
      p_degree           => tables_to_analyze(i).degree);
  END LOOP;
END Analyze_Targets;


PROCEDURE Finalize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.13
  END IF;


  IF get_abort THEN
    get_status := 1;
  ELSIF get_errors > 0 THEN
    get_status := 2;
  ELSE
    get_status := 0;
  END IF;
  get_processed := get_inserted + get_deleted + get_updated + get_merged; 
  IF (get_errors = 0) THEN
    get_error_ratio := 0;
  ELSE
    get_error_ratio := (get_errors /(get_errors + get_processed)) * 100;
  END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
  IF get_status = 0 THEN
    WB_RT_MAPAUDIT.audit_end(
      p_rta=>get_runtime_audit_id,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  ELSE
    WB_RT_MAPAUDIT.audit_fail(
      p_rta=>get_runtime_audit_id,
      p_status=>get_status,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  END IF;
END IF;


  Analyze_Targets;
END Finalize;



FUNCTION Main(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN

  IF WB_RT_MAPAUDIT_UTIL.supportsDesignClient(p_designVersion=>'10.2.0.1.31', p_minRuntimeVersion=>'10.2.0.1.0') < 1 THEN
    raise_application_error(-20103, 'Incompatible runtime and design client versions.');
  END IF;
  Initialize(p_env);
  
  
  
  
  
  -- Initialize all batch status variables
  "OPPORTUNITY_DIM_St" := FALSE;
  IF get_trigger_success THEN

  --  Processing for different operating modes
  IF get_operating_mode = MODE_SET THEN
    IF get_use_hc AND NOT get_no_commit THEN
      IF get_enable_parallel_dml THEN
        EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
      ELSE
        EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
      END IF;
    END IF;
		
    IF NOT get_use_hc OR get_batch_status THEN
      "OPPORTUNITY_DIM_St" := "OPPORTUNITY_DIM_Bat";
      get_batch_status := get_batch_status AND "OPPORTUNITY_DIM_St";
    END IF;

    IF get_use_hc THEN
      IF NOT get_batch_status THEN
        get_inserted := 0;
        get_updated  := 0;
        get_deleted  := 0;
        get_merged   := 0;
        get_logical_errors := 0;
      END IF;
    END IF;

  END IF;
  IF get_operating_mode = MODE_ROW THEN
		"SETOP_p";
  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW THEN
		
    IF get_batch_status THEN
      IF NOT get_use_hc OR get_batch_status THEN
        "OPPORTUNITY_DIM_St" := "OPPORTUNITY_DIM_Bat";
        get_batch_status := get_batch_status AND "OPPORTUNITY_DIM_St";
      END IF;
    END IF;
    IF get_use_hc THEN
      IF NOT get_batch_status AND get_use_hc THEN
        get_inserted := 0;
        get_updated  := 0;
        get_deleted  := 0;
        get_merged   := 0;
        get_logical_errors := 0;
"OPPORTUNITY_DIM_St" := FALSE;

      END IF;
    END IF;

"SETOP_p";

  END IF;
  IF get_operating_mode = MODE_ROW_TARGET THEN
"SETOP_t";

  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW_TARGET THEN
		
    IF get_batch_status THEN
      IF NOT get_use_hc OR get_batch_status THEN
        "OPPORTUNITY_DIM_St" := "OPPORTUNITY_DIM_Bat";
        get_batch_status := get_batch_status AND "OPPORTUNITY_DIM_St";
      END IF;
    END IF;
    IF NOT get_batch_status AND get_use_hc THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
"OPPORTUNITY_DIM_St" := FALSE;

    END IF;
"SETOP_t";

  END IF;
END IF;

  Finalize(p_env);
  RETURN get_status;
  END;

FUNCTION encode_operating_mode(p_operating_mode IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_operating_mode IS NULL THEN
    RETURN get_operating_mode;
  END IF;
  IF p_operating_mode = 'SET_BASED' THEN
    RETURN MODE_SET;
  ELSIF p_operating_mode = 'ROW_BASED' THEN
    RETURN MODE_ROW;
  ELSIF p_operating_mode = 'ROW_BASED_TARGET_ONLY' THEN
    RETURN MODE_ROW_TARGET;
  ELSIF p_operating_mode = 'SET_BASED_FAIL_OVER_TO_ROW_BASED' THEN
    RETURN MODE_SET_FAILOVER_ROW;
  ELSE
    RETURN MODE_SET_FAILOVER_ROW_TARGET;
  END IF;
END encode_operating_mode;

FUNCTION encode_audit_level(p_audit_level IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_audit_level IS NULL THEN
    RETURN get_audit_level;
  END IF;
  IF p_audit_level = 'NONE' THEN
    RETURN AUDIT_NONE;
  ELSIF p_audit_level = 'STATISTICS' THEN
    RETURN AUDIT_STATISTICS;
  ELSIF p_audit_level = 'ERROR_DETAILS' THEN
    RETURN AUDIT_ERROR_DETAILS;
  ELSE
    RETURN AUDIT_COMPLETE;
  END IF;
END encode_audit_level;


PROCEDURE Main(p_status OUT VARCHAR2,
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL) IS

  x_schema      VARCHAR2(30);

  x_audit_id    NUMBER;
  x_object_id   NUMBER;

  x_env         wb_rt_mapaudit.wb_rt_name_values;
  x_param       wb_rt_mapaudit.wb_rt_name_value;

  x_result      NUMBER;
  x_return_code NUMBER;

BEGIN
  -- validate parameters

  IF NOT wb_rt_mapaudit_util.validate_runtime_parameter('MAX_NO_OF_ERRORS',
                                                        p_max_no_of_errors) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('COMMIT_FREQUENCY',
                                                        p_commit_frequency) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('OPERATING_MODE',
                                                        p_operating_mode)   OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('BULK_SIZE',
                                                        p_bulk_size)        OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('AUDIT_LEVEL',
                                                        p_audit_level) THEN
    p_status := 'FAILURE';
    RETURN;
  END IF;

  -- perform pre-run setup

  SELECT ao.owner INTO x_schema
  FROM   user_objects uo, all_objects ao
  WHERE  uo.object_type = 'PACKAGE'
  AND    uo.object_name = 'OWB_OPPORTUNITY_DIM'
  AND    uo.object_id = ao.object_id;

  wb_rt_mapaudit_util.premap('OWB_OPPORTUNITY_DIM', x_schema, x_audit_id, x_object_id);

  -- prepare parameters for Main:

  x_param.param_name := 'AUDIT_ID';
  x_param.param_value := x_audit_id;
  x_env(1) := x_param;

  x_param.param_name := 'OBJECT_ID';
  x_param.param_value := x_object_id;
  x_env(2) := x_param;

  x_param.param_name := 'MAX_NO_OF_ERRORS';
  x_param.param_value := p_max_no_of_errors;
  x_env(3) := x_param;

  x_param.param_name := 'COMMIT_FREQUENCY';
  x_param.param_value := p_commit_frequency;
  x_env(4) := x_param;

  x_param.param_name := 'OPERATING_MODE';
  x_param.param_value := encode_operating_mode(p_operating_mode);
  x_env(5) := x_param;

  x_param.param_name := 'BULK_SIZE';
  x_param.param_value := p_bulk_size;
  x_env(6) := x_param;

  x_param.param_name := 'AUDIT_LEVEL';
  x_param.param_value := encode_audit_level(p_audit_level);
  x_env(7) := x_param;

  x_param.param_name := 'PURGE_GROUP';
  x_param.param_value := p_purge_group;
  x_env(8) := x_param;

  -- register "system" parameters:
  FOR i IN 3..8 LOOP
    IF x_env(i).param_value IS NOT NULL THEN
      wb_rt_mapaudit_util.register_sys_param(x_audit_id,
                                             x_env(i).param_name,
                                             x_env(i).param_value);
    END IF;
  END LOOP;

  -- really run it:
  -- return code from mapping is
  --   0 - success
  --   1 - failure
  --   2 - completed (with errors/warnings)
  x_return_code := NULL;
  BEGIN
    x_result := Main(x_env);
  EXCEPTION
    WHEN OTHERS THEN
      x_result := 1;
      x_return_code := SQLCODE;
  END;

  -- perform post map cleanup

  wb_rt_mapaudit_util.postmap(x_audit_id, x_result, x_return_code);

  -- show results:
  wb_rt_mapaudit_util.show_run_results(x_audit_id);

  -- set return status
  IF x_result = 0 THEN
    p_status := 'OK';
  ELSIF x_result = 1 THEN
    p_status := 'FAILURE';
  ELSE
    p_status := 'OK_WITH_WARNINGS';
  END IF;

END Main;

PROCEDURE Close_Cursors IS
BEGIN
BEGIN
  IF "SETOP_c"%ISOPEN THEN
    CLOSE "SETOP_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "SETOP_c$1"%ISOPEN THEN
    CLOSE "SETOP_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;

END Close_Cursors;



END "OWB_OPPORTUNITY_DIM";
/


GRANT EXECUTE, DEBUG ON GKDW.OWB_OPPORTUNITY_DIM TO DWHREAD;

