DROP PACKAGE BODY GKDW.OWB_ORDER_FACT;

CREATE OR REPLACE PACKAGE BODY GKDW."OWB_ORDER_FACT" AS

-- Define cursors here so that they have global scope within the package (for debugger)

---------------------------------------------------------------------------
--
-- "FLTR_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "FLTR_c" IS
  SELECT
  "LOOKUP_INPUT_SUBQUERY"."EVXEVENROLLID" "EVXEVENROLLID",
  "LOOKUP_INPUT_SUBQUERY"."EVXEVENTID" "EVXEVENTID",
  "LOOKUP_INPUT_SUBQUERY"."ATTENDEECONTACTID" "ATTENDEECONTACTID",
  "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_HX" "CREATEDATE_HX",
  "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_TXFEE" "CREATEDATE_TXFEE",
  "EVENT_DIM"."EVENT_CHANNEL" "EVENT_CHANNEL",
  "EVENT_DIM"."EVENT_TYPE" "EVENT_TYPE",
  "LOOKUP_INPUT_SUBQUERY"."BILLINGDATE" "BILLINGDATE",
  "LOOKUP_INPUT_SUBQUERY"."EVXEVTICKETID" "EVXEVTICKETID",
  "EVENT_DIM"."START_DATE" "START_DATE",
  "LOOKUP_INPUT_SUBQUERY"."ENROLLSOURCE" "ENROLLSOURCE",
  "LOOKUP_INPUT_SUBQUERY"."ENROLLQTY" "ENROLLQTY",
  "LOOKUP_INPUT_SUBQUERY"."ACTUALAMOUNT" "ACTUALAMOUNT",
  "LOOKUP_INPUT_SUBQUERY"."CURRENCYTYPE" "CURRENCYTYPE",
  "LOOKUP_INPUT_SUBQUERY"."SOLDBYUSER" "SOLDBYUSER",
  "LOOKUP_INPUT_SUBQUERY"."OPPORTUNITYID" "OPPORTUNITYID",
  "LOOKUP_INPUT_SUBQUERY"."EVXEV_TXFEEID" "EVXEV_TXFEEID",
  case upper(trim("CUST_DIM"."COUNTRY" )) when 'USA'  then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  else  "CUST_DIM"."ZIPCODE"  end/* EXPR_2.OUTGRP1.ZIP_CODE */ "ZIP_CODE",
  "EVENT_DIM"."COUNTRY" "COUNTRY",
  "MARKET_DIM"."TERRITORY" "TERRITORY",
  "MARKET_DIM"."REGION" "REGION",
  "MARKET_DIM"."SALES_REP" "SALES_REP",
  "MARKET_DIM"."REGION_MGR" "REGION_MGR",
  "LOOKUP_INPUT_SUBQUERY"."MODIFYDATE_TXFEE" "MODIFYDATE_TXFEE",
  "LOOKUP_INPUT_SUBQUERY"."ENROLLSTATUS" "ENROLLSTATUS",
  "LOOKUP_INPUT_SUBQUERY"."ENROLLSTATUSDESC" "ENROLLSTATUSDESC",
  "LOOKUP_INPUT_SUBQUERY"."FEETYPE" "FEETYPE",
  "LOOKUP_INPUT_SUBQUERY"."ENROLLSTATUSDATE" "ENROLLSTATUSDATE",
  "PPCARD_DIM"."SALES_ORDER_ID" "SALES_ORDER_ID",
  "LOOKUP_INPUT_SUBQUERY"."SOURCE" "SOURCE",
  "EVXBILLING"."BALANCEDUE" "BALANCEDUE",
  "EVXBILLPAYMENT"."METHOD" "METHOD",
  "EVXBILLPAYMENT"."EVXPPCARDID" "EVXPPCARDID",
  "LOOKUP_INPUT_SUBQUERY"."ACTUALRATE" "ACTUALRATE",
  "LOOKUP_INPUT_SUBQUERY"."PONUMBER" "PONUMBER",
  "LOOKUP_INPUT_SUBQUERY"."CHANNEL" "CHANNEL",
  "LOOKUP_INPUT_SUBQUERY"."CREATEUSER_TXFEE" "CREATEUSER_TXFEE",
  "LOOKUP_INPUT_SUBQUERY"."MODIFYUSER_TXFEE" "MODIFYUSER_TXFEE",
  "LOOKUP_INPUT_SUBQUERY"."REVIEWTYPE" "REVIEWTYPE",
  "LOOKUP_INPUT_SUBQUERY"."ATTENDEETYPE" "ATTENDEETYPE",
  "EVXBILLPAYMENT"."CHECKNUMBER" "CHECKNUMBER",
  "LOOKUP_INPUT_SUBQUERY"."COMMENTS" "COMMENTS",
  "CUST_DIM"."OB_NATIONAL_TERR_NUM" "OB_NATIONAL_TERR_NUM",
  "CUST_DIM"."OB_NATIONAL_REP_ID" "OB_NATIONAL_REP_ID",
  "CUST_DIM"."OB_NATIONAL_REP_NAME" "OB_NATIONAL_REP_NAME",
  "CUST_DIM"."OB_TERR_NUM" "OB_TERR_NUM",
  "CUST_DIM"."OB_REP_ID" "OB_REP_ID",
  "CUST_DIM"."OB_REP_NAME" "OB_REP_NAME",
  "CUST_DIM"."OSR_TERR_NUM" "OSR_TERR_NUM",
  "CUST_DIM"."OSR_ID" "OSR_ID",
  "CUST_DIM"."OSR_REP_NAME" "OSR_REP_NAME",
  "CUST_DIM"."ENT_NATIONAL_TERR_NUM" "ENT_NATIONAL_TERR_NUM",
  "CUST_DIM"."ENT_NATIONAL_REP_ID" "ENT_NATIONAL_REP_ID",
  "CUST_DIM"."ENT_NATIONAL_REP_NAME" "ENT_NATIONAL_REP_NAME",
  "CUST_DIM"."ENT_INSIDE_TERR_NUM" "ENT_INSIDE_TERR_NUM",
  "CUST_DIM"."ENT_INSIDE_REP_ID" "ENT_INSIDE_REP_ID",
  "CUST_DIM"."ENT_INSIDE_REP_NAME" "ENT_INSIDE_REP_NAME",
  "CUST_DIM"."ENT_FEDERAL_TERR_NUM" "ENT_FEDERAL_TERR_NUM",
  "CUST_DIM"."ENT_FEDERAL_REP_ID" "ENT_FEDERAL_REP_ID",
  "CUST_DIM"."ENT_FEDERAL_REP_NAME" "ENT_FEDERAL_REP_NAME",
  "CUST_DIM"."BTSR_TERR_NUM" "BTSR_TERR_NUM",
  "CUST_DIM"."BTSR_REP_ID" "BTSR_REP_ID",
  "CUST_DIM"."BTSR_REP_NAME" "BTSR_REP_NAME",
  "CUST_DIM"."BTA_TERR_NUM" "BTA_TERR_NUM",
  "CUST_DIM"."BTA_REP_ID" "BTA_REP_ID",
  "CUST_DIM"."BTA_REP_NAME" "BTA_REP_NAME"
FROM
   ( SELECT
  "OWB_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT",
  "OWB_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT",
  "EVXEV_TXFEE"."EVXEV_TXFEEID" "EVXEV_TXFEEID",
  "EVXEV_TXFEE"."CREATEDATE" "CREATEDATE_TXFEE",
  "EVXEV_TXFEE"."MODIFYDATE" "MODIFYDATE_TXFEE",
  "EVXEV_TXFEE"."ACTUALAMOUNT" "ACTUALAMOUNT",
  "EVXEV_TXFEE"."ACTUALQUANTITY" "ACTUALQUANTITY",
  "EVXEV_TXFEE"."EVXEVENTID" "EVXEVENTID",
  "EVXEV_TXFEE"."ATTENDEECONTACTID" "ATTENDEECONTACTID",
  "EVXENROLLHX"."CREATEDATE" "CREATEDATE_HX",
  "EVXENROLLHX"."ENROLLQTY" "ENROLLQTY",
  "EVXENROLLHX"."ENROLLSTATUS" "ENROLLSTATUS",
  "EVXENROLLHX"."EVXEVENROLLID" "EVXEVENROLLID",
  "EVXEV_TXFEE"."EVXEVTICKETID" "EVXEVTICKETID",
  "EVXENROLLHX"."ENROLLSTATUSDESC" "ENROLLSTATUSDESC",
  "EVXENROLLHX"."ENROLLSOURCE" "ENROLLSOURCE",
  "EVXEV_TXFEE"."BILLINGDATE" "BILLINGDATE",
  "EVXEV_TXFEE"."CURRENCYTYPE" "CURRENCYTYPE",
  "EVXEV_TXFEE"."EVXBILLINGID" "EVXBILLINGID",
  "EVXEVTICKET"."SOLDBYUSER" "SOLDBYUSER",
  "EVXEV_TXFEE"."FEETYPE" "FEETYPE",
  "EVXENROLLHX"."ENROLLSTATUSDATE" "ENROLLSTATUSDATE",
  "EVXENROLLHX"."MODIFYDATE" "MODIFYDATE_HX",
  "EVXEV_TXFEE"."ACTUALRATE" "ACTUALRATE",
  "QG_EVENROLL"."SOURCE" "SOURCE",
  "QG_EVENROLL"."CREATEDATE" "CREATEDATE_QG",
  "QG_EVENROLL"."MODIFYDATE" "MODIFYDATE_QG",
  "QG_EVENROLL"."CHANNEL" "CHANNEL",
  "EVXEV_TXFEE"."CREATEUSER" "CREATEUSER_TXFEE",
  "EVXEV_TXFEE"."MODIFYUSER" "MODIFYUSER_TXFEE",
  "EVXEVTICKET"."OPPORTUNITYID" "OPPORTUNITYID",
  "EVXEVTICKET"."PONUMBER" "PONUMBER",
  "EVXEVTICKET"."REVIEWTYPE" "REVIEWTYPE",
  "EVXEVTICKET"."CREATEDATE" "CREATEDATE_TKT",
  "EVXEVTICKET"."MODIFYDATE" "MODIFYDATE_TKT",
  "EVXEVTICKET"."ATTENDEETYPE" "ATTENDEETYPE",
  "EVXEVTICKET"."COMMENTS" "COMMENTS"
FROM
    "SLXDW"."EVXENROLLHX"  "EVXENROLLHX"   
 JOIN   "SLXDW"."EVXEV_TXFEE"  "EVXEV_TXFEE" ON ( ( "EVXENROLLHX"."EVXEVENROLLID" = "EVXEV_TXFEE"."EVXEVENROLLID" ) )
 LEFT OUTER JOIN  ( SELECT
  "QG_EVENROLL"."EVXEVENROLLID" "EVXEVENROLLID",
  "QG_EVENROLL"."CREATEDATE" "CREATEDATE",
  "QG_EVENROLL"."MODIFYDATE" "MODIFYDATE",
  "QG_EVENROLL"."SOURCE" "SOURCE",
  "QG_EVENROLL"."CHANNEL" "CHANNEL"
FROM
  "SLXDW"."QG_EVENROLL" "QG_EVENROLL" ) "QG_EVENROLL" ON ( ( "EVXENROLLHX"."EVXEVENROLLID" = "QG_EVENROLL"."EVXEVENROLLID" ) )
 JOIN   "SLXDW"."EVXEVTICKET"  "EVXEVTICKET" ON ( ( "EVXEV_TXFEE"."EVXEVTICKETID" = "EVXEVTICKET"."EVXEVTICKETID" ) ) ) "LOOKUP_INPUT_SUBQUERY"  
 INNER JOIN "SLXDW"."EVXENROLLHX" "EVXENROLLHX1" on  "LOOKUP_INPUT_SUBQUERY"."EVXEVENROLLID" =  "EVXENROLLHX1"."EVXEVENROLLID"
 LEFT OUTER JOIN   "EVENT_DIM"  "EVENT_DIM" ON ( ( "EVENT_DIM"."EVENT_ID" = "LOOKUP_INPUT_SUBQUERY"."EVXEVENTID" ) )
 LEFT OUTER JOIN   "CUST_DIM"  "CUST_DIM" ON ( ( "CUST_DIM"."CUST_ID" = "LOOKUP_INPUT_SUBQUERY"."ATTENDEECONTACTID" ) )
 LEFT OUTER JOIN   "MARKET_DIM"  "MARKET_DIM" ON ( ( "MARKET_DIM"."ZIPCODE" = (case upper(trim("CUST_DIM"."COUNTRY" )) when 'USA'  then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  else  "CUST_DIM"."ZIPCODE"  end/* EXPR_2.OUTGRP1.ZIP_CODE */) ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLPAYMENT"  "EVXBILLPAYMENT" ON ( ( "EVXBILLPAYMENT"."EVXBILLINGID" = "LOOKUP_INPUT_SUBQUERY"."EVXBILLINGID" ) )
 LEFT OUTER JOIN   "PPCARD_DIM"  "PPCARD_DIM" ON ( ( "PPCARD_DIM"."PPCARD_ID" = "EVXBILLPAYMENT"."EVXPPCARDID" ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLING"  "EVXBILLING" ON ( ( ( "EVXBILLING"."EVXBILLINGID" = "LOOKUP_INPUT_SUBQUERY"."EVXBILLINGID" ) ) )
  WHERE 
  ( ( "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_TXFEE" >= "LOOKUP_INPUT_SUBQUERY"."CREATE_DATE_OUT" or "LOOKUP_INPUT_SUBQUERY"."MODIFYDATE_TXFEE" >= "LOOKUP_INPUT_SUBQUERY"."MODIFY_DATE_OUT" ) 
      OR ( "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_HX" >= "LOOKUP_INPUT_SUBQUERY"."CREATE_DATE_OUT" or "LOOKUP_INPUT_SUBQUERY"."MODIFYDATE_HX" >= "LOOKUP_INPUT_SUBQUERY"."MODIFY_DATE_OUT" ) 
      OR ( "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_QG" >= "LOOKUP_INPUT_SUBQUERY"."CREATE_DATE_OUT" or "LOOKUP_INPUT_SUBQUERY"."MODIFYDATE_QG" >= "LOOKUP_INPUT_SUBQUERY"."MODIFY_DATE_OUT" ) 
      OR ( "LOOKUP_INPUT_SUBQUERY"."CREATEDATE_TKT" >= "LOOKUP_INPUT_SUBQUERY"."CREATE_DATE_OUT" or "LOOKUP_INPUT_SUBQUERY"."MODIFYDATE_TKT" >= "LOOKUP_INPUT_SUBQUERY"."MODIFY_DATE_OUT" ) )
      AND NOT EXISTS (SELECT 1 FROM "GK_MASTER_ACCOUNT_EXCLUDE" "GK_MASTER_ACCOUNT_EXCLUDE" WHERE (("GK_MASTER_ACCOUNT_EXCLUDE"."ACCT_ID" = "CUST_DIM"."ACCT_ID" )));

---------------------------------------------------------------------------
--
-- "FLTR_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "FLTR_c$1" IS
  SELECT
  "LOOKUP_INPUT_SUBQUERY$1"."EVXEVENROLLID$1" "EVXEVENROLLID$1",
  "LOOKUP_INPUT_SUBQUERY$1"."EVXEVENTID$1" "EVXEVENTID$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ATTENDEECONTACTID$1" "ATTENDEECONTACTID$1",
  TRUNC("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_HX$1")/* EXPR.OUTGRP1.ENROLL_DATE */ "ENROLL_DATE",
  "LOOKUP_INPUT_SUBQUERY$1"."EVXEVTICKETID$1" "EVXEVTICKETID$1",
  case
when 
("EVENT_DIM"."EVENT_CHANNEL"  = 'INDIVIDUAL/PUBLIC' or
("EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE" = 'Open Enrollment'))
then 
        TRUNC("LOOKUP_INPUT_SUBQUERY$1"."BILLINGDATE$1")
when 
( "EVENT_DIM"."EVENT_CHANNEL"  = 'ENTERPRISE/PRIVATE' or 
( "EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE"  = 'Onsite'))
then
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1")
else
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1" )
end/* EXPR.OUTGRP1.BOOK_DATE */ "BOOK_DATE",
  case  when (case
when 
("EVENT_DIM"."EVENT_CHANNEL"  = 'INDIVIDUAL/PUBLIC' or
("EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE" = 'Open Enrollment'))
then 
        TRUNC("LOOKUP_INPUT_SUBQUERY$1"."BILLINGDATE$1")
when 
( "EVENT_DIM"."EVENT_CHANNEL"  = 'ENTERPRISE/PRIVATE' or 
( "EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE"  = 'Onsite'))
then
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1")
else
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1" )
end/* EXPR.OUTGRP1.BOOK_DATE */) is null then null when  "EVENT_DIM"."START_DATE" <  (case
when 
("EVENT_DIM"."EVENT_CHANNEL"  = 'INDIVIDUAL/PUBLIC' or
("EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE" = 'Open Enrollment'))
then 
        TRUNC("LOOKUP_INPUT_SUBQUERY$1"."BILLINGDATE$1")
when 
( "EVENT_DIM"."EVENT_CHANNEL"  = 'ENTERPRISE/PRIVATE' or 
( "EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE"  = 'Onsite'))
then
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1")
else
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1" )
end/* EXPR.OUTGRP1.BOOK_DATE */)  then  (case
when 
("EVENT_DIM"."EVENT_CHANNEL"  = 'INDIVIDUAL/PUBLIC' or
("EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE" = 'Open Enrollment'))
then 
        TRUNC("LOOKUP_INPUT_SUBQUERY$1"."BILLINGDATE$1")
when 
( "EVENT_DIM"."EVENT_CHANNEL"  = 'ENTERPRISE/PRIVATE' or 
( "EVENT_DIM"."EVENT_CHANNEL" is null 
and  "EVENT_DIM"."EVENT_TYPE"  = 'Onsite'))
then
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1")
else
        trunc("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1" )
end/* EXPR.OUTGRP1.BOOK_DATE */)  else  "EVENT_DIM"."START_DATE"  end/* EXPR_1.OUTGRP1.REV_DATE */ "REV_DATE",
  "LOOKUP_INPUT_SUBQUERY$1"."ENROLLSOURCE$1" "ENROLLSOURCE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ENROLLQTY$1" "ENROLLQTY$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ACTUALAMOUNT$1" "ACTUALAMOUNT$1",
  "LOOKUP_INPUT_SUBQUERY$1"."CURRENCYTYPE$1" "CURRENCYTYPE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."SOLDBYUSER$1" "SOLDBYUSER$1",
  "LOOKUP_INPUT_SUBQUERY$1"."OPPORTUNITYID$1" "OPPORTUNITYID$1",
  "GET_ORA_TRX_NUM"("LOOKUP_INPUT_SUBQUERY$1"."EVXEV_TXFEEID$2") "EVXEV_TXFEEID$1",
  case upper(trim("CUST_DIM"."COUNTRY" )) when 'USA'  then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  else  "CUST_DIM"."ZIPCODE"  end/* EXPR_2.OUTGRP1.ZIP_CODE */ "ZIP_CODE",
  "EVENT_DIM"."COUNTRY" "COUNTRY",
  "MARKET_DIM"."TERRITORY" "TERRITORY",
  "MARKET_DIM"."REGION" "REGION",
  "MARKET_DIM"."SALES_REP" "SALES_REP",
  "MARKET_DIM"."REGION_MGR" "REGION_MGR",
  "LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1"/* EXPR.OUTGRP1.CREATE_DATE */ "CREATE_DATE",
  "LOOKUP_INPUT_SUBQUERY$1"."MODIFYDATE_TXFEE$1" "MODIFYDATE_TXFEE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ENROLLSTATUS$1" "ENROLLSTATUS$1",
  "LOOKUP_INPUT_SUBQUERY$1"."EVXEV_TXFEEID$2" "EVXEV_TXFEEID$2",
  "LOOKUP_INPUT_SUBQUERY$1"."BILLINGDATE$1" "BILLINGDATE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ENROLLSTATUSDESC$1" "ENROLLSTATUSDESC$1",
  "LOOKUP_INPUT_SUBQUERY$1"."FEETYPE$1" "FEETYPE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ENROLLSTATUSDATE$1" "ENROLLSTATUSDATE$1",
  "PPCARD_DIM"."SALES_ORDER_ID" "SALES_ORDER_ID",
  "LOOKUP_INPUT_SUBQUERY$1"."SOURCE$1" "SOURCE$1",
  "EVXBILLING"."BALANCEDUE" "BALANCEDUE",
  case when 
(   "EVXBILLPAYMENT"."METHOD"  = 'Prepay Card'
        OR  "PPCARD_DIM"."SALES_ORDER_ID"  IS NOT NULL
        OR  "EVXBILLPAYMENT"."EVXPPCARDID"  IS NOT NULL
       ) 
 AND  (TRUNC("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_HX$1")/* EXPR.OUTGRP1.ENROLL_DATE */)  >= '01-MAY-2007'
 then
  "GET_LIST_PRICE"( "LOOKUP_INPUT_SUBQUERY$1"."EVXEVENTID$1",  
                        "LOOKUP_INPUT_SUBQUERY$1"."FEETYPE$1",
                        (TRUNC("LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_HX$1")/* EXPR.OUTGRP1.ENROLL_DATE */) )
else
  "LOOKUP_INPUT_SUBQUERY$1"."ACTUALRATE$1" 
 end/* EXPR_3.OUTGRP1.LIST_PRICE_OUT */ "LIST_PRICE_OUT",
  "LOOKUP_INPUT_SUBQUERY$1"."PONUMBER$1" "PONUMBER$1",
  "EVXBILLPAYMENT"."EVXPPCARDID" "EVXPPCARDID",
  "EVXBILLPAYMENT"."METHOD" "METHOD",
  "LOOKUP_INPUT_SUBQUERY$1"."CHANNEL$1" "CHANNEL$1",
  "LOOKUP_INPUT_SUBQUERY$1"."CREATEUSER_TXFEE$1" "CREATEUSER_TXFEE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."MODIFYUSER_TXFEE$1" "MODIFYUSER_TXFEE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."REVIEWTYPE$1" "REVIEWTYPE$1",
  "LOOKUP_INPUT_SUBQUERY$1"."ATTENDEETYPE$1" "ATTENDEETYPE$1",
  "EVXBILLPAYMENT"."CHECKNUMBER" "CHECKNUMBER",
  "LOOKUP_INPUT_SUBQUERY$1"."COMMENTS$1" "COMMENTS$1",
  "CUST_DIM"."OB_NATIONAL_TERR_NUM" "OB_NATIONAL_TERR_NUM",
  "CUST_DIM"."OB_NATIONAL_REP_ID" "OB_NATIONAL_REP_ID",
  "CUST_DIM"."OB_NATIONAL_REP_NAME" "OB_NATIONAL_REP_NAME",
  "CUST_DIM"."OB_TERR_NUM" "OB_TERR_NUM",
  "CUST_DIM"."OB_REP_ID" "OB_REP_ID",
  "CUST_DIM"."OB_REP_NAME" "OB_REP_NAME",
  "CUST_DIM"."OSR_TERR_NUM" "OSR_TERR_NUM",
  "CUST_DIM"."OSR_ID" "OSR_ID",
  "CUST_DIM"."OSR_REP_NAME" "OSR_REP_NAME",
  "CUST_DIM"."ENT_NATIONAL_TERR_NUM" "ENT_NATIONAL_TERR_NUM",
  "CUST_DIM"."ENT_NATIONAL_REP_ID" "ENT_NATIONAL_REP_ID",
  "CUST_DIM"."ENT_NATIONAL_REP_NAME" "ENT_NATIONAL_REP_NAME",
  "CUST_DIM"."ENT_INSIDE_TERR_NUM" "ENT_INSIDE_TERR_NUM",
  "CUST_DIM"."ENT_INSIDE_REP_ID" "ENT_INSIDE_REP_ID",
  "CUST_DIM"."ENT_INSIDE_REP_NAME" "ENT_INSIDE_REP_NAME",
  "CUST_DIM"."ENT_FEDERAL_TERR_NUM" "ENT_FEDERAL_TERR_NUM",
  "CUST_DIM"."ENT_FEDERAL_REP_ID" "ENT_FEDERAL_REP_ID",
  "CUST_DIM"."ENT_FEDERAL_REP_NAME" "ENT_FEDERAL_REP_NAME",
  "CUST_DIM"."BTSR_TERR_NUM" "BTSR_TERR_NUM",
  "CUST_DIM"."BTSR_REP_ID" "BTSR_REP_ID",
  "CUST_DIM"."BTSR_REP_NAME" "BTSR_REP_NAME",
  "CUST_DIM"."BTA_TERR_NUM" "BTA_TERR_NUM",
  "CUST_DIM"."BTA_REP_ID" "BTA_REP_ID",
  "CUST_DIM"."BTA_REP_NAME" "BTA_REP_NAME"
FROM
   ( SELECT
  "OWB_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" "CREATE_DATE_OUT$1",
  "OWB_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" "MODIFY_DATE_OUT$1",
  "EVXEV_TXFEE"."EVXEV_TXFEEID" "EVXEV_TXFEEID$2",
  "EVXEV_TXFEE"."CREATEDATE" "CREATEDATE_TXFEE$1",
  "EVXEV_TXFEE"."MODIFYDATE" "MODIFYDATE_TXFEE$1",
  "EVXEV_TXFEE"."ACTUALAMOUNT" "ACTUALAMOUNT$1",
  "EVXEV_TXFEE"."ACTUALQUANTITY" "ACTUALQUANTITY$1",
  "EVXEV_TXFEE"."EVXEVENTID" "EVXEVENTID$1",
  "EVXEV_TXFEE"."ATTENDEECONTACTID" "ATTENDEECONTACTID$1",
  "EVXENROLLHX"."CREATEDATE" "CREATEDATE_HX$1",
  "EVXENROLLHX"."ENROLLQTY" "ENROLLQTY$1",
  "EVXENROLLHX"."ENROLLSTATUS" "ENROLLSTATUS$1",
  "EVXENROLLHX"."EVXEVENROLLID" "EVXEVENROLLID$1",
  "EVXEV_TXFEE"."EVXEVTICKETID" "EVXEVTICKETID$1",
  "EVXENROLLHX"."ENROLLSTATUSDESC" "ENROLLSTATUSDESC$1",
  "EVXENROLLHX"."ENROLLSOURCE" "ENROLLSOURCE$1",
  "EVXEV_TXFEE"."BILLINGDATE" "BILLINGDATE$1",
  "EVXEV_TXFEE"."CURRENCYTYPE" "CURRENCYTYPE$1",
  "EVXEV_TXFEE"."EVXBILLINGID" "EVXBILLINGID$1",
  "EVXEVTICKET"."SOLDBYUSER" "SOLDBYUSER$1",
  "EVXEV_TXFEE"."FEETYPE" "FEETYPE$1",
  "EVXENROLLHX"."ENROLLSTATUSDATE" "ENROLLSTATUSDATE$1",
  "EVXENROLLHX"."MODIFYDATE" "MODIFYDATE_HX$1",
  "EVXEV_TXFEE"."ACTUALRATE" "ACTUALRATE$1",
  "QG_EVENROLL"."SOURCE" "SOURCE$1",
  "QG_EVENROLL"."CREATEDATE" "CREATEDATE_QG$1",
  "QG_EVENROLL"."MODIFYDATE" "MODIFYDATE_QG$1",
  "QG_EVENROLL"."CHANNEL" "CHANNEL$1",
  "EVXEV_TXFEE"."CREATEUSER" "CREATEUSER_TXFEE$1",
  "EVXEV_TXFEE"."MODIFYUSER" "MODIFYUSER_TXFEE$1",
  "EVXEVTICKET"."OPPORTUNITYID" "OPPORTUNITYID$1",
  "EVXEVTICKET"."PONUMBER" "PONUMBER$1",
  "EVXEVTICKET"."REVIEWTYPE" "REVIEWTYPE$1",
  "EVXEVTICKET"."CREATEDATE" "CREATEDATE_TKT$1",
  "EVXEVTICKET"."MODIFYDATE" "MODIFYDATE_TKT$1",
  "EVXEVTICKET"."ATTENDEETYPE" "ATTENDEETYPE$1",
  "EVXEVTICKET"."COMMENTS" "COMMENTS$1"
FROM
    "SLXDW"."EVXENROLLHX"  "EVXENROLLHX"   
 JOIN   "SLXDW"."EVXEV_TXFEE"  "EVXEV_TXFEE" ON ( ( "EVXENROLLHX"."EVXEVENROLLID" = "EVXEV_TXFEE"."EVXEVENROLLID" ) )
 LEFT OUTER JOIN  ( SELECT
  "QG_EVENROLL"."EVXEVENROLLID" "EVXEVENROLLID",
  "QG_EVENROLL"."CREATEDATE" "CREATEDATE",
  "QG_EVENROLL"."MODIFYDATE" "MODIFYDATE",
  "QG_EVENROLL"."SOURCE" "SOURCE",
  "QG_EVENROLL"."CHANNEL" "CHANNEL"
FROM
  "SLXDW"."QG_EVENROLL" "QG_EVENROLL" ) "QG_EVENROLL" ON ( ( "EVXENROLLHX"."EVXEVENROLLID" = "QG_EVENROLL"."EVXEVENROLLID" ) )
 JOIN   "SLXDW"."EVXEVTICKET"  "EVXEVTICKET" ON ( ( "EVXEV_TXFEE"."EVXEVTICKETID" = "EVXEVTICKET"."EVXEVTICKETID" ) ) ) "LOOKUP_INPUT_SUBQUERY$1"   
 LEFT OUTER JOIN   "EVENT_DIM"  "EVENT_DIM" ON ( ( "EVENT_DIM"."EVENT_ID" = "LOOKUP_INPUT_SUBQUERY$1"."EVXEVENTID$1" ) )
 LEFT OUTER JOIN   "CUST_DIM"  "CUST_DIM" ON ( ( "CUST_DIM"."CUST_ID" = "LOOKUP_INPUT_SUBQUERY$1"."ATTENDEECONTACTID$1" ) )
 LEFT OUTER JOIN   "MARKET_DIM"  "MARKET_DIM" ON ( ( "MARKET_DIM"."ZIPCODE" = (case upper(trim("CUST_DIM"."COUNTRY" )) when 'USA'  then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  else  "CUST_DIM"."ZIPCODE"  end/* EXPR_2.OUTGRP1.ZIP_CODE */) ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLPAYMENT"  "EVXBILLPAYMENT" ON ( ( "EVXBILLPAYMENT"."EVXBILLINGID" = "LOOKUP_INPUT_SUBQUERY$1"."EVXBILLINGID$1" ) )
 LEFT OUTER JOIN   "PPCARD_DIM"  "PPCARD_DIM" ON ( ( "PPCARD_DIM"."PPCARD_ID" = "EVXBILLPAYMENT"."EVXPPCARDID" ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLING"  "EVXBILLING" ON ( ( ( "EVXBILLING"."EVXBILLINGID" = "LOOKUP_INPUT_SUBQUERY$1"."EVXBILLINGID$1" ) ) )
  WHERE 
  ( ( "LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TXFEE$1" >= "LOOKUP_INPUT_SUBQUERY$1"."CREATE_DATE_OUT$1" or "LOOKUP_INPUT_SUBQUERY$1"."MODIFYDATE_TXFEE$1" >= "LOOKUP_INPUT_SUBQUERY$1"."MODIFY_DATE_OUT$1" ) OR ( "LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_HX$1" >= "LOOKUP_INPUT_SUBQUERY$1"."CREATE_DATE_OUT$1" or "LOOKUP_INPUT_SUBQUERY$1"."MODIFYDATE_HX$1" >= "LOOKUP_INPUT_SUBQUERY$1"."MODIFY_DATE_OUT$1" ) OR ( "LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_QG$1" >= "LOOKUP_INPUT_SUBQUERY$1"."CREATE_DATE_OUT$1" or "LOOKUP_INPUT_SUBQUERY$1"."MODIFYDATE_QG$1" >= "LOOKUP_INPUT_SUBQUERY$1"."MODIFY_DATE_OUT$1" ) OR ( "LOOKUP_INPUT_SUBQUERY$1"."CREATEDATE_TKT$1" >= "LOOKUP_INPUT_SUBQUERY$1"."CREATE_DATE_OUT$1" or "LOOKUP_INPUT_SUBQUERY$1"."MODIFYDATE_TKT$1" >= "LOOKUP_INPUT_SUBQUERY$1"."MODIFY_DATE_OUT$1" ) )
  AND NOT EXISTS (SELECT 1 FROM "GK_MASTER_ACCOUNT_EXCLUDE" "GK_MASTER_ACCOUNT_EXCLUDE" WHERE (("GK_MASTER_ACCOUNT_EXCLUDE"."ACCT_ID" = "CUST_DIM"."ACCT_ID" ))); 


a_table_to_analyze a_table_to_analyze_type;


PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
FUNCTION "GET_CONST_0_TABLE_NAME" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_0_TABLE_NAME";
END "GET_CONST_0_TABLE_NAME";
FUNCTION "GET_CONST_1_SOURCE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_1_SOURCE";
END "GET_CONST_1_SOURCE";
FUNCTION "GET_CONST_2_TRANSACTION_TYPE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_2_TRANSACTION_TYPE";
END "GET_CONST_2_TRANSACTION_TYPE";
FUNCTION "GET_CONST_3_TERRITORY_TYPE" RETURN VARCHAR IS
BEGIN
  RETURN "CONST_3_TERRITORY_TYPE";
END "GET_CONST_3_TERRITORY_TYPE";
FUNCTION "get_PREMAPPING_1_CREATE_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_1_CREATE_DATE_OUT";
END "get_PREMAPPING_1_CREATE_DATE_O";
FUNCTION "get_PREMAPPING_2_MODIFY_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_2_MODIFY_DATE_OUT";
END "get_PREMAPPING_2_MODIFY_DATE_O";





-- Procedure "FLTR_p" is the entry point for map "FLTR_p"

PROCEDURE "FLTR_p"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"FLTR_p"';
get_source_name            CONSTANT VARCHAR2(2000) := '"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19B0975678E040007F01006C7D,A41FFB19B08E5678E040007F01006C7D,A41FFB19B0955678E040007F01006C7D,A41FFB19B06F5678E040007F01006C7D,A41FFB19ADF05678E040007F01006C7D,A41FFB19B0965678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"ORDER_FACT_id" NUMBER(22) := 0;
"ORDER_FACT_ins" NUMBER(22) := 0;
"ORDER_FACT_upd" NUMBER(22) := 0;
"ORDER_FACT_del" NUMBER(22) := 0;
"ORDER_FACT_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"ORDER_FACT_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"ORDER_FACT_ir"  index_redirect_array;
"SV_ORDER_FACT_srk" NUMBER;
"ORDER_FACT_new"  BOOLEAN;
"ORDER_FACT_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"FLTR_si" NUMBER(22) := 0;

"FLTR_i" NUMBER(22) := 0;


"ORDER_FACT_si" NUMBER(22) := 0;

"ORDER_FACT_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_FLTR_12_EVXEVENROLLID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_FLTR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_7_EVXEVENTID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_8_ATTENDEECONTACTID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_9_CREATEDATE_HX" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_3_CREATEDATE_TXFEE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_37_EVENT_CHANNEL" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_43_EVENT_TYPE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_16_BILLINGDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_5_ENROLL_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_6_BOOK_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_7_CREATE_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_13_EVXEVTICKETID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_LEAD_1_LEADSOUR" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_6_START_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_1_2_REV_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_15_ENROLLSOURCE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_10_ENROLLQTY" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_5_ACTUALAMOUNT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_17_CURRENCYTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_19_SOLDBYUSER" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_30_OPPORTUNITYID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_2_EVXEV_TXFEEID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_ORA_TRX_NUM_1_VALUE" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_2_2_ZIP_CODE" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_20_COUNTRY" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_3_TERRITORY" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_4_REGION" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_5_SALES_REP" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_6_REGION_MGR" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_4_MODIFYDATE_TXFEE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_11_ENROLLSTATUS" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_14_ENROLLSTATUSDESC" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_20_FEETYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_21_ENROLLSTATUSDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_PPCARD_DIM_17_SALES_ORDER_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_24_SOURCE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLING_6_BALANCEDUE" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_31_METHOD" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_61_EVXPPCARD" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_23_ACTUALRATE" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_3_9_LIST_PRICE_OUT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_31_PONUMBER" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_27_CHANNEL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_28_CREATEUSER_TXFEE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_29_MODIFYUSER_TXFEE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_32_REVIEWTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_35_ATTENDEETYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_27_CHECKNUMB" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_36_COMMENTS" IS TABLE OF VARCHAR2(500) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_39_OB_NATIO" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_40_OB_NATIONAL_REP_" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_41_OB_NATIO" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_42_OB_TERR_NUM" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_43_OB_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_44_OB_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_45_OSR_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_46_OSR_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_47_OSR_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_48_ENT_NATI" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_49_ENT_NATI" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_50_ENT_NATI" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_51_ENT_INSI" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_52_ENT_INSIDE_REP_" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_53_ENT_INSI" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_54_ENT_FEDE" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_55_ENT_FEDERAL_REP_" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_56_ENT_FEDE" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_57_BTSR_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_58_BTSR_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_59_BTSR_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_60_BTA_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_61_BTA_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_62_BTA_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_0_ENROLL_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_1_EVENT_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_2_CUST_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_3_ENROLL_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_4_KEYCODE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_5_BOOK_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_6_REV_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_8_ENROLL_SOURCE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_9_QUANTITY" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_10_BOOK_AMT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_11_CURR_CODE" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_13_SALESPERSON" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_15_OPPORTUNITY_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_17_ORACLE_TRX_NUM" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_22_GKDW_SOURCE" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_24_ZIP_CODE" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_26_COUNTRY" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_28_TERRITORY" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_29_REGION" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_30_SALES_REP" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_31_REGION_REP" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_32_CREATION_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_33_LAST_UPDATE_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_34_ENROLL_STATUS" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_36_TXFEE_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_37_BILL_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_39_ENROLL_S" IS TABLE OF VARCHAR2(70) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_40_FEE_TYPE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_41_ENROLL_S" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_42_PP_SALES" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_43_SOURCE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_44_BAL_DUE" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_45_LIST_PRICE" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_46_PO_NUMBER" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_47_PPCARD_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_48_PAYMENT_METHOD" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_49_REG_CODE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_50_CREATE_USER" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_51_MODIFY_USER" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_52_ENROLL_TYPE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_56_ATTENDEE_TYPE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_57_CHECK_NUMBER" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_58_COMMENTS" IS TABLE OF VARCHAR2(500) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_59_OB_NATIO" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_60_OB_NATIO" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_61_OB_NATIO" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_62_OB_TERR_NUM" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_63_OB_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_64_OB_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_65_OSR_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_66_OSR_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_67_OSR_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_68_ENT_NATI" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_69_ENT_NATI" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_70_ENT_NATI" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_71_ENT_INSI" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_72_ENT_INSI" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_73_ENT_INSI" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_74_ENT_FEDE" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_75_ENT_FEDE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_76_ENT_FEDE" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_77_BTSR_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_78_BTSR_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_79_BTSR_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_80_BTA_TERR_NUM" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_81_BTA_REP_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_82_BTA_REP_NAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_FLTR_12_EVXEVENROLLID"  CHAR(12);
"SV_ROWKEY_FLTR"  VARCHAR2(18);
"SV_FLTR_7_EVXEVENTID"  CHAR(12);
"SV_FLTR_8_ATTENDEECONTACTID"  CHAR(12);
"SV_FLTR_9_CREATEDATE_HX"  DATE;
"SV_FLTR_3_CREATEDATE_TXFEE"  DATE;
"SV_EVENT_DIM_37_EVENT_CHANNEL"  VARCHAR2(100);
"SV_EVENT_DIM_43_EVENT_TYPE"  VARCHAR2(50);
"SV_FLTR_16_BILLINGDATE"  DATE;
"SV_EXPR_5_ENROLL_DATE"  DATE;
"SV_EXPR_6_BOOK_DATE"  DATE;
"SV_EXPR_7_CREATE_DATE"  DATE;
"SV_FLTR_13_EVXEVTICKETID"  CHAR(12);
"SV_GET_LEAD_1_LEADSOUR"  VARCHAR2(32767);
"SV_EVENT_DIM_6_START_DATE"  DATE;
"SV_EXPR_1_2_REV_DATE"  DATE;
"SV_FLTR_15_ENROLLSOURCE"  VARCHAR2(32);
"SV_FLTR_10_ENROLLQTY"  NUMBER;
"SV_FLTR_5_ACTUALAMOUNT"  NUMBER;
"SV_FLTR_17_CURRENCYTYPE"  VARCHAR2(32);
"SV_FLTR_19_SOLDBYUSER"  VARCHAR2(64);
"SV_FLTR_30_OPPORTUNITYID"  CHAR(12);
"SV_FLTR_2_EVXEV_TXFEEID"  CHAR(12);
"SV_GET_ORA_TRX_NUM_1_VALUE"  VARCHAR2(32767);
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_EXPR_2_2_ZIP_CODE"  VARCHAR2(25);
"SV_EVENT_DIM_20_COUNTRY"  VARCHAR2(60);
"SV_MARKET_DIM_3_TERRITORY"  VARCHAR2(25);
"SV_MARKET_DIM_4_REGION"  VARCHAR2(50);
"SV_MARKET_DIM_5_SALES_REP"  VARCHAR2(100);
"SV_MARKET_DIM_6_REGION_MGR"  VARCHAR2(100);
"SV_FLTR_4_MODIFYDATE_TXFEE"  DATE;
"SV_FLTR_11_ENROLLSTATUS"  VARCHAR2(32);
"SV_FLTR_14_ENROLLSTATUSDESC"  VARCHAR2(64);
"SV_FLTR_20_FEETYPE"  VARCHAR2(32);
"SV_FLTR_21_ENROLLSTATUSDATE"  DATE;
"SV_PPCARD_DIM_17_SALES_ORDER_"  VARCHAR2(50);
"SV_FLTR_24_SOURCE"  VARCHAR2(32);
"SV_EVXBILLING_6_BALANCEDUE"  NUMBER;
"SV_EVXBILLPAYMENT_31_METHOD"  VARCHAR2(32);
"SV_EVXBILLPAYMENT_61_EVXPPCARD"  CHAR(12);
"SV_FLTR_23_ACTUALRATE"  NUMBER;
"SV_EXPR_3_9_LIST_PRICE_OUT"  NUMBER;
"SV_FLTR_31_PONUMBER"  VARCHAR2(32);
"SV_FLTR_27_CHANNEL"  VARCHAR2(32);
"SV_FLTR_28_CREATEUSER_TXFEE"  CHAR(12);
"SV_FLTR_29_MODIFYUSER_TXFEE"  CHAR(12);
"SV_FLTR_32_REVIEWTYPE"  VARCHAR2(32);
"SV_FLTR_35_ATTENDEETYPE"  VARCHAR2(32);
"SV_EVXBILLPAYMENT_27_CHECKNUMB"  VARCHAR2(32);
"SV_FLTR_36_COMMENTS"  VARCHAR2(500);
"SV_CUST_DIM_39_OB_NATIO"  VARCHAR2(10);
"SV_CUST_DIM_40_OB_NATIONAL_RE"  CHAR(12);
"SV_CUST_DIM_41_OB_NATIO"  VARCHAR2(64);
"SV_CUST_DIM_42_OB_TERR_NUM"  VARCHAR2(10);
"SV_CUST_DIM_43_OB_REP_ID"  CHAR(12);
"SV_CUST_DIM_44_OB_REP_NAME"  VARCHAR2(64);
"SV_CUST_DIM_45_OSR_TERR_NUM"  VARCHAR2(10);
"SV_CUST_DIM_46_OSR_ID"  CHAR(12);
"SV_CUST_DIM_47_OSR_REP_NAME"  VARCHAR2(64);
"SV_CUST_DIM_48_ENT_NATI"  VARCHAR2(10);
"SV_CUST_DIM_49_ENT_NATI"  CHAR(12);
"SV_CUST_DIM_50_ENT_NATI"  VARCHAR2(64);
"SV_CUST_DIM_51_ENT_INSI"  VARCHAR2(10);
"SV_CUST_DIM_52_ENT_INSIDE_REP_"  CHAR(12);
"SV_CUST_DIM_53_ENT_INSI"  VARCHAR2(64);
"SV_CUST_DIM_54_ENT_FEDE"  VARCHAR2(10);
"SV_CUST_DIM_55_ENT_FEDERAL_RE"  CHAR(12);
"SV_CUST_DIM_56_ENT_FEDE"  VARCHAR2(64);
"SV_CUST_DIM_57_BTSR_TERR_NUM"  VARCHAR2(10);
"SV_CUST_DIM_58_BTSR_REP_ID"  CHAR(12);
"SV_CUST_DIM_59_BTSR_REP_NAME"  VARCHAR2(64);
"SV_CUST_DIM_60_BTA_TERR_NUM"  VARCHAR2(10);
"SV_CUST_DIM_61_BTA_REP_ID"  CHAR(12);
"SV_CUST_DIM_62_BTA_REP_NAME"  VARCHAR2(64);
"SV_ORDER_FACT_0_ENROLL_ID"  VARCHAR2(50);
"SV_ORDER_FACT_1_EVENT_ID"  VARCHAR2(50);
"SV_ORDER_FACT_2_CUST_ID"  VARCHAR2(50);
"SV_ORDER_FACT_3_ENROLL_DATE"  DATE;
"SV_ORDER_FACT_4_KEYCODE"  VARCHAR2(50);
"SV_ORDER_FACT_5_BOOK_DATE"  DATE;
"SV_ORDER_FACT_6_REV_DATE"  DATE;
"SV_ORDER_FACT_8_ENROLL_SOURCE"  VARCHAR2(50);
"SV_ORDER_FACT_9_QUANTITY"  NUMBER;
"SV_ORDER_FACT_10_BOOK_AMT"  NUMBER;
"SV_ORDER_FACT_11_CURR_CODE"  VARCHAR2(10);
"SV_ORDER_FACT_13_SALESPERSON"  VARCHAR2(250);
"SV_ORDER_FACT_15_OPPORTUNITY_"  VARCHAR2(50);
"SV_ORDER_FACT_17_ORACLE_TRX_N"  VARCHAR2(50);
"SV_ORDER_FACT_22_GKDW_SOURCE"  VARCHAR2(20);
"SV_ORDER_FACT_24_ZIP_CODE"  VARCHAR2(25);
"SV_ORDER_FACT_26_COUNTRY"  VARCHAR2(50);
"SV_ORDER_FACT_28_TERRITORY"  VARCHAR2(25);
"SV_ORDER_FACT_29_REGION"  VARCHAR2(50);
"SV_ORDER_FACT_30_SALES_REP"  VARCHAR2(100);
"SV_ORDER_FACT_31_REGION_REP"  VARCHAR2(100);
"SV_ORDER_FACT_32_CREATION_DATE"  DATE;
"SV_ORDER_FACT_33_LAST_UPDATE_"  DATE;
"SV_ORDER_FACT_34_ENROLL_STATUS"  VARCHAR2(50);
"SV_ORDER_FACT_36_TXFEE_ID"  VARCHAR2(50);
"SV_ORDER_FACT_37_BILL_DATE"  DATE;
"SV_ORDER_FA_39_ENROLL_S"  VARCHAR2(70);
"SV_ORDER_FACT_40_FEE_TYPE"  VARCHAR2(50);
"SV_ORDER_FA_41_ENROLL_S"  DATE;
"SV_ORDER_FA_42_PP_SALES"  VARCHAR2(50);
"SV_ORDER_FACT_43_SOURCE"  VARCHAR2(50);
"SV_ORDER_FACT_44_BAL_DUE"  NUMBER;
"SV_ORDER_FACT_45_LIST_PRICE"  NUMBER;
"SV_ORDER_FACT_46_PO_NUMBER"  VARCHAR2(50);
"SV_ORDER_FACT_47_PPCARD_ID"  VARCHAR2(50);
"SV_ORDER_FACT_48_PAYMENT_METH"  VARCHAR2(50);
"SV_ORDER_FACT_49_REG_CODE"  VARCHAR2(50);
"SV_ORDER_FACT_50_CREATE_USER"  VARCHAR2(50);
"SV_ORDER_FACT_51_MODIFY_USER"  VARCHAR2(50);
"SV_ORDER_FACT_52_ENROLL_TYPE"  VARCHAR2(50);
"SV_ORDER_FACT_56_ATTENDEE_TYPE"  VARCHAR2(50);
"SV_ORDER_FACT_57_CHECK_NUMBER"  VARCHAR2(50);
"SV_ORDER_FACT_58_COMMENTS"  VARCHAR2(500);
"SV_ORDER_FA_59_OB_NATIO"  VARCHAR2(10);
"SV_ORDER_FA_60_OB_NATIO"  CHAR(12);
"SV_ORDER_FA_61_OB_NATIO"  VARCHAR2(64);
"SV_ORDER_FACT_62_OB_TERR_NUM"  VARCHAR2(25);
"SV_ORDER_FACT_63_OB_REP_ID"  CHAR(12);
"SV_ORDER_FACT_64_OB_REP_NAME"  VARCHAR2(64);
"SV_ORDER_FACT_65_OSR_TERR_NUM"  VARCHAR2(10);
"SV_ORDER_FACT_66_OSR_ID"  CHAR(12);
"SV_ORDER_FACT_67_OSR_REP_NAME"  VARCHAR2(64);
"SV_ORDER_FA_68_ENT_NATI"  VARCHAR2(25);
"SV_ORDER_FA_69_ENT_NATI"  CHAR(12);
"SV_ORDER_FA_70_ENT_NATI"  VARCHAR2(64);
"SV_ORDER_FA_71_ENT_INSI"  VARCHAR2(10);
"SV_ORDER_FA_72_ENT_INSI"  CHAR(12);
"SV_ORDER_FA_73_ENT_INSI"  VARCHAR2(64);
"SV_ORDER_FA_74_ENT_FEDE"  VARCHAR2(10);
"SV_ORDER_FA_75_ENT_FEDE"  CHAR(12);
"SV_ORDER_FA_76_ENT_FEDE"  VARCHAR2(64);
"SV_ORDER_FACT_77_BTSR_TERR_NUM"  VARCHAR2(10);
"SV_ORDER_FACT_78_BTSR_REP_ID"  CHAR(12);
"SV_ORDER_FACT_79_BTSR_REP_NAME"  VARCHAR2(64);
"SV_ORDER_FACT_80_BTA_TERR_NUM"  VARCHAR2(10);
"SV_ORDER_FACT_81_BTA_REP_ID"  CHAR(12);
"SV_ORDER_FACT_82_BTA_REP_NAME"  VARCHAR2(64);

-- Bulk: intermediate collection variables
"FLTR_12_EVXEVENROLLID" "T_FLTR_12_EVXEVENROLLID";
"ROWKEY_FLTR" "T_ROWKEY_FLTR";
"FLTR_7_EVXEVENTID" "T_FLTR_7_EVXEVENTID";
"FLTR_8_ATTENDEECONTACTID" "T_FLTR_8_ATTENDEECONTACTID";
"FLTR_9_CREATEDATE_HX" "T_FLTR_9_CREATEDATE_HX";
"FLTR_3_CREATEDATE_TXFEE" "T_FLTR_3_CREATEDATE_TXFEE";
"EVENT_DIM_37_EVENT_CHANNEL" "T_EVENT_DIM_37_EVENT_CHANNEL";
"EVENT_DIM_43_EVENT_TYPE" "T_EVENT_DIM_43_EVENT_TYPE";
"FLTR_16_BILLINGDATE" "T_FLTR_16_BILLINGDATE";
"EXPR_5_ENROLL_DATE" "T_EXPR_5_ENROLL_DATE";
"EXPR_6_BOOK_DATE" "T_EXPR_6_BOOK_DATE";
"EXPR_7_CREATE_DATE" "T_EXPR_7_CREATE_DATE";
"FLTR_13_EVXEVTICKETID" "T_FLTR_13_EVXEVTICKETID";
"GET_LEAD_1_LEADSOUR" "T_GET_LEAD_1_LEADSOUR";
"EVENT_DIM_6_START_DATE" "T_EVENT_DIM_6_START_DATE";
"EXPR_1_2_REV_DATE" "T_EXPR_1_2_REV_DATE";
"FLTR_15_ENROLLSOURCE" "T_FLTR_15_ENROLLSOURCE";
"FLTR_10_ENROLLQTY" "T_FLTR_10_ENROLLQTY";
"FLTR_5_ACTUALAMOUNT" "T_FLTR_5_ACTUALAMOUNT";
"FLTR_17_CURRENCYTYPE" "T_FLTR_17_CURRENCYTYPE";
"FLTR_19_SOLDBYUSER" "T_FLTR_19_SOLDBYUSER";
"FLTR_30_OPPORTUNITYID" "T_FLTR_30_OPPORTUNITYID";
"FLTR_2_EVXEV_TXFEEID" "T_FLTR_2_EVXEV_TXFEEID";
"GET_ORA_TRX_NUM_1_VALUE" "T_GET_ORA_TRX_NUM_1_VALUE";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"EXPR_2_2_ZIP_CODE" "T_EXPR_2_2_ZIP_CODE";
"EVENT_DIM_20_COUNTRY" "T_EVENT_DIM_20_COUNTRY";
"MARKET_DIM_3_TERRITORY" "T_MARKET_DIM_3_TERRITORY";
"MARKET_DIM_4_REGION" "T_MARKET_DIM_4_REGION";
"MARKET_DIM_5_SALES_REP" "T_MARKET_DIM_5_SALES_REP";
"MARKET_DIM_6_REGION_MGR" "T_MARKET_DIM_6_REGION_MGR";
"FLTR_4_MODIFYDATE_TXFEE" "T_FLTR_4_MODIFYDATE_TXFEE";
"FLTR_11_ENROLLSTATUS" "T_FLTR_11_ENROLLSTATUS";
"FLTR_14_ENROLLSTATUSDESC" "T_FLTR_14_ENROLLSTATUSDESC";
"FLTR_20_FEETYPE" "T_FLTR_20_FEETYPE";
"FLTR_21_ENROLLSTATUSDATE" "T_FLTR_21_ENROLLSTATUSDATE";
"PPCARD_DIM_17_SALES_ORDER_ID" "T_PPCARD_DIM_17_SALES_ORDER_ID";
"FLTR_24_SOURCE" "T_FLTR_24_SOURCE";
"EVXBILLING_6_BALANCEDUE" "T_EVXBILLING_6_BALANCEDUE";
"EVXBILLPAYMENT_31_METHOD" "T_EVXBILLPAYMENT_31_METHOD";
"EVXBILLPAYMENT_61_EVXPPCARDID" "T_EVXBILLPAYMENT_61_EVXPPCARD";
"FLTR_23_ACTUALRATE" "T_FLTR_23_ACTUALRATE";
"EXPR_3_9_LIST_PRICE_OUT" "T_EXPR_3_9_LIST_PRICE_OUT";
"FLTR_31_PONUMBER" "T_FLTR_31_PONUMBER";
"FLTR_27_CHANNEL" "T_FLTR_27_CHANNEL";
"FLTR_28_CREATEUSER_TXFEE" "T_FLTR_28_CREATEUSER_TXFEE";
"FLTR_29_MODIFYUSER_TXFEE" "T_FLTR_29_MODIFYUSER_TXFEE";
"FLTR_32_REVIEWTYPE" "T_FLTR_32_REVIEWTYPE";
"FLTR_35_ATTENDEETYPE" "T_FLTR_35_ATTENDEETYPE";
"EVXBILLPAYMENT_27_CHECKNUMBER" "T_EVXBILLPAYMENT_27_CHECKNUMB";
"FLTR_36_COMMENTS" "T_FLTR_36_COMMENTS";
"CUST_DIM_39_OB_NATIO" "T_CUST_DIM_39_OB_NATIO";
"CUST_DIM_40_OB_NATIONAL_REP_ID" "T_CUST_DIM_40_OB_NATIONAL_REP_";
"CUST_DIM_41_OB_NATIO" "T_CUST_DIM_41_OB_NATIO";
"CUST_DIM_42_OB_TERR_NUM" "T_CUST_DIM_42_OB_TERR_NUM";
"CUST_DIM_43_OB_REP_ID" "T_CUST_DIM_43_OB_REP_ID";
"CUST_DIM_44_OB_REP_NAME" "T_CUST_DIM_44_OB_REP_NAME";
"CUST_DIM_45_OSR_TERR_NUM" "T_CUST_DIM_45_OSR_TERR_NUM";
"CUST_DIM_46_OSR_ID" "T_CUST_DIM_46_OSR_ID";
"CUST_DIM_47_OSR_REP_NAME" "T_CUST_DIM_47_OSR_REP_NAME";
"CUST_DIM_48_ENT_NATI" "T_CUST_DIM_48_ENT_NATI";
"CUST_DIM_49_ENT_NATI" "T_CUST_DIM_49_ENT_NATI";
"CUST_DIM_50_ENT_NATI" "T_CUST_DIM_50_ENT_NATI";
"CUST_DIM_51_ENT_INSI" "T_CUST_DIM_51_ENT_INSI";
"CUST_DIM_52_ENT_INSIDE_REP_ID" "T_CUST_DIM_52_ENT_INSIDE_REP_";
"CUST_DIM_53_ENT_INSI" "T_CUST_DIM_53_ENT_INSI";
"CUST_DIM_54_ENT_FEDE" "T_CUST_DIM_54_ENT_FEDE";
"CUST_DIM_55_ENT_FEDERAL_REP_ID" "T_CUST_DIM_55_ENT_FEDERAL_REP_";
"CUST_DIM_56_ENT_FEDE" "T_CUST_DIM_56_ENT_FEDE";
"CUST_DIM_57_BTSR_TERR_NUM" "T_CUST_DIM_57_BTSR_TERR_NUM";
"CUST_DIM_58_BTSR_REP_ID" "T_CUST_DIM_58_BTSR_REP_ID";
"CUST_DIM_59_BTSR_REP_NAME" "T_CUST_DIM_59_BTSR_REP_NAME";
"CUST_DIM_60_BTA_TERR_NUM" "T_CUST_DIM_60_BTA_TERR_NUM";
"CUST_DIM_61_BTA_REP_ID" "T_CUST_DIM_61_BTA_REP_ID";
"CUST_DIM_62_BTA_REP_NAME" "T_CUST_DIM_62_BTA_REP_NAME";
"ORDER_FACT_0_ENROLL_ID" "T_ORDER_FACT_0_ENROLL_ID";
"ORDER_FACT_1_EVENT_ID" "T_ORDER_FACT_1_EVENT_ID";
"ORDER_FACT_2_CUST_ID" "T_ORDER_FACT_2_CUST_ID";
"ORDER_FACT_3_ENROLL_DATE" "T_ORDER_FACT_3_ENROLL_DATE";
"ORDER_FACT_4_KEYCODE" "T_ORDER_FACT_4_KEYCODE";
"ORDER_FACT_5_BOOK_DATE" "T_ORDER_FACT_5_BOOK_DATE";
"ORDER_FACT_6_REV_DATE" "T_ORDER_FACT_6_REV_DATE";
"ORDER_FACT_8_ENROLL_SOURCE" "T_ORDER_FACT_8_ENROLL_SOURCE";
"ORDER_FACT_9_QUANTITY" "T_ORDER_FACT_9_QUANTITY";
"ORDER_FACT_10_BOOK_AMT" "T_ORDER_FACT_10_BOOK_AMT";
"ORDER_FACT_11_CURR_CODE" "T_ORDER_FACT_11_CURR_CODE";
"ORDER_FACT_13_SALESPERSON" "T_ORDER_FACT_13_SALESPERSON";
"ORDER_FACT_15_OPPORTUNITY_ID" "T_ORDER_FACT_15_OPPORTUNITY_ID";
"ORDER_FACT_17_ORACLE_TRX_NUM" "T_ORDER_FACT_17_ORACLE_TRX_NUM";
"ORDER_FACT_22_GKDW_SOURCE" "T_ORDER_FACT_22_GKDW_SOURCE";
"ORDER_FACT_24_ZIP_CODE" "T_ORDER_FACT_24_ZIP_CODE";
"ORDER_FACT_26_COUNTRY" "T_ORDER_FACT_26_COUNTRY";
"ORDER_FACT_28_TERRITORY" "T_ORDER_FACT_28_TERRITORY";
"ORDER_FACT_29_REGION" "T_ORDER_FACT_29_REGION";
"ORDER_FACT_30_SALES_REP" "T_ORDER_FACT_30_SALES_REP";
"ORDER_FACT_31_REGION_REP" "T_ORDER_FACT_31_REGION_REP";
"ORDER_FACT_32_CREATION_DATE" "T_ORDER_FACT_32_CREATION_DATE";
"ORDER_FACT_33_LAST_UPDATE_DATE" "T_ORDER_FACT_33_LAST_UPDATE_DA";
"ORDER_FACT_34_ENROLL_STATUS" "T_ORDER_FACT_34_ENROLL_STATUS";
"ORDER_FACT_36_TXFEE_ID" "T_ORDER_FACT_36_TXFEE_ID";
"ORDER_FACT_37_BILL_DATE" "T_ORDER_FACT_37_BILL_DATE";
"ORDER_FA_39_ENROLL_S" "T_ORDER_FA_39_ENROLL_S";
"ORDER_FACT_40_FEE_TYPE" "T_ORDER_FACT_40_FEE_TYPE";
"ORDER_FA_41_ENROLL_S" "T_ORDER_FA_41_ENROLL_S";
"ORDER_FA_42_PP_SALES" "T_ORDER_FA_42_PP_SALES";
"ORDER_FACT_43_SOURCE" "T_ORDER_FACT_43_SOURCE";
"ORDER_FACT_44_BAL_DUE" "T_ORDER_FACT_44_BAL_DUE";
"ORDER_FACT_45_LIST_PRICE" "T_ORDER_FACT_45_LIST_PRICE";
"ORDER_FACT_46_PO_NUMBER" "T_ORDER_FACT_46_PO_NUMBER";
"ORDER_FACT_47_PPCARD_ID" "T_ORDER_FACT_47_PPCARD_ID";
"ORDER_FACT_48_PAYMENT_METHOD" "T_ORDER_FACT_48_PAYMENT_METHOD";
"ORDER_FACT_49_REG_CODE" "T_ORDER_FACT_49_REG_CODE";
"ORDER_FACT_50_CREATE_USER" "T_ORDER_FACT_50_CREATE_USER";
"ORDER_FACT_51_MODIFY_USER" "T_ORDER_FACT_51_MODIFY_USER";
"ORDER_FACT_52_ENROLL_TYPE" "T_ORDER_FACT_52_ENROLL_TYPE";
"ORDER_FACT_56_ATTENDEE_TYPE" "T_ORDER_FACT_56_ATTENDEE_TYPE";
"ORDER_FACT_57_CHECK_NUMBER" "T_ORDER_FACT_57_CHECK_NUMBER";
"ORDER_FACT_58_COMMENTS" "T_ORDER_FACT_58_COMMENTS";
"ORDER_FA_59_OB_NATIO" "T_ORDER_FA_59_OB_NATIO";
"ORDER_FA_60_OB_NATIO" "T_ORDER_FA_60_OB_NATIO";
"ORDER_FA_61_OB_NATIO" "T_ORDER_FA_61_OB_NATIO";
"ORDER_FACT_62_OB_TERR_NUM" "T_ORDER_FACT_62_OB_TERR_NUM";
"ORDER_FACT_63_OB_REP_ID" "T_ORDER_FACT_63_OB_REP_ID";
"ORDER_FACT_64_OB_REP_NAME" "T_ORDER_FACT_64_OB_REP_NAME";
"ORDER_FACT_65_OSR_TERR_NUM" "T_ORDER_FACT_65_OSR_TERR_NUM";
"ORDER_FACT_66_OSR_ID" "T_ORDER_FACT_66_OSR_ID";
"ORDER_FACT_67_OSR_REP_NAME" "T_ORDER_FACT_67_OSR_REP_NAME";
"ORDER_FA_68_ENT_NATI" "T_ORDER_FA_68_ENT_NATI";
"ORDER_FA_69_ENT_NATI" "T_ORDER_FA_69_ENT_NATI";
"ORDER_FA_70_ENT_NATI" "T_ORDER_FA_70_ENT_NATI";
"ORDER_FA_71_ENT_INSI" "T_ORDER_FA_71_ENT_INSI";
"ORDER_FA_72_ENT_INSI" "T_ORDER_FA_72_ENT_INSI";
"ORDER_FA_73_ENT_INSI" "T_ORDER_FA_73_ENT_INSI";
"ORDER_FA_74_ENT_FEDE" "T_ORDER_FA_74_ENT_FEDE";
"ORDER_FA_75_ENT_FEDE" "T_ORDER_FA_75_ENT_FEDE";
"ORDER_FA_76_ENT_FEDE" "T_ORDER_FA_76_ENT_FEDE";
"ORDER_FACT_77_BTSR_TERR_NUM" "T_ORDER_FACT_77_BTSR_TERR_NUM";
"ORDER_FACT_78_BTSR_REP_ID" "T_ORDER_FACT_78_BTSR_REP_ID";
"ORDER_FACT_79_BTSR_REP_NAME" "T_ORDER_FACT_79_BTSR_REP_NAME";
"ORDER_FACT_80_BTA_TERR_NUM" "T_ORDER_FACT_80_BTA_TERR_NUM";
"ORDER_FACT_81_BTA_REP_ID" "T_ORDER_FACT_81_BTA_REP_ID";
"ORDER_FACT_82_BTA_REP_NAME" "T_ORDER_FACT_82_BTA_REP_NAME";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "FLTR_ES"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_12_EVXEVENROLLID',0,80),
    p_value=>SUBSTRB("FLTR_12_EVXEVENROLLID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_7_EVXEVENTID',0,80),
    p_value=>SUBSTRB("FLTR_7_EVXEVENTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_8_ATTENDEECONTACTID',0,80),
    p_value=>SUBSTRB("FLTR_8_ATTENDEECONTACTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_9_CREATEDATE_HX',0,80),
    p_value=>SUBSTRB("FLTR_9_CREATEDATE_HX"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_3_CREATEDATE_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_3_CREATEDATE_TXFEE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVENT_DIM_37_EVENT_CHANNEL',0,80),
    p_value=>SUBSTRB("EVENT_DIM_37_EVENT_CHANNEL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVENT_DIM_43_EVENT_TYPE',0,80),
    p_value=>SUBSTRB("EVENT_DIM_43_EVENT_TYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_16_BILLINGDATE',0,80),
    p_value=>SUBSTRB("FLTR_16_BILLINGDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_13_EVXEVTICKETID',0,80),
    p_value=>SUBSTRB("FLTR_13_EVXEVTICKETID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVENT_DIM_6_START_DATE',0,80),
    p_value=>SUBSTRB("EVENT_DIM_6_START_DATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_15_ENROLLSOURCE',0,80),
    p_value=>SUBSTRB("FLTR_15_ENROLLSOURCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_10_ENROLLQTY',0,80),
    p_value=>SUBSTRB("FLTR_10_ENROLLQTY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_5_ACTUALAMOUNT',0,80),
    p_value=>SUBSTRB("FLTR_5_ACTUALAMOUNT"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_17_CURRENCYTYPE',0,80),
    p_value=>SUBSTRB("FLTR_17_CURRENCYTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_19_SOLDBYUSER',0,80),
    p_value=>SUBSTRB("FLTR_19_SOLDBYUSER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_30_OPPORTUNITYID',0,80),
    p_value=>SUBSTRB("FLTR_30_OPPORTUNITYID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_2_EVXEV_TXFEEID',0,80),
    p_value=>SUBSTRB("FLTR_2_EVXEV_TXFEEID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_2_2_ZIP_CODE',0,80),
    p_value=>SUBSTRB("EXPR_2_2_ZIP_CODE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVENT_DIM_20_COUNTRY',0,80),
    p_value=>SUBSTRB("EVENT_DIM_20_COUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_3_TERRITORY',0,80),
    p_value=>SUBSTRB("MARKET_DIM_3_TERRITORY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_4_REGION',0,80),
    p_value=>SUBSTRB("MARKET_DIM_4_REGION"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_5_SALES_REP',0,80),
    p_value=>SUBSTRB("MARKET_DIM_5_SALES_REP"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_6_REGION_MGR',0,80),
    p_value=>SUBSTRB("MARKET_DIM_6_REGION_MGR"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_4_MODIFYDATE_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_4_MODIFYDATE_TXFEE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_11_ENROLLSTATUS',0,80),
    p_value=>SUBSTRB("FLTR_11_ENROLLSTATUS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_14_ENROLLSTATUSDESC',0,80),
    p_value=>SUBSTRB("FLTR_14_ENROLLSTATUSDESC"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_20_FEETYPE',0,80),
    p_value=>SUBSTRB("FLTR_20_FEETYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_21_ENROLLSTATUSDATE',0,80),
    p_value=>SUBSTRB("FLTR_21_ENROLLSTATUSDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('PPCARD_DIM_17_SALES_ORDER_ID',0,80),
    p_value=>SUBSTRB("PPCARD_DIM_17_SALES_ORDER_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_24_SOURCE',0,80),
    p_value=>SUBSTRB("FLTR_24_SOURCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLING_6_BALANCEDUE',0,80),
    p_value=>SUBSTRB("EVXBILLING_6_BALANCEDUE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_31_METHOD',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_31_METHOD"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_61_EVXPPCARDID',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_61_EVXPPCARDID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_23_ACTUALRATE',0,80),
    p_value=>SUBSTRB("FLTR_23_ACTUALRATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_31_PONUMBER',0,80),
    p_value=>SUBSTRB("FLTR_31_PONUMBER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_27_CHANNEL',0,80),
    p_value=>SUBSTRB("FLTR_27_CHANNEL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_28_CREATEUSER_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_28_CREATEUSER_TXFEE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_29_MODIFYUSER_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_29_MODIFYUSER_TXFEE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_32_REVIEWTYPE',0,80),
    p_value=>SUBSTRB("FLTR_32_REVIEWTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_35_ATTENDEETYPE',0,80),
    p_value=>SUBSTRB("FLTR_35_ATTENDEETYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_27_CHECKNUMBER',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_27_CHECKNUMBER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_36_COMMENTS',0,80),
    p_value=>SUBSTRB("FLTR_36_COMMENTS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_39_OB_NATIO',0,80),
    p_value=>SUBSTRB("CUST_DIM_39_OB_NATIO"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_40_OB_NATIONAL_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_40_OB_NATIONAL_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_41_OB_NATIO',0,80),
    p_value=>SUBSTRB("CUST_DIM_41_OB_NATIO"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_42_OB_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_42_OB_TERR_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>47,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_43_OB_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_43_OB_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>48,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_44_OB_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_44_OB_REP_NAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>49,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_45_OSR_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_45_OSR_TERR_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>50,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_46_OSR_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_46_OSR_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>51,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_47_OSR_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_47_OSR_REP_NAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>52,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_48_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_48_ENT_NATI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>53,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_49_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_49_ENT_NATI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>54,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_50_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_50_ENT_NATI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>55,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_51_ENT_INSI',0,80),
    p_value=>SUBSTRB("CUST_DIM_51_ENT_INSI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>56,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_52_ENT_INSIDE_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_52_ENT_INSIDE_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>57,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_53_ENT_INSI',0,80),
    p_value=>SUBSTRB("CUST_DIM_53_ENT_INSI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>58,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_54_ENT_FEDE',0,80),
    p_value=>SUBSTRB("CUST_DIM_54_ENT_FEDE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>59,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_55_ENT_FEDERAL_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_55_ENT_FEDERAL_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>60,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_56_ENT_FEDE',0,80),
    p_value=>SUBSTRB("CUST_DIM_56_ENT_FEDE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>61,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_57_BTSR_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_57_BTSR_TERR_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>62,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_58_BTSR_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_58_BTSR_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>63,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_59_BTSR_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_59_BTSR_REP_NAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>64,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_60_BTA_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_60_BTA_TERR_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>65,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_61_BTA_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_61_BTA_REP_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>66,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_62_BTA_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_62_BTA_REP_NAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "FLTR_ES";

---------------------------------------------------------------------------
-- Procedure "FLTR_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "FLTR_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 12: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "FLTR_ES"(p_error_index);
  END IF;
END "FLTR_ER";



---------------------------------------------------------------------------
-- Procedure "FLTR_SU" opens and initializes data source
-- for map "FLTR_p"
---------------------------------------------------------------------------
PROCEDURE "FLTR_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "FLTR_c"%ISOPEN) THEN
    OPEN "FLTR_c";
  END IF;
  get_read_success := TRUE;
END "FLTR_SU";

---------------------------------------------------------------------------
-- Procedure "FLTR_RD" fetches a bulk of rows from
--   the data source for map "FLTR_p"
---------------------------------------------------------------------------
PROCEDURE "FLTR_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "FLTR_12_EVXEVENROLLID".DELETE;
    "FLTR_7_EVXEVENTID".DELETE;
    "FLTR_8_ATTENDEECONTACTID".DELETE;
    "FLTR_9_CREATEDATE_HX".DELETE;
    "FLTR_3_CREATEDATE_TXFEE".DELETE;
    "EVENT_DIM_37_EVENT_CHANNEL".DELETE;
    "EVENT_DIM_43_EVENT_TYPE".DELETE;
    "FLTR_16_BILLINGDATE".DELETE;
    "FLTR_13_EVXEVTICKETID".DELETE;
    "EVENT_DIM_6_START_DATE".DELETE;
    "FLTR_15_ENROLLSOURCE".DELETE;
    "FLTR_10_ENROLLQTY".DELETE;
    "FLTR_5_ACTUALAMOUNT".DELETE;
    "FLTR_17_CURRENCYTYPE".DELETE;
    "FLTR_19_SOLDBYUSER".DELETE;
    "FLTR_30_OPPORTUNITYID".DELETE;
    "FLTR_2_EVXEV_TXFEEID".DELETE;
    "EXPR_2_2_ZIP_CODE".DELETE;
    "EVENT_DIM_20_COUNTRY".DELETE;
    "MARKET_DIM_3_TERRITORY".DELETE;
    "MARKET_DIM_4_REGION".DELETE;
    "MARKET_DIM_5_SALES_REP".DELETE;
    "MARKET_DIM_6_REGION_MGR".DELETE;
    "FLTR_4_MODIFYDATE_TXFEE".DELETE;
    "FLTR_11_ENROLLSTATUS".DELETE;
    "FLTR_14_ENROLLSTATUSDESC".DELETE;
    "FLTR_20_FEETYPE".DELETE;
    "FLTR_21_ENROLLSTATUSDATE".DELETE;
    "PPCARD_DIM_17_SALES_ORDER_ID".DELETE;
    "FLTR_24_SOURCE".DELETE;
    "EVXBILLING_6_BALANCEDUE".DELETE;
    "EVXBILLPAYMENT_31_METHOD".DELETE;
    "EVXBILLPAYMENT_61_EVXPPCARDID".DELETE;
    "FLTR_23_ACTUALRATE".DELETE;
    "FLTR_31_PONUMBER".DELETE;
    "FLTR_27_CHANNEL".DELETE;
    "FLTR_28_CREATEUSER_TXFEE".DELETE;
    "FLTR_29_MODIFYUSER_TXFEE".DELETE;
    "FLTR_32_REVIEWTYPE".DELETE;
    "FLTR_35_ATTENDEETYPE".DELETE;
    "EVXBILLPAYMENT_27_CHECKNUMBER".DELETE;
    "FLTR_36_COMMENTS".DELETE;
    "CUST_DIM_39_OB_NATIO".DELETE;
    "CUST_DIM_40_OB_NATIONAL_REP_ID".DELETE;
    "CUST_DIM_41_OB_NATIO".DELETE;
    "CUST_DIM_42_OB_TERR_NUM".DELETE;
    "CUST_DIM_43_OB_REP_ID".DELETE;
    "CUST_DIM_44_OB_REP_NAME".DELETE;
    "CUST_DIM_45_OSR_TERR_NUM".DELETE;
    "CUST_DIM_46_OSR_ID".DELETE;
    "CUST_DIM_47_OSR_REP_NAME".DELETE;
    "CUST_DIM_48_ENT_NATI".DELETE;
    "CUST_DIM_49_ENT_NATI".DELETE;
    "CUST_DIM_50_ENT_NATI".DELETE;
    "CUST_DIM_51_ENT_INSI".DELETE;
    "CUST_DIM_52_ENT_INSIDE_REP_ID".DELETE;
    "CUST_DIM_53_ENT_INSI".DELETE;
    "CUST_DIM_54_ENT_FEDE".DELETE;
    "CUST_DIM_55_ENT_FEDERAL_REP_ID".DELETE;
    "CUST_DIM_56_ENT_FEDE".DELETE;
    "CUST_DIM_57_BTSR_TERR_NUM".DELETE;
    "CUST_DIM_58_BTSR_REP_ID".DELETE;
    "CUST_DIM_59_BTSR_REP_NAME".DELETE;
    "CUST_DIM_60_BTA_TERR_NUM".DELETE;
    "CUST_DIM_61_BTA_REP_ID".DELETE;
    "CUST_DIM_62_BTA_REP_NAME".DELETE;

    FETCH
      "FLTR_c"
    BULK COLLECT INTO
      "FLTR_12_EVXEVENROLLID",
      "FLTR_7_EVXEVENTID",
      "FLTR_8_ATTENDEECONTACTID",
      "FLTR_9_CREATEDATE_HX",
      "FLTR_3_CREATEDATE_TXFEE",
      "EVENT_DIM_37_EVENT_CHANNEL",
      "EVENT_DIM_43_EVENT_TYPE",
      "FLTR_16_BILLINGDATE",
      "FLTR_13_EVXEVTICKETID",
      "EVENT_DIM_6_START_DATE",
      "FLTR_15_ENROLLSOURCE",
      "FLTR_10_ENROLLQTY",
      "FLTR_5_ACTUALAMOUNT",
      "FLTR_17_CURRENCYTYPE",
      "FLTR_19_SOLDBYUSER",
      "FLTR_30_OPPORTUNITYID",
      "FLTR_2_EVXEV_TXFEEID",
      "EXPR_2_2_ZIP_CODE",
      "EVENT_DIM_20_COUNTRY",
      "MARKET_DIM_3_TERRITORY",
      "MARKET_DIM_4_REGION",
      "MARKET_DIM_5_SALES_REP",
      "MARKET_DIM_6_REGION_MGR",
      "FLTR_4_MODIFYDATE_TXFEE",
      "FLTR_11_ENROLLSTATUS",
      "FLTR_14_ENROLLSTATUSDESC",
      "FLTR_20_FEETYPE",
      "FLTR_21_ENROLLSTATUSDATE",
      "PPCARD_DIM_17_SALES_ORDER_ID",
      "FLTR_24_SOURCE",
      "EVXBILLING_6_BALANCEDUE",
      "EVXBILLPAYMENT_31_METHOD",
      "EVXBILLPAYMENT_61_EVXPPCARDID",
      "FLTR_23_ACTUALRATE",
      "FLTR_31_PONUMBER",
      "FLTR_27_CHANNEL",
      "FLTR_28_CREATEUSER_TXFEE",
      "FLTR_29_MODIFYUSER_TXFEE",
      "FLTR_32_REVIEWTYPE",
      "FLTR_35_ATTENDEETYPE",
      "EVXBILLPAYMENT_27_CHECKNUMBER",
      "FLTR_36_COMMENTS",
      "CUST_DIM_39_OB_NATIO",
      "CUST_DIM_40_OB_NATIONAL_REP_ID",
      "CUST_DIM_41_OB_NATIO",
      "CUST_DIM_42_OB_TERR_NUM",
      "CUST_DIM_43_OB_REP_ID",
      "CUST_DIM_44_OB_REP_NAME",
      "CUST_DIM_45_OSR_TERR_NUM",
      "CUST_DIM_46_OSR_ID",
      "CUST_DIM_47_OSR_REP_NAME",
      "CUST_DIM_48_ENT_NATI",
      "CUST_DIM_49_ENT_NATI",
      "CUST_DIM_50_ENT_NATI",
      "CUST_DIM_51_ENT_INSI",
      "CUST_DIM_52_ENT_INSIDE_REP_ID",
      "CUST_DIM_53_ENT_INSI",
      "CUST_DIM_54_ENT_FEDE",
      "CUST_DIM_55_ENT_FEDERAL_REP_ID",
      "CUST_DIM_56_ENT_FEDE",
      "CUST_DIM_57_BTSR_TERR_NUM",
      "CUST_DIM_58_BTSR_REP_ID",
      "CUST_DIM_59_BTSR_REP_NAME",
      "CUST_DIM_60_BTA_TERR_NUM",
      "CUST_DIM_61_BTA_REP_ID",
      "CUST_DIM_62_BTA_REP_NAME"
    LIMIT get_bulk_size;

    IF "FLTR_c"%NOTFOUND AND "FLTR_12_EVXEVENROLLID".COUNT = 0 THEN  
      RETURN;
    END IF;
    
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "FLTR_12_EVXEVENROLLID".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;

    get_map_selected := get_map_selected + "FLTR_12_EVXEVENROLLID".COUNT;
    
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
        last_error_message := SQLERRM;
        dbms_output.put_line(last_error_number);
        dbms_output.put_line(last_error_message);
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 13: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "FLTR_RD";

---------------------------------------------------------------------------
-- Procedure "FLTR_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "FLTR_DML"(si NUMBER, firstround BOOLEAN) IS
  "ORDER_FACT_ins0" NUMBER := "ORDER_FACT_ins";
  "ORDER_FACT_upd0" NUMBER := "ORDER_FACT_upd";
  BEGIN
  
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  
  IF NOT "ORDER_FACT_St" THEN
   
  -- Update/Insert DML for "ORDER_FACT"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"ORDER_FACT"';
    get_audit_detail_id := "ORDER_FACT_id";
    "ORDER_FACT_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    
    IF "ORDER_FACT_i" > get_bulk_size 
   OR "FLTR_c"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "ORDER_FACT_si".."ORDER_FACT_i" - 1 
                
            UPDATE
              "ORDER_FACT"
            SET
  
  						"ORDER_FACT"."ENROLL_ID" = "ORDER_FACT_0_ENROLL_ID"
  (i),						"ORDER_FACT"."EVENT_ID" = "ORDER_FACT_1_EVENT_ID"
  (i),						"ORDER_FACT"."CUST_ID" = "ORDER_FACT_2_CUST_ID"
  (i),						"ORDER_FACT"."ENROLL_DATE" = "ORDER_FACT_3_ENROLL_DATE"
  (i),						"ORDER_FACT"."KEYCODE" = "ORDER_FACT_4_KEYCODE"
  (i),						"ORDER_FACT"."BOOK_DATE" = "ORDER_FACT_5_BOOK_DATE"
  (i),						"ORDER_FACT"."REV_DATE" = "ORDER_FACT_6_REV_DATE"
  (i),						"ORDER_FACT"."ENROLL_SOURCE" = "ORDER_FACT_8_ENROLL_SOURCE"
  (i),						"ORDER_FACT"."QUANTITY" = "ORDER_FACT_9_QUANTITY"
  (i),						"ORDER_FACT"."BOOK_AMT" = "ORDER_FACT_10_BOOK_AMT"
  (i),						"ORDER_FACT"."CURR_CODE" = "ORDER_FACT_11_CURR_CODE"
  (i),						"ORDER_FACT"."SALESPERSON" = "ORDER_FACT_13_SALESPERSON"
  (i),						"ORDER_FACT"."OPPORTUNITY_ID" = "ORDER_FACT_15_OPPORTUNITY_ID"
  (i),						"ORDER_FACT"."ORACLE_TRX_NUM" = "ORDER_FACT_17_ORACLE_TRX_NUM"
  (i),						"ORDER_FACT"."GKDW_SOURCE" = "ORDER_FACT_22_GKDW_SOURCE"
  (i),						"ORDER_FACT"."ZIP_CODE" = "ORDER_FACT_24_ZIP_CODE"
  (i),						"ORDER_FACT"."COUNTRY" = "ORDER_FACT_26_COUNTRY"
  (i),						"ORDER_FACT"."TERRITORY" = "ORDER_FACT_28_TERRITORY"
  (i),						"ORDER_FACT"."REGION" = "ORDER_FACT_29_REGION"
  (i),						"ORDER_FACT"."SALES_REP" = "ORDER_FACT_30_SALES_REP"
  (i),						"ORDER_FACT"."REGION_REP" = "ORDER_FACT_31_REGION_REP"
  (i),						"ORDER_FACT"."CREATION_DATE" = "ORDER_FACT_32_CREATION_DATE"
  (i),						"ORDER_FACT"."LAST_UPDATE_DATE" = "ORDER_FACT_33_LAST_UPDATE_DATE"
  (i),						"ORDER_FACT"."ENROLL_STATUS" = "ORDER_FACT_34_ENROLL_STATUS"
  (i),						"ORDER_FACT"."BILL_DATE" = "ORDER_FACT_37_BILL_DATE"
  (i),						"ORDER_FACT"."ENROLL_STATUS_DESC" = "ORDER_FA_39_ENROLL_S"
  (i),						"ORDER_FACT"."FEE_TYPE" = "ORDER_FACT_40_FEE_TYPE"
  (i),						"ORDER_FACT"."ENROLL_STATUS_DATE" = "ORDER_FA_41_ENROLL_S"
  (i),						"ORDER_FACT"."PP_SALES_ORDER_ID" = "ORDER_FA_42_PP_SALES"
  (i),						"ORDER_FACT"."SOURCE" = "ORDER_FACT_43_SOURCE"
  (i),						"ORDER_FACT"."BAL_DUE" = "ORDER_FACT_44_BAL_DUE"
  (i),						"ORDER_FACT"."LIST_PRICE" = "ORDER_FACT_45_LIST_PRICE"
  (i),						"ORDER_FACT"."PO_NUMBER" = "ORDER_FACT_46_PO_NUMBER"
  (i),						"ORDER_FACT"."PPCARD_ID" = "ORDER_FACT_47_PPCARD_ID"
  (i),						"ORDER_FACT"."PAYMENT_METHOD" = "ORDER_FACT_48_PAYMENT_METHOD"
  (i),						"ORDER_FACT"."REG_CODE" = "ORDER_FACT_49_REG_CODE"
  (i),						"ORDER_FACT"."CREATE_USER" = "ORDER_FACT_50_CREATE_USER"
  (i),						"ORDER_FACT"."MODIFY_USER" = "ORDER_FACT_51_MODIFY_USER"
  (i),						"ORDER_FACT"."ENROLL_TYPE" = "ORDER_FACT_52_ENROLL_TYPE"
  (i),						"ORDER_FACT"."ATTENDEE_TYPE" = "ORDER_FACT_56_ATTENDEE_TYPE"
  (i),						"ORDER_FACT"."CHECK_NUMBER" = "ORDER_FACT_57_CHECK_NUMBER"
  (i),						"ORDER_FACT"."COMMENTS" = "ORDER_FACT_58_COMMENTS"
  (i),						"ORDER_FACT"."OB_NATIONAL_TERR_NUM" = "ORDER_FA_59_OB_NATIO"
  (i),						"ORDER_FACT"."OB_NATIONAL_REP_ID" = "ORDER_FA_60_OB_NATIO"
  (i),						"ORDER_FACT"."OB_NATIONAL_REP_NAME" = "ORDER_FA_61_OB_NATIO"
  (i),						"ORDER_FACT"."OB_TERR_NUM" = "ORDER_FACT_62_OB_TERR_NUM"
  (i),						"ORDER_FACT"."OB_REP_ID" = "ORDER_FACT_63_OB_REP_ID"
  (i),						"ORDER_FACT"."OB_REP_NAME" = "ORDER_FACT_64_OB_REP_NAME"
  (i),						"ORDER_FACT"."OSR_TERR_NUM" = "ORDER_FACT_65_OSR_TERR_NUM"
  (i),						"ORDER_FACT"."OSR_ID" = "ORDER_FACT_66_OSR_ID"
  (i),						"ORDER_FACT"."OSR_REP_NAME" = "ORDER_FACT_67_OSR_REP_NAME"
  (i),						"ORDER_FACT"."ENT_NATIONAL_TERR_NUM" = "ORDER_FA_68_ENT_NATI"
  (i),						"ORDER_FACT"."ENT_NATIONAL_REP_ID" = "ORDER_FA_69_ENT_NATI"
  (i),						"ORDER_FACT"."ENT_NATIONAL_REP_NAME" = "ORDER_FA_70_ENT_NATI"
  (i),						"ORDER_FACT"."ENT_INSIDE_TERR_NUM" = "ORDER_FA_71_ENT_INSI"
  (i),						"ORDER_FACT"."ENT_INSIDE_REP_ID" = "ORDER_FA_72_ENT_INSI"
  (i),						"ORDER_FACT"."ENT_INSIDE_REP_NAME" = "ORDER_FA_73_ENT_INSI"
  (i),						"ORDER_FACT"."ENT_FEDERAL_TERR_NUM" = "ORDER_FA_74_ENT_FEDE"
  (i),						"ORDER_FACT"."ENT_FEDERAL_REP_ID" = "ORDER_FA_75_ENT_FEDE"
  (i),						"ORDER_FACT"."ENT_FEDERAL_REP_NAME" = "ORDER_FA_76_ENT_FEDE"
  (i),						"ORDER_FACT"."BTSR_TERR_NUM" = "ORDER_FACT_77_BTSR_TERR_NUM"
  (i),						"ORDER_FACT"."BTSR_REP_ID" = "ORDER_FACT_78_BTSR_REP_ID"
  (i),						"ORDER_FACT"."BTSR_REP_NAME" = "ORDER_FACT_79_BTSR_REP_NAME"
  (i),						"ORDER_FACT"."BTA_TERR_NUM" = "ORDER_FACT_80_BTA_TERR_NUM"
  (i),						"ORDER_FACT"."BTA_REP_ID" = "ORDER_FACT_81_BTA_REP_ID"
  (i),						"ORDER_FACT"."BTA_REP_NAME" = "ORDER_FACT_82_BTA_REP_NAME"
  (i)
    
            WHERE
  
  						"ORDER_FACT"."TXFEE_ID" = "ORDER_FACT_36_TXFEE_ID"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "ORDER_FACT_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "ORDER_FACT_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "ORDER_FACT_upd" := "ORDER_FACT_upd" + get_rowid.COUNT;
          "ORDER_FACT_si" := "ORDER_FACT_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "ORDER_FACT_si".."ORDER_FACT_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "ORDER_FACT_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "ORDER_FACT_upd" := "ORDER_FACT_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "ORDER_FACT_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "ORDER_FACT"
                SET
  
  								"ORDER_FACT"."ENROLL_ID" = "ORDER_FACT_0_ENROLL_ID"
  (last_successful_index),								"ORDER_FACT"."EVENT_ID" = "ORDER_FACT_1_EVENT_ID"
  (last_successful_index),								"ORDER_FACT"."CUST_ID" = "ORDER_FACT_2_CUST_ID"
  (last_successful_index),								"ORDER_FACT"."ENROLL_DATE" = "ORDER_FACT_3_ENROLL_DATE"
  (last_successful_index),								"ORDER_FACT"."KEYCODE" = "ORDER_FACT_4_KEYCODE"
  (last_successful_index),								"ORDER_FACT"."BOOK_DATE" = "ORDER_FACT_5_BOOK_DATE"
  (last_successful_index),								"ORDER_FACT"."REV_DATE" = "ORDER_FACT_6_REV_DATE"
  (last_successful_index),								"ORDER_FACT"."ENROLL_SOURCE" = "ORDER_FACT_8_ENROLL_SOURCE"
  (last_successful_index),								"ORDER_FACT"."QUANTITY" = "ORDER_FACT_9_QUANTITY"
  (last_successful_index),								"ORDER_FACT"."BOOK_AMT" = "ORDER_FACT_10_BOOK_AMT"
  (last_successful_index),								"ORDER_FACT"."CURR_CODE" = "ORDER_FACT_11_CURR_CODE"
  (last_successful_index),								"ORDER_FACT"."SALESPERSON" = "ORDER_FACT_13_SALESPERSON"
  (last_successful_index),								"ORDER_FACT"."OPPORTUNITY_ID" = "ORDER_FACT_15_OPPORTUNITY_ID"
  (last_successful_index),								"ORDER_FACT"."ORACLE_TRX_NUM" = "ORDER_FACT_17_ORACLE_TRX_NUM"
  (last_successful_index),								"ORDER_FACT"."GKDW_SOURCE" = "ORDER_FACT_22_GKDW_SOURCE"
  (last_successful_index),								"ORDER_FACT"."ZIP_CODE" = "ORDER_FACT_24_ZIP_CODE"
  (last_successful_index),								"ORDER_FACT"."COUNTRY" = "ORDER_FACT_26_COUNTRY"
  (last_successful_index),								"ORDER_FACT"."TERRITORY" = "ORDER_FACT_28_TERRITORY"
  (last_successful_index),								"ORDER_FACT"."REGION" = "ORDER_FACT_29_REGION"
  (last_successful_index),								"ORDER_FACT"."SALES_REP" = "ORDER_FACT_30_SALES_REP"
  (last_successful_index),								"ORDER_FACT"."REGION_REP" = "ORDER_FACT_31_REGION_REP"
  (last_successful_index),								"ORDER_FACT"."CREATION_DATE" = "ORDER_FACT_32_CREATION_DATE"
  (last_successful_index),								"ORDER_FACT"."LAST_UPDATE_DATE" = "ORDER_FACT_33_LAST_UPDATE_DATE"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS" = "ORDER_FACT_34_ENROLL_STATUS"
  (last_successful_index),								"ORDER_FACT"."BILL_DATE" = "ORDER_FACT_37_BILL_DATE"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS_DESC" = "ORDER_FA_39_ENROLL_S"
  (last_successful_index),								"ORDER_FACT"."FEE_TYPE" = "ORDER_FACT_40_FEE_TYPE"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS_DATE" = "ORDER_FA_41_ENROLL_S"
  (last_successful_index),								"ORDER_FACT"."PP_SALES_ORDER_ID" = "ORDER_FA_42_PP_SALES"
  (last_successful_index),								"ORDER_FACT"."SOURCE" = "ORDER_FACT_43_SOURCE"
  (last_successful_index),								"ORDER_FACT"."BAL_DUE" = "ORDER_FACT_44_BAL_DUE"
  (last_successful_index),								"ORDER_FACT"."LIST_PRICE" = "ORDER_FACT_45_LIST_PRICE"
  (last_successful_index),								"ORDER_FACT"."PO_NUMBER" = "ORDER_FACT_46_PO_NUMBER"
  (last_successful_index),								"ORDER_FACT"."PPCARD_ID" = "ORDER_FACT_47_PPCARD_ID"
  (last_successful_index),								"ORDER_FACT"."PAYMENT_METHOD" = "ORDER_FACT_48_PAYMENT_METHOD"
  (last_successful_index),								"ORDER_FACT"."REG_CODE" = "ORDER_FACT_49_REG_CODE"
  (last_successful_index),								"ORDER_FACT"."CREATE_USER" = "ORDER_FACT_50_CREATE_USER"
  (last_successful_index),								"ORDER_FACT"."MODIFY_USER" = "ORDER_FACT_51_MODIFY_USER"
  (last_successful_index),								"ORDER_FACT"."ENROLL_TYPE" = "ORDER_FACT_52_ENROLL_TYPE"
  (last_successful_index),								"ORDER_FACT"."ATTENDEE_TYPE" = "ORDER_FACT_56_ATTENDEE_TYPE"
  (last_successful_index),								"ORDER_FACT"."CHECK_NUMBER" = "ORDER_FACT_57_CHECK_NUMBER"
  (last_successful_index),								"ORDER_FACT"."COMMENTS" = "ORDER_FACT_58_COMMENTS"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_TERR_NUM" = "ORDER_FA_59_OB_NATIO"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_REP_ID" = "ORDER_FA_60_OB_NATIO"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_REP_NAME" = "ORDER_FA_61_OB_NATIO"
  (last_successful_index),								"ORDER_FACT"."OB_TERR_NUM" = "ORDER_FACT_62_OB_TERR_NUM"
  (last_successful_index),								"ORDER_FACT"."OB_REP_ID" = "ORDER_FACT_63_OB_REP_ID"
  (last_successful_index),								"ORDER_FACT"."OB_REP_NAME" = "ORDER_FACT_64_OB_REP_NAME"
  (last_successful_index),								"ORDER_FACT"."OSR_TERR_NUM" = "ORDER_FACT_65_OSR_TERR_NUM"
  (last_successful_index),								"ORDER_FACT"."OSR_ID" = "ORDER_FACT_66_OSR_ID"
  (last_successful_index),								"ORDER_FACT"."OSR_REP_NAME" = "ORDER_FACT_67_OSR_REP_NAME"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_TERR_NUM" = "ORDER_FA_68_ENT_NATI"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_REP_ID" = "ORDER_FA_69_ENT_NATI"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_REP_NAME" = "ORDER_FA_70_ENT_NATI"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_TERR_NUM" = "ORDER_FA_71_ENT_INSI"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_REP_ID" = "ORDER_FA_72_ENT_INSI"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_REP_NAME" = "ORDER_FA_73_ENT_INSI"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_TERR_NUM" = "ORDER_FA_74_ENT_FEDE"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_REP_ID" = "ORDER_FA_75_ENT_FEDE"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_REP_NAME" = "ORDER_FA_76_ENT_FEDE"
  (last_successful_index),								"ORDER_FACT"."BTSR_TERR_NUM" = "ORDER_FACT_77_BTSR_TERR_NUM"
  (last_successful_index),								"ORDER_FACT"."BTSR_REP_ID" = "ORDER_FACT_78_BTSR_REP_ID"
  (last_successful_index),								"ORDER_FACT"."BTSR_REP_NAME" = "ORDER_FACT_79_BTSR_REP_NAME"
  (last_successful_index),								"ORDER_FACT"."BTA_TERR_NUM" = "ORDER_FACT_80_BTA_TERR_NUM"
  (last_successful_index),								"ORDER_FACT"."BTA_REP_ID" = "ORDER_FACT_81_BTA_REP_ID"
  (last_successful_index),								"ORDER_FACT"."BTA_REP_NAME" = "ORDER_FACT_82_BTA_REP_NAME"
  (last_successful_index)
  
                WHERE
  
  								"ORDER_FACT"."TXFEE_ID" = "ORDER_FACT_36_TXFEE_ID"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "ORDER_FACT_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_ID"',0,80),SUBSTRB("ORDER_FACT_0_ENROLL_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."EVENT_ID"',0,80),SUBSTRB("ORDER_FACT_1_EVENT_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("ORDER_FACT_2_CUST_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_DATE"',0,80),SUBSTRB("ORDER_FACT_3_ENROLL_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("ORDER_FACT_4_KEYCODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("ORDER_FACT_5_BOOK_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("ORDER_FACT_6_REV_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_SOURCE"',0,80),SUBSTRB("ORDER_FACT_8_ENROLL_SOURCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("ORDER_FACT_9_QUANTITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("ORDER_FACT_10_BOOK_AMT"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("ORDER_FACT_11_CURR_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("ORDER_FACT_13_SALESPERSON"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("ORDER_FACT_15_OPPORTUNITY_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ORACLE_TRX_NUM"',0,80),SUBSTRB("ORDER_FACT_17_ORACLE_TRX_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("ORDER_FACT_22_GKDW_SOURCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ZIP_CODE"',0,80),SUBSTRB("ORDER_FACT_24_ZIP_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("ORDER_FACT_26_COUNTRY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("ORDER_FACT_28_TERRITORY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION"',0,80),SUBSTRB("ORDER_FACT_29_REGION"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("ORDER_FACT_30_SALES_REP"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("ORDER_FACT_31_REGION_REP"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("ORDER_FACT_32_CREATION_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("ORDER_FACT_33_LAST_UPDATE_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS"',0,80),SUBSTRB("ORDER_FACT_34_ENROLL_STATUS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("ORDER_FACT_37_BILL_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DESC"',0,80),SUBSTRB("ORDER_FA_39_ENROLL_S"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."FEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_40_FEE_TYPE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DATE"',0,80),SUBSTRB("ORDER_FA_41_ENROLL_S"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("ORDER_FA_42_PP_SALES"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SOURCE"',0,80),SUBSTRB("ORDER_FACT_43_SOURCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BAL_DUE"',0,80),SUBSTRB("ORDER_FACT_44_BAL_DUE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LIST_PRICE"',0,80),SUBSTRB("ORDER_FACT_45_LIST_PRICE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("ORDER_FACT_46_PO_NUMBER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("ORDER_FACT_47_PPCARD_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("ORDER_FACT_48_PAYMENT_METHOD"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REG_CODE"',0,80),SUBSTRB("ORDER_FACT_49_REG_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATE_USER"',0,80),SUBSTRB("ORDER_FACT_50_CREATE_USER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."MODIFY_USER"',0,80),SUBSTRB("ORDER_FACT_51_MODIFY_USER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_TYPE"',0,80),SUBSTRB("ORDER_FACT_52_ENROLL_TYPE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ATTENDEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_56_ATTENDEE_TYPE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CHECK_NUMBER"',0,80),SUBSTRB("ORDER_FACT_57_CHECK_NUMBER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COMMENTS"',0,80),SUBSTRB("ORDER_FACT_58_COMMENTS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_59_OB_NATIO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_60_OB_NATIO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_61_OB_NATIO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_62_OB_TERR_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_ID"',0,80),SUBSTRB("ORDER_FACT_63_OB_REP_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_64_OB_REP_NAME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_65_OSR_TERR_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_ID"',0,80),SUBSTRB("ORDER_FACT_66_OSR_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_67_OSR_REP_NAME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_68_ENT_NATI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_69_ENT_NATI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_70_ENT_NATI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_71_ENT_INSI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_ID"',0,80),SUBSTRB("ORDER_FA_72_ENT_INSI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_NAME"',0,80),SUBSTRB("ORDER_FA_73_ENT_INSI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_74_ENT_FEDE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_75_ENT_FEDE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_76_ENT_FEDE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_77_BTSR_TERR_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_ID"',0,80),SUBSTRB("ORDER_FACT_78_BTSR_REP_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_79_BTSR_REP_NAME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_80_BTA_TERR_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_ID"',0,80),SUBSTRB("ORDER_FACT_81_BTA_REP_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_82_BTA_REP_NAME"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
                
                IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "ORDER_FACT_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "ORDER_FACT_si" >= "ORDER_FACT_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "ORDER_FACT_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
       
    FOR j IN 1..update_bulk.COUNT LOOP
      
      dbms_output.put_line("ORDER_FACT_0_ENROLL_ID"(update_bulk(j)));
      
      insert_bulk_index := insert_bulk_index + 1;
  		"ORDER_FACT_0_ENROLL_ID"(insert_bulk_index) := "ORDER_FACT_0_ENROLL_ID"(update_bulk(j));
  		"ORDER_FACT_1_EVENT_ID"(insert_bulk_index) := "ORDER_FACT_1_EVENT_ID"(update_bulk(j));
  		"ORDER_FACT_2_CUST_ID"(insert_bulk_index) := "ORDER_FACT_2_CUST_ID"(update_bulk(j));
  		"ORDER_FACT_3_ENROLL_DATE"(insert_bulk_index) := "ORDER_FACT_3_ENROLL_DATE"(update_bulk(j));
  		"ORDER_FACT_4_KEYCODE"(insert_bulk_index) := "ORDER_FACT_4_KEYCODE"(update_bulk(j));
  		"ORDER_FACT_5_BOOK_DATE"(insert_bulk_index) := "ORDER_FACT_5_BOOK_DATE"(update_bulk(j));
  		"ORDER_FACT_6_REV_DATE"(insert_bulk_index) := "ORDER_FACT_6_REV_DATE"(update_bulk(j));
  		"ORDER_FACT_8_ENROLL_SOURCE"(insert_bulk_index) := "ORDER_FACT_8_ENROLL_SOURCE"(update_bulk(j));
  		"ORDER_FACT_9_QUANTITY"(insert_bulk_index) := "ORDER_FACT_9_QUANTITY"(update_bulk(j));
  		"ORDER_FACT_10_BOOK_AMT"(insert_bulk_index) := "ORDER_FACT_10_BOOK_AMT"(update_bulk(j));
  		"ORDER_FACT_11_CURR_CODE"(insert_bulk_index) := "ORDER_FACT_11_CURR_CODE"(update_bulk(j));
  		"ORDER_FACT_13_SALESPERSON"(insert_bulk_index) := "ORDER_FACT_13_SALESPERSON"(update_bulk(j));
  		"ORDER_FACT_15_OPPORTUNITY_ID"(insert_bulk_index) := "ORDER_FACT_15_OPPORTUNITY_ID"(update_bulk(j));
  		"ORDER_FACT_17_ORACLE_TRX_NUM"(insert_bulk_index) := "ORDER_FACT_17_ORACLE_TRX_NUM"(update_bulk(j));
  		"ORDER_FACT_22_GKDW_SOURCE"(insert_bulk_index) := "ORDER_FACT_22_GKDW_SOURCE"(update_bulk(j));
  		"ORDER_FACT_24_ZIP_CODE"(insert_bulk_index) := "ORDER_FACT_24_ZIP_CODE"(update_bulk(j));
  		"ORDER_FACT_26_COUNTRY"(insert_bulk_index) := "ORDER_FACT_26_COUNTRY"(update_bulk(j));
  		"ORDER_FACT_28_TERRITORY"(insert_bulk_index) := "ORDER_FACT_28_TERRITORY"(update_bulk(j));
  		"ORDER_FACT_29_REGION"(insert_bulk_index) := "ORDER_FACT_29_REGION"(update_bulk(j));
  		"ORDER_FACT_30_SALES_REP"(insert_bulk_index) := "ORDER_FACT_30_SALES_REP"(update_bulk(j));
  		"ORDER_FACT_31_REGION_REP"(insert_bulk_index) := "ORDER_FACT_31_REGION_REP"(update_bulk(j));
  		"ORDER_FACT_32_CREATION_DATE"(insert_bulk_index) := "ORDER_FACT_32_CREATION_DATE"(update_bulk(j));
  		"ORDER_FACT_33_LAST_UPDATE_DATE"(insert_bulk_index) := "ORDER_FACT_33_LAST_UPDATE_DATE"(update_bulk(j));
  		"ORDER_FACT_34_ENROLL_STATUS"(insert_bulk_index) := "ORDER_FACT_34_ENROLL_STATUS"(update_bulk(j));
  		"ORDER_FACT_36_TXFEE_ID"(insert_bulk_index) := "ORDER_FACT_36_TXFEE_ID"(update_bulk(j));
  		"ORDER_FACT_37_BILL_DATE"(insert_bulk_index) := "ORDER_FACT_37_BILL_DATE"(update_bulk(j));
  		"ORDER_FA_39_ENROLL_S"(insert_bulk_index) := "ORDER_FA_39_ENROLL_S"(update_bulk(j));
  		"ORDER_FACT_40_FEE_TYPE"(insert_bulk_index) := "ORDER_FACT_40_FEE_TYPE"(update_bulk(j));
  		"ORDER_FA_41_ENROLL_S"(insert_bulk_index) := "ORDER_FA_41_ENROLL_S"(update_bulk(j));
  		"ORDER_FA_42_PP_SALES"(insert_bulk_index) := "ORDER_FA_42_PP_SALES"(update_bulk(j));
  		"ORDER_FACT_43_SOURCE"(insert_bulk_index) := "ORDER_FACT_43_SOURCE"(update_bulk(j));
  		"ORDER_FACT_44_BAL_DUE"(insert_bulk_index) := "ORDER_FACT_44_BAL_DUE"(update_bulk(j));
  		"ORDER_FACT_45_LIST_PRICE"(insert_bulk_index) := "ORDER_FACT_45_LIST_PRICE"(update_bulk(j));
  		"ORDER_FACT_46_PO_NUMBER"(insert_bulk_index) := "ORDER_FACT_46_PO_NUMBER"(update_bulk(j));
  		"ORDER_FACT_47_PPCARD_ID"(insert_bulk_index) := "ORDER_FACT_47_PPCARD_ID"(update_bulk(j));
  		"ORDER_FACT_48_PAYMENT_METHOD"(insert_bulk_index) := "ORDER_FACT_48_PAYMENT_METHOD"(update_bulk(j));
  		"ORDER_FACT_49_REG_CODE"(insert_bulk_index) := "ORDER_FACT_49_REG_CODE"(update_bulk(j));
  		"ORDER_FACT_50_CREATE_USER"(insert_bulk_index) := "ORDER_FACT_50_CREATE_USER"(update_bulk(j));
  		"ORDER_FACT_51_MODIFY_USER"(insert_bulk_index) := "ORDER_FACT_51_MODIFY_USER"(update_bulk(j));
  		"ORDER_FACT_52_ENROLL_TYPE"(insert_bulk_index) := "ORDER_FACT_52_ENROLL_TYPE"(update_bulk(j));
  		"ORDER_FACT_56_ATTENDEE_TYPE"(insert_bulk_index) := "ORDER_FACT_56_ATTENDEE_TYPE"(update_bulk(j));
  		"ORDER_FACT_57_CHECK_NUMBER"(insert_bulk_index) := "ORDER_FACT_57_CHECK_NUMBER"(update_bulk(j));
  		"ORDER_FACT_58_COMMENTS"(insert_bulk_index) := "ORDER_FACT_58_COMMENTS"(update_bulk(j));
  		"ORDER_FA_59_OB_NATIO"(insert_bulk_index) := "ORDER_FA_59_OB_NATIO"(update_bulk(j));
  		"ORDER_FA_60_OB_NATIO"(insert_bulk_index) := "ORDER_FA_60_OB_NATIO"(update_bulk(j));
  		"ORDER_FA_61_OB_NATIO"(insert_bulk_index) := "ORDER_FA_61_OB_NATIO"(update_bulk(j));
  		"ORDER_FACT_62_OB_TERR_NUM"(insert_bulk_index) := "ORDER_FACT_62_OB_TERR_NUM"(update_bulk(j));
  		"ORDER_FACT_63_OB_REP_ID"(insert_bulk_index) := "ORDER_FACT_63_OB_REP_ID"(update_bulk(j));
  		"ORDER_FACT_64_OB_REP_NAME"(insert_bulk_index) := "ORDER_FACT_64_OB_REP_NAME"(update_bulk(j));
  		"ORDER_FACT_65_OSR_TERR_NUM"(insert_bulk_index) := "ORDER_FACT_65_OSR_TERR_NUM"(update_bulk(j));
  		"ORDER_FACT_66_OSR_ID"(insert_bulk_index) := "ORDER_FACT_66_OSR_ID"(update_bulk(j));
  		"ORDER_FACT_67_OSR_REP_NAME"(insert_bulk_index) := "ORDER_FACT_67_OSR_REP_NAME"(update_bulk(j));
  		"ORDER_FA_68_ENT_NATI"(insert_bulk_index) := "ORDER_FA_68_ENT_NATI"(update_bulk(j));
  		"ORDER_FA_69_ENT_NATI"(insert_bulk_index) := "ORDER_FA_69_ENT_NATI"(update_bulk(j));
  		"ORDER_FA_70_ENT_NATI"(insert_bulk_index) := "ORDER_FA_70_ENT_NATI"(update_bulk(j));
  		"ORDER_FA_71_ENT_INSI"(insert_bulk_index) := "ORDER_FA_71_ENT_INSI"(update_bulk(j));
  		"ORDER_FA_72_ENT_INSI"(insert_bulk_index) := "ORDER_FA_72_ENT_INSI"(update_bulk(j));
  		"ORDER_FA_73_ENT_INSI"(insert_bulk_index) := "ORDER_FA_73_ENT_INSI"(update_bulk(j));
  		"ORDER_FA_74_ENT_FEDE"(insert_bulk_index) := "ORDER_FA_74_ENT_FEDE"(update_bulk(j));
  		"ORDER_FA_75_ENT_FEDE"(insert_bulk_index) := "ORDER_FA_75_ENT_FEDE"(update_bulk(j));
  		"ORDER_FA_76_ENT_FEDE"(insert_bulk_index) := "ORDER_FA_76_ENT_FEDE"(update_bulk(j));
  		"ORDER_FACT_77_BTSR_TERR_NUM"(insert_bulk_index) := "ORDER_FACT_77_BTSR_TERR_NUM"(update_bulk(j));
  		"ORDER_FACT_78_BTSR_REP_ID"(insert_bulk_index) := "ORDER_FACT_78_BTSR_REP_ID"(update_bulk(j));
  		"ORDER_FACT_79_BTSR_REP_NAME"(insert_bulk_index) := "ORDER_FACT_79_BTSR_REP_NAME"(update_bulk(j));
  		"ORDER_FACT_80_BTA_TERR_NUM"(insert_bulk_index) := "ORDER_FACT_80_BTA_TERR_NUM"(update_bulk(j));
  		"ORDER_FACT_81_BTA_REP_ID"(insert_bulk_index) := "ORDER_FACT_81_BTA_REP_ID"(update_bulk(j));
  		"ORDER_FACT_82_BTA_REP_NAME"(insert_bulk_index) := "ORDER_FACT_82_BTA_REP_NAME"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "ORDER_FACT_srk"(insert_bulk_index) := "ORDER_FACT_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "ORDER_FACT_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    
    LOOP
      EXIT WHEN get_abort OR "ORDER_FACT_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "ORDER_FACT_si"..insert_bulk_index
          INSERT INTO
            "ORDER_FACT"
            ("ORDER_FACT"."ENROLL_ID",
            "ORDER_FACT"."EVENT_ID",
            "ORDER_FACT"."CUST_ID",
            "ORDER_FACT"."ENROLL_DATE",
            "ORDER_FACT"."KEYCODE",
            "ORDER_FACT"."BOOK_DATE",
            "ORDER_FACT"."REV_DATE",
            "ORDER_FACT"."ENROLL_SOURCE",
            "ORDER_FACT"."QUANTITY",
            "ORDER_FACT"."BOOK_AMT",
            "ORDER_FACT"."CURR_CODE",
            "ORDER_FACT"."SALESPERSON",
            "ORDER_FACT"."OPPORTUNITY_ID",
            "ORDER_FACT"."ORACLE_TRX_NUM",
            "ORDER_FACT"."GKDW_SOURCE",
            "ORDER_FACT"."ZIP_CODE",
            "ORDER_FACT"."COUNTRY",
            "ORDER_FACT"."TERRITORY",
            "ORDER_FACT"."REGION",
            "ORDER_FACT"."SALES_REP",
            "ORDER_FACT"."REGION_REP",
            "ORDER_FACT"."CREATION_DATE",
            "ORDER_FACT"."LAST_UPDATE_DATE",
            "ORDER_FACT"."ENROLL_STATUS",
            "ORDER_FACT"."TXFEE_ID",
            "ORDER_FACT"."BILL_DATE",
            "ORDER_FACT"."ENROLL_STATUS_DESC",
            "ORDER_FACT"."FEE_TYPE",
            "ORDER_FACT"."ENROLL_STATUS_DATE",
            "ORDER_FACT"."PP_SALES_ORDER_ID",
            "ORDER_FACT"."SOURCE",
            "ORDER_FACT"."BAL_DUE",
            "ORDER_FACT"."LIST_PRICE",
            "ORDER_FACT"."PO_NUMBER",
            "ORDER_FACT"."PPCARD_ID",
            "ORDER_FACT"."PAYMENT_METHOD",
            "ORDER_FACT"."REG_CODE",
            "ORDER_FACT"."CREATE_USER",
            "ORDER_FACT"."MODIFY_USER",
            "ORDER_FACT"."ENROLL_TYPE",
            "ORDER_FACT"."ATTENDEE_TYPE",
            "ORDER_FACT"."CHECK_NUMBER",
            "ORDER_FACT"."COMMENTS",
            "ORDER_FACT"."OB_NATIONAL_TERR_NUM",
            "ORDER_FACT"."OB_NATIONAL_REP_ID",
            "ORDER_FACT"."OB_NATIONAL_REP_NAME",
            "ORDER_FACT"."OB_TERR_NUM",
            "ORDER_FACT"."OB_REP_ID",
            "ORDER_FACT"."OB_REP_NAME",
            "ORDER_FACT"."OSR_TERR_NUM",
            "ORDER_FACT"."OSR_ID",
            "ORDER_FACT"."OSR_REP_NAME",
            "ORDER_FACT"."ENT_NATIONAL_TERR_NUM",
            "ORDER_FACT"."ENT_NATIONAL_REP_ID",
            "ORDER_FACT"."ENT_NATIONAL_REP_NAME",
            "ORDER_FACT"."ENT_INSIDE_TERR_NUM",
            "ORDER_FACT"."ENT_INSIDE_REP_ID",
            "ORDER_FACT"."ENT_INSIDE_REP_NAME",
            "ORDER_FACT"."ENT_FEDERAL_TERR_NUM",
            "ORDER_FACT"."ENT_FEDERAL_REP_ID",
            "ORDER_FACT"."ENT_FEDERAL_REP_NAME",
            "ORDER_FACT"."BTSR_TERR_NUM",
            "ORDER_FACT"."BTSR_REP_ID",
            "ORDER_FACT"."BTSR_REP_NAME",
            "ORDER_FACT"."BTA_TERR_NUM",
            "ORDER_FACT"."BTA_REP_ID",
            "ORDER_FACT"."BTA_REP_NAME")
          VALUES
            ("ORDER_FACT_0_ENROLL_ID"(i),
            "ORDER_FACT_1_EVENT_ID"(i),
            "ORDER_FACT_2_CUST_ID"(i),
            "ORDER_FACT_3_ENROLL_DATE"(i),
            "ORDER_FACT_4_KEYCODE"(i),
            "ORDER_FACT_5_BOOK_DATE"(i),
            "ORDER_FACT_6_REV_DATE"(i),
            "ORDER_FACT_8_ENROLL_SOURCE"(i),
            "ORDER_FACT_9_QUANTITY"(i),
            "ORDER_FACT_10_BOOK_AMT"(i),
            "ORDER_FACT_11_CURR_CODE"(i),
            "ORDER_FACT_13_SALESPERSON"(i),
            "ORDER_FACT_15_OPPORTUNITY_ID"(i),
            "ORDER_FACT_17_ORACLE_TRX_NUM"(i),
            "ORDER_FACT_22_GKDW_SOURCE"(i),
            "ORDER_FACT_24_ZIP_CODE"(i),
            "ORDER_FACT_26_COUNTRY"(i),
            "ORDER_FACT_28_TERRITORY"(i),
            "ORDER_FACT_29_REGION"(i),
            "ORDER_FACT_30_SALES_REP"(i),
            "ORDER_FACT_31_REGION_REP"(i),
            "ORDER_FACT_32_CREATION_DATE"(i),
            "ORDER_FACT_33_LAST_UPDATE_DATE"(i),
            "ORDER_FACT_34_ENROLL_STATUS"(i),
            "ORDER_FACT_36_TXFEE_ID"(i),
            "ORDER_FACT_37_BILL_DATE"(i),
            "ORDER_FA_39_ENROLL_S"(i),
            "ORDER_FACT_40_FEE_TYPE"(i),
            "ORDER_FA_41_ENROLL_S"(i),
            "ORDER_FA_42_PP_SALES"(i),
            "ORDER_FACT_43_SOURCE"(i),
            "ORDER_FACT_44_BAL_DUE"(i),
            "ORDER_FACT_45_LIST_PRICE"(i),
            "ORDER_FACT_46_PO_NUMBER"(i),
            "ORDER_FACT_47_PPCARD_ID"(i),
            "ORDER_FACT_48_PAYMENT_METHOD"(i),
            "ORDER_FACT_49_REG_CODE"(i),
            "ORDER_FACT_50_CREATE_USER"(i),
            "ORDER_FACT_51_MODIFY_USER"(i),
            "ORDER_FACT_52_ENROLL_TYPE"(i),
            "ORDER_FACT_56_ATTENDEE_TYPE"(i),
            "ORDER_FACT_57_CHECK_NUMBER"(i),
            "ORDER_FACT_58_COMMENTS"(i),
            "ORDER_FA_59_OB_NATIO"(i),
            "ORDER_FA_60_OB_NATIO"(i),
            "ORDER_FA_61_OB_NATIO"(i),
            "ORDER_FACT_62_OB_TERR_NUM"(i),
            "ORDER_FACT_63_OB_REP_ID"(i),
            "ORDER_FACT_64_OB_REP_NAME"(i),
            "ORDER_FACT_65_OSR_TERR_NUM"(i),
            "ORDER_FACT_66_OSR_ID"(i),
            "ORDER_FACT_67_OSR_REP_NAME"(i),
            "ORDER_FA_68_ENT_NATI"(i),
            "ORDER_FA_69_ENT_NATI"(i),
            "ORDER_FA_70_ENT_NATI"(i),
            "ORDER_FA_71_ENT_INSI"(i),
            "ORDER_FA_72_ENT_INSI"(i),
            "ORDER_FA_73_ENT_INSI"(i),
            "ORDER_FA_74_ENT_FEDE"(i),
            "ORDER_FA_75_ENT_FEDE"(i),
            "ORDER_FA_76_ENT_FEDE"(i),
            "ORDER_FACT_77_BTSR_TERR_NUM"(i),
            "ORDER_FACT_78_BTSR_REP_ID"(i),
            "ORDER_FACT_79_BTSR_REP_NAME"(i),
            "ORDER_FACT_80_BTA_TERR_NUM"(i),
            "ORDER_FACT_81_BTA_REP_ID"(i),
            "ORDER_FACT_82_BTA_REP_NAME"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "ORDER_FACT_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
            last_error_message := SQLERRM;
            dbms_output.put_line(last_error_message);
          error_index := "ORDER_FACT_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "ORDER_FACT_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 14: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_ID"',0,80),SUBSTRB("ORDER_FACT_0_ENROLL_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."EVENT_ID"',0,80),SUBSTRB("ORDER_FACT_1_EVENT_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("ORDER_FACT_2_CUST_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_DATE"',0,80),SUBSTRB("ORDER_FACT_3_ENROLL_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("ORDER_FACT_4_KEYCODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("ORDER_FACT_5_BOOK_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("ORDER_FACT_6_REV_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_SOURCE"',0,80),SUBSTRB("ORDER_FACT_8_ENROLL_SOURCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("ORDER_FACT_9_QUANTITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("ORDER_FACT_10_BOOK_AMT"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("ORDER_FACT_11_CURR_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("ORDER_FACT_13_SALESPERSON"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("ORDER_FACT_15_OPPORTUNITY_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ORACLE_TRX_NUM"',0,80),SUBSTRB("ORDER_FACT_17_ORACLE_TRX_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("ORDER_FACT_22_GKDW_SOURCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ZIP_CODE"',0,80),SUBSTRB("ORDER_FACT_24_ZIP_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("ORDER_FACT_26_COUNTRY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("ORDER_FACT_28_TERRITORY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION"',0,80),SUBSTRB("ORDER_FACT_29_REGION"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("ORDER_FACT_30_SALES_REP"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("ORDER_FACT_31_REGION_REP"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("ORDER_FACT_32_CREATION_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("ORDER_FACT_33_LAST_UPDATE_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS"',0,80),SUBSTRB("ORDER_FACT_34_ENROLL_STATUS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TXFEE_ID"',0,80),SUBSTRB("ORDER_FACT_36_TXFEE_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("ORDER_FACT_37_BILL_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DESC"',0,80),SUBSTRB("ORDER_FA_39_ENROLL_S"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."FEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_40_FEE_TYPE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DATE"',0,80),SUBSTRB("ORDER_FA_41_ENROLL_S"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("ORDER_FA_42_PP_SALES"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SOURCE"',0,80),SUBSTRB("ORDER_FACT_43_SOURCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BAL_DUE"',0,80),SUBSTRB("ORDER_FACT_44_BAL_DUE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LIST_PRICE"',0,80),SUBSTRB("ORDER_FACT_45_LIST_PRICE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("ORDER_FACT_46_PO_NUMBER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("ORDER_FACT_47_PPCARD_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("ORDER_FACT_48_PAYMENT_METHOD"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REG_CODE"',0,80),SUBSTRB("ORDER_FACT_49_REG_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATE_USER"',0,80),SUBSTRB("ORDER_FACT_50_CREATE_USER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."MODIFY_USER"',0,80),SUBSTRB("ORDER_FACT_51_MODIFY_USER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_TYPE"',0,80),SUBSTRB("ORDER_FACT_52_ENROLL_TYPE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ATTENDEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_56_ATTENDEE_TYPE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CHECK_NUMBER"',0,80),SUBSTRB("ORDER_FACT_57_CHECK_NUMBER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COMMENTS"',0,80),SUBSTRB("ORDER_FACT_58_COMMENTS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_59_OB_NATIO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_60_OB_NATIO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_61_OB_NATIO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_62_OB_TERR_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_ID"',0,80),SUBSTRB("ORDER_FACT_63_OB_REP_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_64_OB_REP_NAME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_65_OSR_TERR_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_ID"',0,80),SUBSTRB("ORDER_FACT_66_OSR_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_67_OSR_REP_NAME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_68_ENT_NATI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_69_ENT_NATI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_70_ENT_NATI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_71_ENT_INSI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_ID"',0,80),SUBSTRB("ORDER_FA_72_ENT_INSI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_NAME"',0,80),SUBSTRB("ORDER_FA_73_ENT_INSI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_74_ENT_FEDE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_75_ENT_FEDE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_76_ENT_FEDE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_77_BTSR_TERR_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_ID"',0,80),SUBSTRB("ORDER_FACT_78_BTSR_REP_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_79_BTSR_REP_NAME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_80_BTA_TERR_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_ID"',0,80),SUBSTRB("ORDER_FACT_81_BTA_REP_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_82_BTA_REP_NAME"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
          
          IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "ORDER_FACT_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "ORDER_FACT_ins" := "ORDER_FACT_ins" + get_rowid.COUNT;
      "ORDER_FACT_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "ORDER_FACT_ins" := "ORDER_FACT_ins0"; 
    "ORDER_FACT_upd" := "ORDER_FACT_upd0";
  END IF;

END "FLTR_DML";

---------------------------------------------------------------------------
-- "FLTR_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "ORDER_FACT_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "FLTR_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "ORDER_FACT_St" THEN
          "ORDER_FACT_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"ORDER_FACT"',
              p_target_uoid=>'A41FFB19B0755678E040007F01006C7D',
              p_stm=>'TRACE 16',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "ORDER_FACT_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19AB1F5678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0755678E040007F01006C7D', -- Operator ORDER_FACT
              p_parent_object_name=>'ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'ORDER_FACT',
              p_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B4225678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0975678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0725678E040007F01006C7D', -- Operator QG_EVENROLL
              p_parent_object_name=>'QG_EVENROLL',
              p_parent_object_uoid=>'A41FFB1911CC5678E040007F01006C7D', -- Table QG_EVENROLL
              p_parent_object_type=>'Table',
              p_object_name=>'QG_EVENROLL',
              p_object_uoid=>'A41FFB1911CC5678E040007F01006C7D', -- Table QG_EVENROLL
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0965678E040007F01006C7D', -- Operator EVXBILLING
              p_parent_object_name=>'EVXBILLING',
              p_parent_object_uoid=>'A41FFB19087C5678E040007F01006C7D', -- Table EVXBILLING
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLING',
              p_object_uoid=>'A41FFB19087C5678E040007F01006C7D', -- Table EVXBILLING
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B4965678E040007F01006C7D', -- Operator ORDER_FACT
              p_parent_object_name=>'ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'ORDER_FACT',
              p_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B08E5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B06F5678E040007F01006C7D', -- Operator EVXBILLPAYMENT
              p_parent_object_name=>'EVXBILLPAYMENT',
              p_parent_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLPAYMENT',
              p_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0955678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0705678E040007F01006C7D', -- Operator EVXENROLLHX
              p_parent_object_name=>'EVXENROLLHX',
              p_parent_object_uoid=>'A41FFB190D705678E040007F01006C7D', -- Table EVXENROLLHX
              p_parent_object_type=>'Table',
              p_object_name=>'EVXENROLLHX',
              p_object_uoid=>'A41FFB190D705678E040007F01006C7D', -- Table EVXENROLLHX
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19ADF05678E040007F01006C7D', -- Operator PPCARD_DIM
              p_parent_object_name=>'PPCARD_DIM',
              p_parent_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PPCARD_DIM',
              p_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B26A5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19ADF15678E040007F01006C7D', -- Operator EVXEVTICKET_1
              p_parent_object_name=>'EVXEVTICKET',
              p_parent_object_uoid=>'A41FFB190BFA5678E040007F01006C7D', -- Table EVXEVTICKET
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEVTICKET',
              p_object_uoid=>'A41FFB190BFA5678E040007F01006C7D', -- Table EVXEVTICKET
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0905678E040007F01006C7D', -- Operator EVXEV_TXFEE
              p_parent_object_name=>'EVXEV_TXFEE',
              p_parent_object_uoid=>'A41FFB190D9F5678E040007F01006C7D', -- Table EVXEV_TXFEE
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEV_TXFEE',
              p_object_uoid=>'A41FFB190D9F5678E040007F01006C7D', -- Table EVXEV_TXFEE
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B3525678E040007F01006C7D', -- Operator PPCARD_DIM
              p_parent_object_name=>'PPCARD_DIM',
              p_parent_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PPCARD_DIM',
              p_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "FLTR_si" := 0;
    "ORDER_FACT_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "FLTR_SU";

      LOOP
        IF "FLTR_si" = 0 THEN
          "FLTR_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "FLTR_12_EVXEVENROLLID".COUNT - 1;
          ELSE
            bulk_count := "FLTR_12_EVXEVENROLLID".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "ORDER_FACT_ir".DELETE;
"ORDER_FACT_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "FLTR_i" := "FLTR_si";
        BEGIN
          
          LOOP
            EXIT WHEN "ORDER_FACT_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "FLTR_i" := "FLTR_i" + 1;
            "FLTR_si" := "FLTR_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "ORDER_FACT_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("FLTR_c"%NOTFOUND AND
               "FLTR_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "FLTR_i" > bulk_count THEN
            
              "FLTR_si" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "EXPR_5_ENROLL_DATE"
            ("FLTR_i") := 
            TRUNC("FLTR_9_CREATEDATE_HX"
            ("FLTR_i"))/* EXPR.OUTGRP1.ENROLL_DATE */;
            
            ',0,2000);
            
            
            "EXPR_5_ENROLL_DATE"
            ("FLTR_i") := 
            TRUNC("FLTR_9_CREATEDATE_HX"
            ("FLTR_i"))/* EXPR.OUTGRP1.ENROLL_DATE */;
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "EXPR_6_BOOK_DATE"
            ("FLTR_i") := 
            case
when 
("EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i")  = ''INDIVIDUAL/PUBLIC'' or
("EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i") is null 
and  "EVENT_DIM_43_EVENT_TYPE"
            ("FLTR_i") = ''Open Enrollment''))
then 
        TRUNC("FLTR_16_BILLINGDATE"
            ("FLTR_i"))
when 
( "EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i")  = ''ENTERPRISE/PRIVATE'' or 
( "EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i") is null 
and  "EVENT_DIM_43_EVENT_TYPE"
            ("FLTR_i")  = ''Onsite''))
then
        trunc("FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i"))
else
        trunc("FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i") )
end/* EXPR.OUTGRP1.BOOK_DATE */;
            
            ',0,2000);
            
            
            "EXPR_6_BOOK_DATE"
            ("FLTR_i") := 
            case
when 
("EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i")  = 'INDIVIDUAL/PUBLIC' or
("EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i") is null 
and  "EVENT_DIM_43_EVENT_TYPE"
            ("FLTR_i") = 'Open Enrollment'))
then 
        TRUNC("FLTR_16_BILLINGDATE"
            ("FLTR_i"))
when 
( "EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i")  = 'ENTERPRISE/PRIVATE' or 
( "EVENT_DIM_37_EVENT_CHANNEL"
            ("FLTR_i") is null 
and  "EVENT_DIM_43_EVENT_TYPE"
            ("FLTR_i")  = 'Onsite'))
then
        trunc("FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i"))
else
        trunc("FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i") )
end/* EXPR.OUTGRP1.BOOK_DATE */;
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "EXPR_7_CREATE_DATE"
            ("FLTR_i") := 
            "FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i")/* EXPR.OUTGRP1.CREATE_DATE */;
            
            ',0,2000);
            
            
            "EXPR_7_CREATE_DATE"
            ("FLTR_i") := 
            "FLTR_3_CREATEDATE_TXFEE"
            ("FLTR_i")/* EXPR.OUTGRP1.CREATE_DATE */;
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_LEADSOURCE_DESC"((RTRIM("FLTR_13_EVXEVTICKETID"
            ("FLTR_i"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i"));
            
            ',0,2000);
            
                
                "GET_LEADSOURCE_DESC"((RTRIM("FLTR_13_EVXEVTICKETID"
            ("FLTR_i"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "GET_ORA_TRX_NUM_1_VALUE"
            ("FLTR_i") := 
            "GET_ORA_TRX_NUM"((RTRIM("FLTR_2_EVXEV_TXFEEID"
            ("FLTR_i"))));
            
            ',0,2000);
            
            
            "GET_ORA_TRX_NUM_1_VALUE"
            ("FLTR_i") := 
            "GET_ORA_TRX_NUM"((RTRIM("FLTR_2_EVXEV_TXFEEID"
            ("FLTR_i"))));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "EXPR_1_2_REV_DATE"
            ("FLTR_i") := 
            case  when "EXPR_6_BOOK_DATE"
            ("FLTR_i") is null then null when  "EVENT_DIM_6_START_DATE"
            ("FLTR_i") <  "EXPR_6_BOOK_DATE"
            ("FLTR_i")  then  "EXPR_6_BOOK_DATE"
            ("FLTR_i")  else  "EVENT_DIM_6_START_DATE"
            ("FLTR_i")  end/* EXPR_1.OUTGRP1.REV_DATE */;
            
            ',0,2000);
            
            
            "EXPR_1_2_REV_DATE"
            ("FLTR_i") := 
            case  when "EXPR_6_BOOK_DATE"
            ("FLTR_i") is null then null when  "EVENT_DIM_6_START_DATE"
            ("FLTR_i") <  "EXPR_6_BOOK_DATE"
            ("FLTR_i")  then  "EXPR_6_BOOK_DATE"
            ("FLTR_i")  else  "EVENT_DIM_6_START_DATE"
            ("FLTR_i")  end/* EXPR_1.OUTGRP1.REV_DATE */;
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
            
            "EXPR_3_9_LIST_PRICE_OUT"
            ("FLTR_i") := 
            case when 
(   "EVXBILLPAYMENT_31_METHOD"
            ("FLTR_i")  = ''Prepay Card''
        OR  "PPCARD_DIM_17_SALES_ORDER_ID"
            ("FLTR_i")  IS NOT NULL
        OR  (RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"
            ("FLTR_i")))  IS NOT NULL
       ) 
 AND  "EXPR_5_ENROLL_DATE"
            ("FLTR_i")  >= ''01-MAY-2007''
 then
  "GET_LIST_PRICE"( (RTRIM("FLTR_7_EVXEVENTID"
            ("FLTR_i"))),  
                        "FLTR_20_FEETYPE"
            ("FLTR_i"),
                        "EXPR_5_ENROLL_DATE"
            ("FLTR_i") )
else
  "FLTR_23_ACTUALRATE"
            ("FLTR_i") 
 end/* EXPR_3.OUTGRP1.LIST_PRICE_OUT */;
            
            ',0,2000);
            
            
            "EXPR_3_9_LIST_PRICE_OUT"
            ("FLTR_i") := 
            case when 
(   "EVXBILLPAYMENT_31_METHOD"
            ("FLTR_i")  = 'Prepay Card'
        OR  "PPCARD_DIM_17_SALES_ORDER_ID"
            ("FLTR_i")  IS NOT NULL
        OR  (RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"
            ("FLTR_i")))  IS NOT NULL
       ) 
 AND  "EXPR_5_ENROLL_DATE"
            ("FLTR_i")  >= '01-MAY-2007'
 then
  "GET_LIST_PRICE"( (RTRIM("FLTR_7_EVXEVENTID"
            ("FLTR_i"))),  
                        "FLTR_20_FEETYPE"
            ("FLTR_i"),
                        "EXPR_5_ENROLL_DATE"
            ("FLTR_i") )
else
  "FLTR_23_ACTUALRATE"
            ("FLTR_i") 
 end/* EXPR_3.OUTGRP1.LIST_PRICE_OUT */;
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"ORDER_FACT"';
            get_audit_detail_id := "ORDER_FACT_id";
            IF NOT "ORDER_FACT_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"ORDER_FACT_0_ENROLL_ID"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_12_EVXEVENROLLID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_0_ENROLL_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_12_EVXEVENROLLID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_0_ENROLL_ID"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_12_EVXEVENROLLID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_0_ENROLL_ID" :=
            
            RTRIM("FLTR_12_EVXEVENROLLID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_1_EVENT_ID"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_7_EVXEVENTID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_1_EVENT_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_7_EVXEVENTID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_1_EVENT_ID"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_7_EVXEVENTID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_1_EVENT_ID" :=
            
            RTRIM("FLTR_7_EVXEVENTID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_2_CUST_ID"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_8_ATTENDEECONTACTID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_2_CUST_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_8_ATTENDEECONTACTID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_2_CUST_ID"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_8_ATTENDEECONTACTID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_2_CUST_ID" :=
            
            RTRIM("FLTR_8_ATTENDEECONTACTID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_3_ENROLL_DATE"("ORDER_FACT_i") := 
            
            "EXPR_5_ENROLL_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_3_ENROLL_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_5_ENROLL_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_3_ENROLL_DATE"("ORDER_FACT_i") :=
            
            "EXPR_5_ENROLL_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_3_ENROLL_DATE" :=
            
            "EXPR_5_ENROLL_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_4_KEYCODE"("ORDER_FACT_i") := 
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_4_KEYCODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_LEAD_1_LEADSOUR"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_4_KEYCODE"("ORDER_FACT_i") :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_4_KEYCODE" :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_5_BOOK_DATE"("ORDER_FACT_i") := 
            
            "EXPR_6_BOOK_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_5_BOOK_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_6_BOOK_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_5_BOOK_DATE"("ORDER_FACT_i") :=
            
            "EXPR_6_BOOK_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_5_BOOK_DATE" :=
            
            "EXPR_6_BOOK_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_6_REV_DATE"("ORDER_FACT_i") := 
            
            "EXPR_1_2_REV_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_6_REV_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_1_2_REV_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_6_REV_DATE"("ORDER_FACT_i") :=
            
            "EXPR_1_2_REV_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_6_REV_DATE" :=
            
            "EXPR_1_2_REV_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_8_ENROLL_SOURCE"("ORDER_FACT_i") := 
            
            "FLTR_15_ENROLLSOURCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_8_ENROLL_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_15_ENROLLSOURCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_8_ENROLL_SOURCE"("ORDER_FACT_i") :=
            
            "FLTR_15_ENROLLSOURCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_8_ENROLL_SOURCE" :=
            
            "FLTR_15_ENROLLSOURCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_9_QUANTITY"("ORDER_FACT_i") := 
            
            "FLTR_10_ENROLLQTY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_9_QUANTITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_10_ENROLLQTY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_9_QUANTITY"("ORDER_FACT_i") :=
            
            "FLTR_10_ENROLLQTY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_9_QUANTITY" :=
            
            "FLTR_10_ENROLLQTY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_10_BOOK_AMT"("ORDER_FACT_i") := 
            
            "FLTR_5_ACTUALAMOUNT"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_10_BOOK_AMT"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_5_ACTUALAMOUNT"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_10_BOOK_AMT"("ORDER_FACT_i") :=
            
            "FLTR_5_ACTUALAMOUNT"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_10_BOOK_AMT" :=
            
            "FLTR_5_ACTUALAMOUNT"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_11_CURR_CODE"("ORDER_FACT_i") := 
            
            "FLTR_17_CURRENCYTYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_11_CURR_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_17_CURRENCYTYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_11_CURR_CODE"("ORDER_FACT_i") :=
            
            "FLTR_17_CURRENCYTYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_11_CURR_CODE" :=
            
            "FLTR_17_CURRENCYTYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_13_SALESPERSON"("ORDER_FACT_i") := 
            
            "FLTR_19_SOLDBYUSER"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_13_SALESPERSON"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_19_SOLDBYUSER"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_13_SALESPERSON"("ORDER_FACT_i") :=
            
            "FLTR_19_SOLDBYUSER"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_13_SALESPERSON" :=
            
            "FLTR_19_SOLDBYUSER"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_15_OPPORTUNITY_ID"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_30_OPPORTUNITYID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_15_OPPORTUNITY_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_30_OPPORTUNITYID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_15_OPPORTUNITY_ID"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_30_OPPORTUNITYID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_15_OPPORTUNITY_" :=
            
            RTRIM("FLTR_30_OPPORTUNITYID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_17_ORACLE_TRX_NUM"("ORDER_FACT_i") := 
            
            "GET_ORA_TRX_NUM_1_VALUE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_17_ORACLE_TRX_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_ORA_TRX_NUM_1_VALUE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_17_ORACLE_TRX_NUM"("ORDER_FACT_i") :=
            
            "GET_ORA_TRX_NUM_1_VALUE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_17_ORACLE_TRX_N" :=
            
            "GET_ORA_TRX_NUM_1_VALUE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_22_GKDW_SOURCE"("ORDER_FACT_i") := 
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_22_GKDW_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_ORDER_FACT"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_22_GKDW_SOURCE"("ORDER_FACT_i") :=
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_22_GKDW_SOURCE" :=
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_24_ZIP_CODE"("ORDER_FACT_i") := 
            
            "EXPR_2_2_ZIP_CODE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_24_ZIP_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_2_2_ZIP_CODE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_24_ZIP_CODE"("ORDER_FACT_i") :=
            
            "EXPR_2_2_ZIP_CODE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_24_ZIP_CODE" :=
            
            "EXPR_2_2_ZIP_CODE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_26_COUNTRY"("ORDER_FACT_i") := 
            
            "EVENT_DIM_20_COUNTRY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_26_COUNTRY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVENT_DIM_20_COUNTRY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_26_COUNTRY"("ORDER_FACT_i") :=
            
            "EVENT_DIM_20_COUNTRY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_26_COUNTRY" :=
            
            "EVENT_DIM_20_COUNTRY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_28_TERRITORY"("ORDER_FACT_i") := 
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_28_TERRITORY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_3_TERRITORY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_28_TERRITORY"("ORDER_FACT_i") :=
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_28_TERRITORY" :=
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_29_REGION"("ORDER_FACT_i") := 
            
            "MARKET_DIM_4_REGION"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_29_REGION"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_4_REGION"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_29_REGION"("ORDER_FACT_i") :=
            
            "MARKET_DIM_4_REGION"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_29_REGION" :=
            
            "MARKET_DIM_4_REGION"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_30_SALES_REP"("ORDER_FACT_i") := 
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_30_SALES_REP"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_5_SALES_REP"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_30_SALES_REP"("ORDER_FACT_i") :=
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_30_SALES_REP" :=
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_31_REGION_REP"("ORDER_FACT_i") := 
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_31_REGION_REP"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_6_REGION_MGR"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_31_REGION_REP"("ORDER_FACT_i") :=
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_31_REGION_REP" :=
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_32_CREATION_DATE"("ORDER_FACT_i") := 
            
            "EXPR_7_CREATE_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_32_CREATION_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_7_CREATE_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_32_CREATION_DATE"("ORDER_FACT_i") :=
            
            "EXPR_7_CREATE_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_32_CREATION_DATE" :=
            
            "EXPR_7_CREATE_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_33_LAST_UPDATE_DATE"("ORDER_FACT_i") := 
            
            "FLTR_4_MODIFYDATE_TXFEE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_33_LAST_UPDATE_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_4_MODIFYDATE_TXFEE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_33_LAST_UPDATE_DATE"("ORDER_FACT_i") :=
            
            "FLTR_4_MODIFYDATE_TXFEE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_33_LAST_UPDATE_" :=
            
            "FLTR_4_MODIFYDATE_TXFEE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_34_ENROLL_STATUS"("ORDER_FACT_i") := 
            
            "FLTR_11_ENROLLSTATUS"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_34_ENROLL_STATUS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_11_ENROLLSTATUS"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_34_ENROLL_STATUS"("ORDER_FACT_i") :=
            
            "FLTR_11_ENROLLSTATUS"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_34_ENROLL_STATUS" :=
            
            "FLTR_11_ENROLLSTATUS"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_36_TXFEE_ID"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_2_EVXEV_TXFEEID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_36_TXFEE_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_2_EVXEV_TXFEEID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_36_TXFEE_ID"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_2_EVXEV_TXFEEID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_36_TXFEE_ID" :=
            
            RTRIM("FLTR_2_EVXEV_TXFEEID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_37_BILL_DATE"("ORDER_FACT_i") := 
            
            "FLTR_16_BILLINGDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_37_BILL_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_16_BILLINGDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_37_BILL_DATE"("ORDER_FACT_i") :=
            
            "FLTR_16_BILLINGDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_37_BILL_DATE" :=
            
            "FLTR_16_BILLINGDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_39_ENROLL_S"("ORDER_FACT_i") := 
            
            "FLTR_14_ENROLLSTATUSDESC"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_39_ENROLL_S"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_14_ENROLLSTATUSDESC"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_39_ENROLL_S"("ORDER_FACT_i") :=
            
            "FLTR_14_ENROLLSTATUSDESC"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_39_ENROLL_S" :=
            
            "FLTR_14_ENROLLSTATUSDESC"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_40_FEE_TYPE"("ORDER_FACT_i") := 
            
            "FLTR_20_FEETYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_40_FEE_TYPE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_20_FEETYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_40_FEE_TYPE"("ORDER_FACT_i") :=
            
            "FLTR_20_FEETYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_40_FEE_TYPE" :=
            
            "FLTR_20_FEETYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_41_ENROLL_S"("ORDER_FACT_i") := 
            
            "FLTR_21_ENROLLSTATUSDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_41_ENROLL_S"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_21_ENROLLSTATUSDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_41_ENROLL_S"("ORDER_FACT_i") :=
            
            "FLTR_21_ENROLLSTATUSDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_41_ENROLL_S" :=
            
            "FLTR_21_ENROLLSTATUSDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_42_PP_SALES"("ORDER_FACT_i") := 
            
            "PPCARD_DIM_17_SALES_ORDER_ID"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_42_PP_SALES"',0,80);
            
            BEGIN
              error_value := SUBSTRB("PPCARD_DIM_17_SALES_ORDER_ID"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_42_PP_SALES"("ORDER_FACT_i") :=
            
            "PPCARD_DIM_17_SALES_ORDER_ID"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_42_PP_SALES" :=
            
            "PPCARD_DIM_17_SALES_ORDER_ID"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_43_SOURCE"("ORDER_FACT_i") := 
            
            "FLTR_24_SOURCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_43_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_24_SOURCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_43_SOURCE"("ORDER_FACT_i") :=
            
            "FLTR_24_SOURCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_43_SOURCE" :=
            
            "FLTR_24_SOURCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_44_BAL_DUE"("ORDER_FACT_i") := 
            
            "EVXBILLING_6_BALANCEDUE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_44_BAL_DUE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLING_6_BALANCEDUE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_44_BAL_DUE"("ORDER_FACT_i") :=
            
            "EVXBILLING_6_BALANCEDUE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_44_BAL_DUE" :=
            
            "EVXBILLING_6_BALANCEDUE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_45_LIST_PRICE"("ORDER_FACT_i") := 
            
            "EXPR_3_9_LIST_PRICE_OUT"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_45_LIST_PRICE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_3_9_LIST_PRICE_OUT"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_45_LIST_PRICE"("ORDER_FACT_i") :=
            
            "EXPR_3_9_LIST_PRICE_OUT"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_45_LIST_PRICE" :=
            
            "EXPR_3_9_LIST_PRICE_OUT"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_46_PO_NUMBER"("ORDER_FACT_i") := 
            
            "FLTR_31_PONUMBER"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_46_PO_NUMBER"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_31_PONUMBER"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_46_PO_NUMBER"("ORDER_FACT_i") :=
            
            "FLTR_31_PONUMBER"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_46_PO_NUMBER" :=
            
            "FLTR_31_PONUMBER"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_47_PPCARD_ID"("ORDER_FACT_i") := 
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_47_PPCARD_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_47_PPCARD_ID"("ORDER_FACT_i") :=
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_47_PPCARD_ID" :=
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARDID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_48_PAYMENT_METHOD"("ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_48_PAYMENT_METHOD"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_31_METHOD"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_48_PAYMENT_METHOD"("ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_48_PAYMENT_METH" :=
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_49_REG_CODE"("ORDER_FACT_i") := 
            
            "FLTR_27_CHANNEL"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_49_REG_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_27_CHANNEL"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_49_REG_CODE"("ORDER_FACT_i") :=
            
            "FLTR_27_CHANNEL"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_49_REG_CODE" :=
            
            "FLTR_27_CHANNEL"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_50_CREATE_USER"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_50_CREATE_USER"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_28_CREATEUSER_TXFEE"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_50_CREATE_USER"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_50_CREATE_USER" :=
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_51_MODIFY_USER"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_51_MODIFY_USER"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_29_MODIFYUSER_TXFEE"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_51_MODIFY_USER"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_51_MODIFY_USER" :=
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_52_ENROLL_TYPE"("ORDER_FACT_i") := 
            
            "FLTR_32_REVIEWTYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_52_ENROLL_TYPE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_32_REVIEWTYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_52_ENROLL_TYPE"("ORDER_FACT_i") :=
            
            "FLTR_32_REVIEWTYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_52_ENROLL_TYPE" :=
            
            "FLTR_32_REVIEWTYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_56_ATTENDEE_TYPE"("ORDER_FACT_i") := 
            
            "FLTR_35_ATTENDEETYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_56_ATTENDEE_TYPE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_35_ATTENDEETYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_56_ATTENDEE_TYPE"("ORDER_FACT_i") :=
            
            "FLTR_35_ATTENDEETYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_56_ATTENDEE_TYPE" :=
            
            "FLTR_35_ATTENDEETYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_57_CHECK_NUMBER"("ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_27_CHECKNUMBER"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_57_CHECK_NUMBER"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_27_CHECKNUMBER"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_57_CHECK_NUMBER"("ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_27_CHECKNUMBER"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_57_CHECK_NUMBER" :=
            
            "EVXBILLPAYMENT_27_CHECKNUMBER"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_58_COMMENTS"("ORDER_FACT_i") := 
            
            "FLTR_36_COMMENTS"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_58_COMMENTS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_36_COMMENTS"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_58_COMMENTS"("ORDER_FACT_i") :=
            
            "FLTR_36_COMMENTS"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_58_COMMENTS" :=
            
            "FLTR_36_COMMENTS"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_59_OB_NATIO"("ORDER_FACT_i") := 
            
            "CUST_DIM_39_OB_NATIO"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_59_OB_NATIO"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_39_OB_NATIO"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_59_OB_NATIO"("ORDER_FACT_i") :=
            
            "CUST_DIM_39_OB_NATIO"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_59_OB_NATIO" :=
            
            "CUST_DIM_39_OB_NATIO"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_60_OB_NATIO"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_60_OB_NATIO"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_40_OB_NATIONAL_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_60_OB_NATIO"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_60_OB_NATIO" :=
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_61_OB_NATIO"("ORDER_FACT_i") := 
            
            "CUST_DIM_41_OB_NATIO"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_61_OB_NATIO"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_41_OB_NATIO"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_61_OB_NATIO"("ORDER_FACT_i") :=
            
            "CUST_DIM_41_OB_NATIO"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_61_OB_NATIO" :=
            
            "CUST_DIM_41_OB_NATIO"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_62_OB_TERR_NUM"("ORDER_FACT_i") := 
            
            "CUST_DIM_42_OB_TERR_NUM"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_62_OB_TERR_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_42_OB_TERR_NUM"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_62_OB_TERR_NUM"("ORDER_FACT_i") :=
            
            "CUST_DIM_42_OB_TERR_NUM"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_62_OB_TERR_NUM" :=
            
            "CUST_DIM_42_OB_TERR_NUM"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_63_OB_REP_ID"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_43_OB_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_63_OB_REP_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_43_OB_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_63_OB_REP_ID"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_43_OB_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_63_OB_REP_ID" :=
            
            RTRIM("CUST_DIM_43_OB_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_64_OB_REP_NAME"("ORDER_FACT_i") := 
            
            "CUST_DIM_44_OB_REP_NAME"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_64_OB_REP_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_44_OB_REP_NAME"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_64_OB_REP_NAME"("ORDER_FACT_i") :=
            
            "CUST_DIM_44_OB_REP_NAME"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_64_OB_REP_NAME" :=
            
            "CUST_DIM_44_OB_REP_NAME"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_65_OSR_TERR_NUM"("ORDER_FACT_i") := 
            
            "CUST_DIM_45_OSR_TERR_NUM"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_65_OSR_TERR_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_45_OSR_TERR_NUM"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_65_OSR_TERR_NUM"("ORDER_FACT_i") :=
            
            "CUST_DIM_45_OSR_TERR_NUM"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_65_OSR_TERR_NUM" :=
            
            "CUST_DIM_45_OSR_TERR_NUM"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_66_OSR_ID"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_46_OSR_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_66_OSR_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_46_OSR_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_66_OSR_ID"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_46_OSR_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_66_OSR_ID" :=
            
            RTRIM("CUST_DIM_46_OSR_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_67_OSR_REP_NAME"("ORDER_FACT_i") := 
            
            "CUST_DIM_47_OSR_REP_NAME"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_67_OSR_REP_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_47_OSR_REP_NAME"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_67_OSR_REP_NAME"("ORDER_FACT_i") :=
            
            "CUST_DIM_47_OSR_REP_NAME"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_67_OSR_REP_NAME" :=
            
            "CUST_DIM_47_OSR_REP_NAME"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_68_ENT_NATI"("ORDER_FACT_i") := 
            
            "CUST_DIM_48_ENT_NATI"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_68_ENT_NATI"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_48_ENT_NATI"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_68_ENT_NATI"("ORDER_FACT_i") :=
            
            "CUST_DIM_48_ENT_NATI"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_68_ENT_NATI" :=
            
            "CUST_DIM_48_ENT_NATI"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_69_ENT_NATI"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_49_ENT_NATI"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_69_ENT_NATI"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_49_ENT_NATI"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_69_ENT_NATI"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_49_ENT_NATI"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_69_ENT_NATI" :=
            
            RTRIM("CUST_DIM_49_ENT_NATI"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_70_ENT_NATI"("ORDER_FACT_i") := 
            
            "CUST_DIM_50_ENT_NATI"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_70_ENT_NATI"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_50_ENT_NATI"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_70_ENT_NATI"("ORDER_FACT_i") :=
            
            "CUST_DIM_50_ENT_NATI"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_70_ENT_NATI" :=
            
            "CUST_DIM_50_ENT_NATI"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_71_ENT_INSI"("ORDER_FACT_i") := 
            
            "CUST_DIM_51_ENT_INSI"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_71_ENT_INSI"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_51_ENT_INSI"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_71_ENT_INSI"("ORDER_FACT_i") :=
            
            "CUST_DIM_51_ENT_INSI"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_71_ENT_INSI" :=
            
            "CUST_DIM_51_ENT_INSI"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_72_ENT_INSI"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_72_ENT_INSI"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_52_ENT_INSIDE_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_72_ENT_INSI"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_72_ENT_INSI" :=
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_73_ENT_INSI"("ORDER_FACT_i") := 
            
            "CUST_DIM_53_ENT_INSI"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_73_ENT_INSI"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_53_ENT_INSI"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_73_ENT_INSI"("ORDER_FACT_i") :=
            
            "CUST_DIM_53_ENT_INSI"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_73_ENT_INSI" :=
            
            "CUST_DIM_53_ENT_INSI"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_74_ENT_FEDE"("ORDER_FACT_i") := 
            
            "CUST_DIM_54_ENT_FEDE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_74_ENT_FEDE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_54_ENT_FEDE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_74_ENT_FEDE"("ORDER_FACT_i") :=
            
            "CUST_DIM_54_ENT_FEDE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_74_ENT_FEDE" :=
            
            "CUST_DIM_54_ENT_FEDE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_75_ENT_FEDE"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_75_ENT_FEDE"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_75_ENT_FEDE"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_75_ENT_FEDE" :=
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_76_ENT_FEDE"("ORDER_FACT_i") := 
            
            "CUST_DIM_56_ENT_FEDE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_76_ENT_FEDE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_56_ENT_FEDE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_76_ENT_FEDE"("ORDER_FACT_i") :=
            
            "CUST_DIM_56_ENT_FEDE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_76_ENT_FEDE" :=
            
            "CUST_DIM_56_ENT_FEDE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_77_BTSR_TERR_NUM"("ORDER_FACT_i") := 
            
            "CUST_DIM_57_BTSR_TERR_NUM"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_77_BTSR_TERR_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_57_BTSR_TERR_NUM"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_77_BTSR_TERR_NUM"("ORDER_FACT_i") :=
            
            "CUST_DIM_57_BTSR_TERR_NUM"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_77_BTSR_TERR_NUM" :=
            
            "CUST_DIM_57_BTSR_TERR_NUM"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_78_BTSR_REP_ID"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_78_BTSR_REP_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_58_BTSR_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_78_BTSR_REP_ID"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_78_BTSR_REP_ID" :=
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_79_BTSR_REP_NAME"("ORDER_FACT_i") := 
            
            "CUST_DIM_59_BTSR_REP_NAME"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_79_BTSR_REP_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_59_BTSR_REP_NAME"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_79_BTSR_REP_NAME"("ORDER_FACT_i") :=
            
            "CUST_DIM_59_BTSR_REP_NAME"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_79_BTSR_REP_NAME" :=
            
            "CUST_DIM_59_BTSR_REP_NAME"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_80_BTA_TERR_NUM"("ORDER_FACT_i") := 
            
            "CUST_DIM_60_BTA_TERR_NUM"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_80_BTA_TERR_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_60_BTA_TERR_NUM"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_80_BTA_TERR_NUM"("ORDER_FACT_i") :=
            
            "CUST_DIM_60_BTA_TERR_NUM"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_80_BTA_TERR_NUM" :=
            
            "CUST_DIM_60_BTA_TERR_NUM"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_81_BTA_REP_ID"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_61_BTA_REP_ID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_81_BTA_REP_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_61_BTA_REP_ID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_81_BTA_REP_ID"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_61_BTA_REP_ID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_81_BTA_REP_ID" :=
            
            RTRIM("CUST_DIM_61_BTA_REP_ID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_82_BTA_REP_NAME"("ORDER_FACT_i") := 
            
            "CUST_DIM_62_BTA_REP_NAME"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_82_BTA_REP_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_62_BTA_REP_NAME"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_82_BTA_REP_NAME"("ORDER_FACT_i") :=
            
            "CUST_DIM_62_BTA_REP_NAME"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_82_BTA_REP_NAME" :=
            
            "CUST_DIM_62_BTA_REP_NAME"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "ORDER_FACT_srk"("ORDER_FACT_i") := get_rowkey + "FLTR_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_ORDER_FACT_srk" := get_rowkey + "FLTR_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "ORDER_FACT_new" := TRUE;
                ELSE
                  "ORDER_FACT_i" := "ORDER_FACT_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
             
                  "FLTR_ER"('TRACE 17: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "FLTR_i");
                  
                  "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
                  
                  IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("ORDER_FACT_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "ORDER_FACT_new" 
            AND (NOT "ORDER_FACT_nul") THEN
              "ORDER_FACT_ir"(dml_bsize) := "ORDER_FACT_i";
            	"ORDER_FACT_0_ENROLL_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_0_ENROLL_ID";
            	"ORDER_FACT_1_EVENT_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_1_EVENT_ID";
            	"ORDER_FACT_2_CUST_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_2_CUST_ID";
            	"ORDER_FACT_3_ENROLL_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_3_ENROLL_DATE";
            	"ORDER_FACT_4_KEYCODE"("ORDER_FACT_i") := "SV_ORDER_FACT_4_KEYCODE";
            	"ORDER_FACT_5_BOOK_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_5_BOOK_DATE";
            	"ORDER_FACT_6_REV_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_6_REV_DATE";
            	"ORDER_FACT_8_ENROLL_SOURCE"("ORDER_FACT_i") := "SV_ORDER_FACT_8_ENROLL_SOURCE";
            	"ORDER_FACT_9_QUANTITY"("ORDER_FACT_i") := "SV_ORDER_FACT_9_QUANTITY";
            	"ORDER_FACT_10_BOOK_AMT"("ORDER_FACT_i") := "SV_ORDER_FACT_10_BOOK_AMT";
            	"ORDER_FACT_11_CURR_CODE"("ORDER_FACT_i") := "SV_ORDER_FACT_11_CURR_CODE";
            	"ORDER_FACT_13_SALESPERSON"("ORDER_FACT_i") := "SV_ORDER_FACT_13_SALESPERSON";
            	"ORDER_FACT_15_OPPORTUNITY_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_15_OPPORTUNITY_";
            	"ORDER_FACT_17_ORACLE_TRX_NUM"("ORDER_FACT_i") := "SV_ORDER_FACT_17_ORACLE_TRX_N";
            	"ORDER_FACT_22_GKDW_SOURCE"("ORDER_FACT_i") := "SV_ORDER_FACT_22_GKDW_SOURCE";
            	"ORDER_FACT_24_ZIP_CODE"("ORDER_FACT_i") := "SV_ORDER_FACT_24_ZIP_CODE";
            	"ORDER_FACT_26_COUNTRY"("ORDER_FACT_i") := "SV_ORDER_FACT_26_COUNTRY";
            	"ORDER_FACT_28_TERRITORY"("ORDER_FACT_i") := "SV_ORDER_FACT_28_TERRITORY";
            	"ORDER_FACT_29_REGION"("ORDER_FACT_i") := "SV_ORDER_FACT_29_REGION";
            	"ORDER_FACT_30_SALES_REP"("ORDER_FACT_i") := "SV_ORDER_FACT_30_SALES_REP";
            	"ORDER_FACT_31_REGION_REP"("ORDER_FACT_i") := "SV_ORDER_FACT_31_REGION_REP";
            	"ORDER_FACT_32_CREATION_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_32_CREATION_DATE";
            	"ORDER_FACT_33_LAST_UPDATE_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_33_LAST_UPDATE_";
            	"ORDER_FACT_34_ENROLL_STATUS"("ORDER_FACT_i") := "SV_ORDER_FACT_34_ENROLL_STATUS";
            	"ORDER_FACT_36_TXFEE_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_36_TXFEE_ID";
            	"ORDER_FACT_37_BILL_DATE"("ORDER_FACT_i") := "SV_ORDER_FACT_37_BILL_DATE";
            	"ORDER_FA_39_ENROLL_S"("ORDER_FACT_i") := "SV_ORDER_FA_39_ENROLL_S";
            	"ORDER_FACT_40_FEE_TYPE"("ORDER_FACT_i") := "SV_ORDER_FACT_40_FEE_TYPE";
            	"ORDER_FA_41_ENROLL_S"("ORDER_FACT_i") := "SV_ORDER_FA_41_ENROLL_S";
            	"ORDER_FA_42_PP_SALES"("ORDER_FACT_i") := "SV_ORDER_FA_42_PP_SALES";
            	"ORDER_FACT_43_SOURCE"("ORDER_FACT_i") := "SV_ORDER_FACT_43_SOURCE";
            	"ORDER_FACT_44_BAL_DUE"("ORDER_FACT_i") := "SV_ORDER_FACT_44_BAL_DUE";
            	"ORDER_FACT_45_LIST_PRICE"("ORDER_FACT_i") := "SV_ORDER_FACT_45_LIST_PRICE";
            	"ORDER_FACT_46_PO_NUMBER"("ORDER_FACT_i") := "SV_ORDER_FACT_46_PO_NUMBER";
            	"ORDER_FACT_47_PPCARD_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_47_PPCARD_ID";
            	"ORDER_FACT_48_PAYMENT_METHOD"("ORDER_FACT_i") := "SV_ORDER_FACT_48_PAYMENT_METH";
            	"ORDER_FACT_49_REG_CODE"("ORDER_FACT_i") := "SV_ORDER_FACT_49_REG_CODE";
            	"ORDER_FACT_50_CREATE_USER"("ORDER_FACT_i") := "SV_ORDER_FACT_50_CREATE_USER";
            	"ORDER_FACT_51_MODIFY_USER"("ORDER_FACT_i") := "SV_ORDER_FACT_51_MODIFY_USER";
            	"ORDER_FACT_52_ENROLL_TYPE"("ORDER_FACT_i") := "SV_ORDER_FACT_52_ENROLL_TYPE";
            	"ORDER_FACT_56_ATTENDEE_TYPE"("ORDER_FACT_i") := "SV_ORDER_FACT_56_ATTENDEE_TYPE";
            	"ORDER_FACT_57_CHECK_NUMBER"("ORDER_FACT_i") := "SV_ORDER_FACT_57_CHECK_NUMBER";
            	"ORDER_FACT_58_COMMENTS"("ORDER_FACT_i") := "SV_ORDER_FACT_58_COMMENTS";
            	"ORDER_FA_59_OB_NATIO"("ORDER_FACT_i") := "SV_ORDER_FA_59_OB_NATIO";
            	"ORDER_FA_60_OB_NATIO"("ORDER_FACT_i") := "SV_ORDER_FA_60_OB_NATIO";
            	"ORDER_FA_61_OB_NATIO"("ORDER_FACT_i") := "SV_ORDER_FA_61_OB_NATIO";
            	"ORDER_FACT_62_OB_TERR_NUM"("ORDER_FACT_i") := "SV_ORDER_FACT_62_OB_TERR_NUM";
            	"ORDER_FACT_63_OB_REP_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_63_OB_REP_ID";
            	"ORDER_FACT_64_OB_REP_NAME"("ORDER_FACT_i") := "SV_ORDER_FACT_64_OB_REP_NAME";
            	"ORDER_FACT_65_OSR_TERR_NUM"("ORDER_FACT_i") := "SV_ORDER_FACT_65_OSR_TERR_NUM";
            	"ORDER_FACT_66_OSR_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_66_OSR_ID";
            	"ORDER_FACT_67_OSR_REP_NAME"("ORDER_FACT_i") := "SV_ORDER_FACT_67_OSR_REP_NAME";
            	"ORDER_FA_68_ENT_NATI"("ORDER_FACT_i") := "SV_ORDER_FA_68_ENT_NATI";
            	"ORDER_FA_69_ENT_NATI"("ORDER_FACT_i") := "SV_ORDER_FA_69_ENT_NATI";
            	"ORDER_FA_70_ENT_NATI"("ORDER_FACT_i") := "SV_ORDER_FA_70_ENT_NATI";
            	"ORDER_FA_71_ENT_INSI"("ORDER_FACT_i") := "SV_ORDER_FA_71_ENT_INSI";
            	"ORDER_FA_72_ENT_INSI"("ORDER_FACT_i") := "SV_ORDER_FA_72_ENT_INSI";
            	"ORDER_FA_73_ENT_INSI"("ORDER_FACT_i") := "SV_ORDER_FA_73_ENT_INSI";
            	"ORDER_FA_74_ENT_FEDE"("ORDER_FACT_i") := "SV_ORDER_FA_74_ENT_FEDE";
            	"ORDER_FA_75_ENT_FEDE"("ORDER_FACT_i") := "SV_ORDER_FA_75_ENT_FEDE";
            	"ORDER_FA_76_ENT_FEDE"("ORDER_FACT_i") := "SV_ORDER_FA_76_ENT_FEDE";
            	"ORDER_FACT_77_BTSR_TERR_NUM"("ORDER_FACT_i") := "SV_ORDER_FACT_77_BTSR_TERR_NUM";
            	"ORDER_FACT_78_BTSR_REP_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_78_BTSR_REP_ID";
            	"ORDER_FACT_79_BTSR_REP_NAME"("ORDER_FACT_i") := "SV_ORDER_FACT_79_BTSR_REP_NAME";
            	"ORDER_FACT_80_BTA_TERR_NUM"("ORDER_FACT_i") := "SV_ORDER_FACT_80_BTA_TERR_NUM";
            	"ORDER_FACT_81_BTA_REP_ID"("ORDER_FACT_i") := "SV_ORDER_FACT_81_BTA_REP_ID";
            	"ORDER_FACT_82_BTA_REP_NAME"("ORDER_FACT_i") := "SV_ORDER_FACT_82_BTA_REP_NAME";
              "ORDER_FACT_srk"("ORDER_FACT_i") := "SV_ORDER_FACT_srk";
              "ORDER_FACT_i" := "ORDER_FACT_i" + 1;
            ELSE
              "ORDER_FACT_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "FLTR_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "FLTR_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
            "FLTR_ER"('TRACE 15: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "FLTR_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "FLTR_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "FLTR_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "FLTR_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "FLTR_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "ORDER_FACT_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"ORDER_FACT_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"ORDER_FACT_ins",
        p_upd=>"ORDER_FACT_upd",
        p_del=>"ORDER_FACT_del",
        p_err=>"ORDER_FACT_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "ORDER_FACT_ins";
    get_updated  := get_updated  + "ORDER_FACT_upd";
    get_deleted  := get_deleted  + "ORDER_FACT_del";
    get_errors   := get_errors   + "ORDER_FACT_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "FLTR_p";



-- Procedure "FLTR_t" is the entry point for map "FLTR_t"

PROCEDURE "FLTR_t"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"FLTR_t"';
get_source_name            CONSTANT VARCHAR2(2000) := '"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19B0975678E040007F01006C7D,A41FFB19B08E5678E040007F01006C7D,A41FFB19B0955678E040007F01006C7D,A41FFB19B06F5678E040007F01006C7D,A41FFB19ADF05678E040007F01006C7D,A41FFB19B0965678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"ORDER_FACT_id" NUMBER(22) := 0;
"ORDER_FACT_ins" NUMBER(22) := 0;
"ORDER_FACT_upd" NUMBER(22) := 0;
"ORDER_FACT_del" NUMBER(22) := 0;
"ORDER_FACT_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"ORDER_FACT_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"ORDER_FACT_ir"  index_redirect_array;
"SV_ORDER_FACT_srk" NUMBER;
"ORDER_FACT_new"  BOOLEAN;
"ORDER_FACT_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"FLTR_si$1" NUMBER(22) := 0;

"FLTR_i$1" NUMBER(22) := 0;


"ORDER_FACT_si" NUMBER(22) := 0;

"ORDER_FACT_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_FLTR_12_EVXEVENROLLID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_FLTR$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_7_EVXEVENTID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_8_ATTENDEECONTACTID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_5_ENROLL_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_13_EVXEVTICKETID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_LEAD_1_LEADSOUR" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_6_BOOK_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_1_2_REV_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_15_ENROLLSOURCE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_10_ENROLLQTY$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_5_ACTUALAMOUNT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_17_CURRENCYTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_19_SOLDBYUSER$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_30_OPPORTUNITYID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_ORA_TRX_NUM_1_VALUE$1" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_2_2_ZIP_CODE$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_20_COUNTRY$1" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_3_TERRITORY$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_4_REGION$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_5_SALES_REP$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_6_REGION_MGR$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_7_CREATE_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_4_MODIFYDATE_TXFEE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_11_ENROLLSTATUS$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_2_EVXEV_TXFEEID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_16_BILLINGDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_14_ENROLLSTATUSDESC$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_20_FEETYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_21_ENROLLSTATUSDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_PPCARD_DIM_17_SALES_ORDER_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_24_SOURCE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLING_6_BALANCEDUE$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_3_9_LIST_PRICE_OUT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_31_PONUMBER$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_61_EVXPPCA" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_31_METHOD$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_27_CHANNEL$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_28_CREATEUSER_TXFEE$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_29_MODIFYUSER_TXFEE$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_32_REVIEWTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_35_ATTENDEETYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_27_CHECKNU" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_36_COMMENTS$1" IS TABLE OF VARCHAR2(500) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_39_OB_NATIO$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_40_OB_NATIONAL_RE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_41_OB_NATIO$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_42_OB_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_43_OB_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_44_OB_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_45_OSR_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_46_OSR_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_47_OSR_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_48_ENT_NATI$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_49_ENT_NATI$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_50_ENT_NATI$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_51_ENT_INSI$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_52_ENT_INSIDE_RE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_53_ENT_INSI$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_54_ENT_FEDE$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_55_ENT_FEDERAL_RE" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_56_ENT_FEDE$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_57_BTSR_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_58_BTSR_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_59_BTSR_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_60_BTA_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_61_BTA_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_CUST_DIM_62_BTA_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_0_ENROLL_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_1_EVENT_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_2_CUST_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_3_ENROLL_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_4_KEYCODE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_5_BOOK_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_6_REV_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_8_ENROLL_SOURCE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_9_QUANTITY$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_10_BOOK_AMT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_11_CURR_CODE$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_13_SALESPERSON$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_15_OPPORTUNITY_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_17_ORACLE_TRX_N" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_22_GKDW_SOURCE$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_24_ZIP_CODE$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_26_COUNTRY$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_28_TERRITORY$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_29_REGION$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_30_SALES_REP$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_31_REGION_REP$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_32_CREATION_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_33_LAST_UPDATE_" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_34_ENROLL_STAT" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_36_TXFEE_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_37_BILL_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_39_ENROLL_S$1" IS TABLE OF VARCHAR2(70) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_40_FEE_TYPE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_41_ENROLL_S$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_42_PP_SALES$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_43_SOURCE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_44_BAL_DUE$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_45_LIST_PRICE$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_46_PO_NUMBER$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_47_PPCARD_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_48_PAYMENT_METH" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_49_REG_CODE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_50_CREATE_USER$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_51_MODIFY_USER$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_52_ENROLL_TYPE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_56_ATTENDEE_TY" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_57_CHECK_NUMBER$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_58_COMMENTS$1" IS TABLE OF VARCHAR2(500) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_59_OB_NATIO$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_60_OB_NATIO$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_61_OB_NATIO$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_62_OB_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_63_OB_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_64_OB_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_65_OSR_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_66_OSR_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_67_OSR_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_68_ENT_NATI$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_69_ENT_NATI$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_70_ENT_NATI$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_71_ENT_INSI$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_72_ENT_INSI$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_73_ENT_INSI$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_74_ENT_FEDE$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_75_ENT_FEDE$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FA_76_ENT_FEDE$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_77_BTSR_TERR_N" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_78_BTSR_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_79_BTSR_REP_NA" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_80_BTA_TERR_NUM$1" IS TABLE OF VARCHAR2(10) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_81_BTA_REP_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORDER_FACT_82_BTA_REP_NAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_FLTR_12_EVXEVENROLLID$1"  CHAR(12);
"SV_ROWKEY_FLTR$1"  VARCHAR2(18);
"SV_FLTR_7_EVXEVENTID$1"  CHAR(12);
"SV_FLTR_8_ATTENDEECONTACTID$1"  CHAR(12);
"SV_EXPR_5_ENROLL_DATE$1"  DATE;
"SV_FLTR_13_EVXEVTICKETID$1"  CHAR(12);
"SV_GET_LEAD_1_LEADSOUR"  VARCHAR2(32767);
"SV_EXPR_6_BOOK_DATE$1"  DATE;
"SV_EXPR_1_2_REV_DATE$1"  DATE;
"SV_FLTR_15_ENROLLSOURCE$1"  VARCHAR2(32);
"SV_FLTR_10_ENROLLQTY$1"  NUMBER;
"SV_FLTR_5_ACTUALAMOUNT$1"  NUMBER;
"SV_FLTR_17_CURRENCYTYPE$1"  VARCHAR2(32);
"SV_FLTR_19_SOLDBYUSER$1"  VARCHAR2(64);
"SV_FLTR_30_OPPORTUNITYID$1"  CHAR(12);
"SV_GET_ORA_TRX_NUM_1_VALUE$1"  VARCHAR2(32767);
"SV_ROWKEY_DUMMY_TABLE_CURSOR$1"  VARCHAR2(18);
"SV_EXPR_2_2_ZIP_CODE$1"  VARCHAR2(25);
"SV_EVENT_DIM_20_COUNTRY$1"  VARCHAR2(60);
"SV_MARKET_DIM_3_TERRITORY$1"  VARCHAR2(25);
"SV_MARKET_DIM_4_REGION$1"  VARCHAR2(50);
"SV_MARKET_DIM_5_SALES_REP$1"  VARCHAR2(100);
"SV_MARKET_DIM_6_REGION_MGR$1"  VARCHAR2(100);
"SV_EXPR_7_CREATE_DATE$1"  DATE;
"SV_FLTR_4_MODIFYDATE_TXFEE$1"  DATE;
"SV_FLTR_11_ENROLLSTATUS$1"  VARCHAR2(32);
"SV_FLTR_2_EVXEV_TXFEEID$1"  CHAR(12);
"SV_FLTR_16_BILLINGDATE$1"  DATE;
"SV_FLTR_14_ENROLLSTATUSDESC$1"  VARCHAR2(64);
"SV_FLTR_20_FEETYPE$1"  VARCHAR2(32);
"SV_FLTR_21_ENROLLSTATUSDATE$1"  DATE;
"SV_PPCARD_DIM_17_SALES_ORDE"  VARCHAR2(50);
"SV_FLTR_24_SOURCE$1"  VARCHAR2(32);
"SV_EVXBILLING_6_BALANCEDUE$1"  NUMBER;
"SV_EXPR_3_9_LIST_PRICE_OUT$1"  NUMBER;
"SV_FLTR_31_PONUMBER$1"  VARCHAR2(32);
"SV_EVXBILLPAYMENT_61_EVXPPCA"  CHAR(12);
"SV_EVXBILLPAYMENT_31_METHOD$1"  VARCHAR2(32);
"SV_FLTR_27_CHANNEL$1"  VARCHAR2(32);
"SV_FLTR_28_CREATEUSER_TXFEE$1"  CHAR(12);
"SV_FLTR_29_MODIFYUSER_TXFEE$1"  CHAR(12);
"SV_FLTR_32_REVIEWTYPE$1"  VARCHAR2(32);
"SV_FLTR_35_ATTENDEETYPE$1"  VARCHAR2(32);
"SV_EVXBILLPAYMENT_27_CHECKNU"  VARCHAR2(32);
"SV_FLTR_36_COMMENTS$1"  VARCHAR2(500);
"SV_CUST_DIM_39_OB_NATIO$1"  VARCHAR2(10);
"SV_CUST_DIM_40_OB_NATIONAL_"  CHAR(12);
"SV_CUST_DIM_41_OB_NATIO$1"  VARCHAR2(64);
"SV_CUST_DIM_42_OB_TERR_NUM$1"  VARCHAR2(10);
"SV_CUST_DIM_43_OB_REP_ID$1"  CHAR(12);
"SV_CUST_DIM_44_OB_REP_NAME$1"  VARCHAR2(64);
"SV_CUST_DIM_45_OSR_TERR_NUM$1"  VARCHAR2(10);
"SV_CUST_DIM_46_OSR_ID$1"  CHAR(12);
"SV_CUST_DIM_47_OSR_REP_NAME$1"  VARCHAR2(64);
"SV_CUST_DIM_48_ENT_NATI$1"  VARCHAR2(10);
"SV_CUST_DIM_49_ENT_NATI$1"  CHAR(12);
"SV_CUST_DIM_50_ENT_NATI$1"  VARCHAR2(64);
"SV_CUST_DIM_51_ENT_INSI$1"  VARCHAR2(10);
"SV_CUST_DIM_52_ENT_INSIDE_RE"  CHAR(12);
"SV_CUST_DIM_53_ENT_INSI$1"  VARCHAR2(64);
"SV_CUST_DIM_54_ENT_FEDE$1"  VARCHAR2(10);
"SV_CUST_DIM_55_ENT_FEDERAL_"  CHAR(12);
"SV_CUST_DIM_56_ENT_FEDE$1"  VARCHAR2(64);
"SV_CUST_DIM_57_BTSR_TERR_NUM$1"  VARCHAR2(10);
"SV_CUST_DIM_58_BTSR_REP_ID$1"  CHAR(12);
"SV_CUST_DIM_59_BTSR_REP_NAME$1"  VARCHAR2(64);
"SV_CUST_DIM_60_BTA_TERR_NUM$1"  VARCHAR2(10);
"SV_CUST_DIM_61_BTA_REP_ID$1"  CHAR(12);
"SV_CUST_DIM_62_BTA_REP_NAME$1"  VARCHAR2(64);
"SV_ORDER_FACT_0_ENROLL_ID$1"  VARCHAR2(50);
"SV_ORDER_FACT_1_EVENT_ID$1"  VARCHAR2(50);
"SV_ORDER_FACT_2_CUST_ID$1"  VARCHAR2(50);
"SV_ORDER_FACT_3_ENROLL_DATE$1"  DATE;
"SV_ORDER_FACT_4_KEYCODE$1"  VARCHAR2(50);
"SV_ORDER_FACT_5_BOOK_DATE$1"  DATE;
"SV_ORDER_FACT_6_REV_DATE$1"  DATE;
"SV_ORDER_FACT_8_ENROLL_SOUR"  VARCHAR2(50);
"SV_ORDER_FACT_9_QUANTITY$1"  NUMBER;
"SV_ORDER_FACT_10_BOOK_AMT$1"  NUMBER;
"SV_ORDER_FACT_11_CURR_CODE$1"  VARCHAR2(10);
"SV_ORDER_FACT_13_SALESPERSON$1"  VARCHAR2(250);
"SV_ORDER_FACT_15_OPPORTUNIT"  VARCHAR2(50);
"SV_ORDER_FACT_17_ORACLE_TRX"  VARCHAR2(50);
"SV_ORDER_FACT_22_GKDW_SOURCE$1"  VARCHAR2(20);
"SV_ORDER_FACT_24_ZIP_CODE$1"  VARCHAR2(25);
"SV_ORDER_FACT_26_COUNTRY$1"  VARCHAR2(50);
"SV_ORDER_FACT_28_TERRITORY$1"  VARCHAR2(25);
"SV_ORDER_FACT_29_REGION$1"  VARCHAR2(25);
"SV_ORDER_FACT_30_SALES_REP$1"  VARCHAR2(100);
"SV_ORDER_FACT_31_REGION_REP$1"  VARCHAR2(100);
"SV_ORDER_FACT_32_CREATION_DA"  DATE;
"SV_ORDER_FACT_33_LAST_UPDAT"  DATE;
"SV_ORDER_FACT_34_ENROLL_STAT"  VARCHAR2(50);
"SV_ORDER_FACT_36_TXFEE_ID$1"  VARCHAR2(50);
"SV_ORDER_FACT_37_BILL_DATE$1"  DATE;
"SV_ORDER_FA_39_ENROLL_S$1"  VARCHAR2(70);
"SV_ORDER_FACT_40_FEE_TYPE$1"  VARCHAR2(50);
"SV_ORDER_FA_41_ENROLL_S$1"  DATE;
"SV_ORDER_FA_42_PP_SALES$1"  VARCHAR2(50);
"SV_ORDER_FACT_43_SOURCE$1"  VARCHAR2(50);
"SV_ORDER_FACT_44_BAL_DUE$1"  NUMBER;
"SV_ORDER_FACT_45_LIST_PRICE$1"  NUMBER;
"SV_ORDER_FACT_46_PO_NUMBER$1"  VARCHAR2(50);
"SV_ORDER_FACT_47_PPCARD_ID$1"  VARCHAR2(50);
"SV_ORDER_FACT_48_PAYMENT_ME"  VARCHAR2(50);
"SV_ORDER_FACT_49_REG_CODE$1"  VARCHAR2(50);
"SV_ORDER_FACT_50_CREATE_USER$1"  VARCHAR2(50);
"SV_ORDER_FACT_51_MODIFY_USER$1"  VARCHAR2(50);
"SV_ORDER_FACT_52_ENROLL_TYPE$1"  VARCHAR2(50);
"SV_ORDER_FACT_56_ATTENDEE_TY"  VARCHAR2(50);
"SV_ORDER_FACT_57_CHECK_NUMB"  VARCHAR2(50);
"SV_ORDER_FACT_58_COMMENTS$1"  VARCHAR2(500);
"SV_ORDER_FA_59_OB_NATIO$1"  VARCHAR2(10);
"SV_ORDER_FA_60_OB_NATIO$1"  CHAR(12);
"SV_ORDER_FA_61_OB_NATIO$1"  VARCHAR2(64);
"SV_ORDER_FACT_62_OB_TERR_NUM$1"  VARCHAR2(10);
"SV_ORDER_FACT_63_OB_REP_ID$1"  CHAR(12);
"SV_ORDER_FACT_64_OB_REP_NAME$1"  VARCHAR2(64);
"SV_ORDER_FACT_65_OSR_TERR_N"  VARCHAR2(10);
"SV_ORDER_FACT_66_OSR_ID$1"  CHAR(12);
"SV_ORDER_FACT_67_OSR_REP_NA"  VARCHAR2(64);
"SV_ORDER_FA_68_ENT_NATI$1"  VARCHAR2(10);
"SV_ORDER_FA_69_ENT_NATI$1"  CHAR(12);
"SV_ORDER_FA_70_ENT_NATI$1"  VARCHAR2(64);
"SV_ORDER_FA_71_ENT_INSI$1"  VARCHAR2(10);
"SV_ORDER_FA_72_ENT_INSI$1"  CHAR(12);
"SV_ORDER_FA_73_ENT_INSI$1"  VARCHAR2(64);
"SV_ORDER_FA_74_ENT_FEDE$1"  VARCHAR2(10);
"SV_ORDER_FA_75_ENT_FEDE$1"  CHAR(12);
"SV_ORDER_FA_76_ENT_FEDE$1"  VARCHAR2(64);
"SV_ORDER_FACT_77_BTSR_TERR_N"  VARCHAR2(10);
"SV_ORDER_FACT_78_BTSR_REP_ID$1"  CHAR(12);
"SV_ORDER_FACT_79_BTSR_REP_NA"  VARCHAR2(64);
"SV_ORDER_FACT_80_BTA_TERR_N"  VARCHAR2(10);
"SV_ORDER_FACT_81_BTA_REP_ID$1"  CHAR(12);
"SV_ORDER_FACT_82_BTA_REP_NA"  VARCHAR2(64);

-- Bulk: intermediate collection variables
"FLTR_12_EVXEVENROLLID$1" "T_FLTR_12_EVXEVENROLLID$1";
"ROWKEY_FLTR$1" "T_ROWKEY_FLTR$1";
"FLTR_7_EVXEVENTID$1" "T_FLTR_7_EVXEVENTID$1";
"FLTR_8_ATTENDEECONTACTID$1" "T_FLTR_8_ATTENDEECONTACTID$1";
"EXPR_5_ENROLL_DATE$1" "T_EXPR_5_ENROLL_DATE$1";
"FLTR_13_EVXEVTICKETID$1" "T_FLTR_13_EVXEVTICKETID$1";
"GET_LEAD_1_LEADSOUR" "T_GET_LEAD_1_LEADSOUR";
"EXPR_6_BOOK_DATE$1" "T_EXPR_6_BOOK_DATE$1";
"EXPR_1_2_REV_DATE$1" "T_EXPR_1_2_REV_DATE$1";
"FLTR_15_ENROLLSOURCE$1" "T_FLTR_15_ENROLLSOURCE$1";
"FLTR_10_ENROLLQTY$1" "T_FLTR_10_ENROLLQTY$1";
"FLTR_5_ACTUALAMOUNT$1" "T_FLTR_5_ACTUALAMOUNT$1";
"FLTR_17_CURRENCYTYPE$1" "T_FLTR_17_CURRENCYTYPE$1";
"FLTR_19_SOLDBYUSER$1" "T_FLTR_19_SOLDBYUSER$1";
"FLTR_30_OPPORTUNITYID$1" "T_FLTR_30_OPPORTUNITYID$1";
"GET_ORA_TRX_NUM_1_VALUE$1" "T_GET_ORA_TRX_NUM_1_VALUE$1";
"ROWKEY_DUMMY_TABLE_CURSOR$1" "T_ROWKEY_DUMMY_TABLE_CURSOR$1";
"EXPR_2_2_ZIP_CODE$1" "T_EXPR_2_2_ZIP_CODE$1";
"EVENT_DIM_20_COUNTRY$1" "T_EVENT_DIM_20_COUNTRY$1";
"MARKET_DIM_3_TERRITORY$1" "T_MARKET_DIM_3_TERRITORY$1";
"MARKET_DIM_4_REGION$1" "T_MARKET_DIM_4_REGION$1";
"MARKET_DIM_5_SALES_REP$1" "T_MARKET_DIM_5_SALES_REP$1";
"MARKET_DIM_6_REGION_MGR$1" "T_MARKET_DIM_6_REGION_MGR$1";
"EXPR_7_CREATE_DATE$1" "T_EXPR_7_CREATE_DATE$1";
"FLTR_4_MODIFYDATE_TXFEE$1" "T_FLTR_4_MODIFYDATE_TXFEE$1";
"FLTR_11_ENROLLSTATUS$1" "T_FLTR_11_ENROLLSTATUS$1";
"FLTR_2_EVXEV_TXFEEID$1" "T_FLTR_2_EVXEV_TXFEEID$1";
"FLTR_16_BILLINGDATE$1" "T_FLTR_16_BILLINGDATE$1";
"FLTR_14_ENROLLSTATUSDESC$1" "T_FLTR_14_ENROLLSTATUSDESC$1";
"FLTR_20_FEETYPE$1" "T_FLTR_20_FEETYPE$1";
"FLTR_21_ENROLLSTATUSDATE$1" "T_FLTR_21_ENROLLSTATUSDATE$1";
"PPCARD_DIM_17_SALES_ORDER_ID$1" "T_PPCARD_DIM_17_SALES_ORDER_";
"FLTR_24_SOURCE$1" "T_FLTR_24_SOURCE$1";
"EVXBILLING_6_BALANCEDUE$1" "T_EVXBILLING_6_BALANCEDUE$1";
"EXPR_3_9_LIST_PRICE_OUT$1" "T_EXPR_3_9_LIST_PRICE_OUT$1";
"FLTR_31_PONUMBER$1" "T_FLTR_31_PONUMBER$1";
"EVXBILLPAYMENT_61_EVXPPCARD" "T_EVXBILLPAYMENT_61_EVXPPCA";
"EVXBILLPAYMENT_31_METHOD$1" "T_EVXBILLPAYMENT_31_METHOD$1";
"FLTR_27_CHANNEL$1" "T_FLTR_27_CHANNEL$1";
"FLTR_28_CREATEUSER_TXFEE$1" "T_FLTR_28_CREATEUSER_TXFEE$1";
"FLTR_29_MODIFYUSER_TXFEE$1" "T_FLTR_29_MODIFYUSER_TXFEE$1";
"FLTR_32_REVIEWTYPE$1" "T_FLTR_32_REVIEWTYPE$1";
"FLTR_35_ATTENDEETYPE$1" "T_FLTR_35_ATTENDEETYPE$1";
"EVXBILLPAYMENT_27_CHECKNUMB" "T_EVXBILLPAYMENT_27_CHECKNU";
"FLTR_36_COMMENTS$1" "T_FLTR_36_COMMENTS$1";
"CUST_DIM_39_OB_NATIO$1" "T_CUST_DIM_39_OB_NATIO$1";
"CUST_DIM_40_OB_NATIONAL_REP_" "T_CUST_DIM_40_OB_NATIONAL_RE";
"CUST_DIM_41_OB_NATIO$1" "T_CUST_DIM_41_OB_NATIO$1";
"CUST_DIM_42_OB_TERR_NUM$1" "T_CUST_DIM_42_OB_TERR_NUM$1";
"CUST_DIM_43_OB_REP_ID$1" "T_CUST_DIM_43_OB_REP_ID$1";
"CUST_DIM_44_OB_REP_NAME$1" "T_CUST_DIM_44_OB_REP_NAME$1";
"CUST_DIM_45_OSR_TERR_NUM$1" "T_CUST_DIM_45_OSR_TERR_NUM$1";
"CUST_DIM_46_OSR_ID$1" "T_CUST_DIM_46_OSR_ID$1";
"CUST_DIM_47_OSR_REP_NAME$1" "T_CUST_DIM_47_OSR_REP_NAME$1";
"CUST_DIM_48_ENT_NATI$1" "T_CUST_DIM_48_ENT_NATI$1";
"CUST_DIM_49_ENT_NATI$1" "T_CUST_DIM_49_ENT_NATI$1";
"CUST_DIM_50_ENT_NATI$1" "T_CUST_DIM_50_ENT_NATI$1";
"CUST_DIM_51_ENT_INSI$1" "T_CUST_DIM_51_ENT_INSI$1";
"CUST_DIM_52_ENT_INSIDE_REP_" "T_CUST_DIM_52_ENT_INSIDE_RE";
"CUST_DIM_53_ENT_INSI$1" "T_CUST_DIM_53_ENT_INSI$1";
"CUST_DIM_54_ENT_FEDE$1" "T_CUST_DIM_54_ENT_FEDE$1";
"CUST_DIM_55_ENT_FEDERAL_REP_" "T_CUST_DIM_55_ENT_FEDERAL_RE";
"CUST_DIM_56_ENT_FEDE$1" "T_CUST_DIM_56_ENT_FEDE$1";
"CUST_DIM_57_BTSR_TERR_NUM$1" "T_CUST_DIM_57_BTSR_TERR_NUM$1";
"CUST_DIM_58_BTSR_REP_ID$1" "T_CUST_DIM_58_BTSR_REP_ID$1";
"CUST_DIM_59_BTSR_REP_NAME$1" "T_CUST_DIM_59_BTSR_REP_NAME$1";
"CUST_DIM_60_BTA_TERR_NUM$1" "T_CUST_DIM_60_BTA_TERR_NUM$1";
"CUST_DIM_61_BTA_REP_ID$1" "T_CUST_DIM_61_BTA_REP_ID$1";
"CUST_DIM_62_BTA_REP_NAME$1" "T_CUST_DIM_62_BTA_REP_NAME$1";
"ORDER_FACT_0_ENROLL_ID$1" "T_ORDER_FACT_0_ENROLL_ID$1";
"ORDER_FACT_1_EVENT_ID$1" "T_ORDER_FACT_1_EVENT_ID$1";
"ORDER_FACT_2_CUST_ID$1" "T_ORDER_FACT_2_CUST_ID$1";
"ORDER_FACT_3_ENROLL_DATE$1" "T_ORDER_FACT_3_ENROLL_DATE$1";
"ORDER_FACT_4_KEYCODE$1" "T_ORDER_FACT_4_KEYCODE$1";
"ORDER_FACT_5_BOOK_DATE$1" "T_ORDER_FACT_5_BOOK_DATE$1";
"ORDER_FACT_6_REV_DATE$1" "T_ORDER_FACT_6_REV_DATE$1";
"ORDER_FACT_8_ENROLL_SOURCE$1" "T_ORDER_FACT_8_ENROLL_SOURCE$1";
"ORDER_FACT_9_QUANTITY$1" "T_ORDER_FACT_9_QUANTITY$1";
"ORDER_FACT_10_BOOK_AMT$1" "T_ORDER_FACT_10_BOOK_AMT$1";
"ORDER_FACT_11_CURR_CODE$1" "T_ORDER_FACT_11_CURR_CODE$1";
"ORDER_FACT_13_SALESPERSON$1" "T_ORDER_FACT_13_SALESPERSON$1";
"ORDER_FACT_15_OPPORTUNITY_ID$1" "T_ORDER_FACT_15_OPPORTUNITY_";
"ORDER_FACT_17_ORACLE_TRX_NUM$1" "T_ORDER_FACT_17_ORACLE_TRX_N";
"ORDER_FACT_22_GKDW_SOURCE$1" "T_ORDER_FACT_22_GKDW_SOURCE$1";
"ORDER_FACT_24_ZIP_CODE$1" "T_ORDER_FACT_24_ZIP_CODE$1";
"ORDER_FACT_26_COUNTRY$1" "T_ORDER_FACT_26_COUNTRY$1";
"ORDER_FACT_28_TERRITORY$1" "T_ORDER_FACT_28_TERRITORY$1";
"ORDER_FACT_29_REGION$1" "T_ORDER_FACT_29_REGION$1";
"ORDER_FACT_30_SALES_REP$1" "T_ORDER_FACT_30_SALES_REP$1";
"ORDER_FACT_31_REGION_REP$1" "T_ORDER_FACT_31_REGION_REP$1";
"ORDER_FACT_32_CREATION_DATE$1" "T_ORDER_FACT_32_CREATION_DA";
"ORDER_FACT_33_LAST_UPDATE_DA" "T_ORDER_FACT_33_LAST_UPDATE_";
"ORDER_FACT_34_ENROLL_STATUS$1" "T_ORDER_FACT_34_ENROLL_STAT";
"ORDER_FACT_36_TXFEE_ID$1" "T_ORDER_FACT_36_TXFEE_ID$1";
"ORDER_FACT_37_BILL_DATE$1" "T_ORDER_FACT_37_BILL_DATE$1";
"ORDER_FA_39_ENROLL_S$1" "T_ORDER_FA_39_ENROLL_S$1";
"ORDER_FACT_40_FEE_TYPE$1" "T_ORDER_FACT_40_FEE_TYPE$1";
"ORDER_FA_41_ENROLL_S$1" "T_ORDER_FA_41_ENROLL_S$1";
"ORDER_FA_42_PP_SALES$1" "T_ORDER_FA_42_PP_SALES$1";
"ORDER_FACT_43_SOURCE$1" "T_ORDER_FACT_43_SOURCE$1";
"ORDER_FACT_44_BAL_DUE$1" "T_ORDER_FACT_44_BAL_DUE$1";
"ORDER_FACT_45_LIST_PRICE$1" "T_ORDER_FACT_45_LIST_PRICE$1";
"ORDER_FACT_46_PO_NUMBER$1" "T_ORDER_FACT_46_PO_NUMBER$1";
"ORDER_FACT_47_PPCARD_ID$1" "T_ORDER_FACT_47_PPCARD_ID$1";
"ORDER_FACT_48_PAYMENT_METHOD$1" "T_ORDER_FACT_48_PAYMENT_METH";
"ORDER_FACT_49_REG_CODE$1" "T_ORDER_FACT_49_REG_CODE$1";
"ORDER_FACT_50_CREATE_USER$1" "T_ORDER_FACT_50_CREATE_USER$1";
"ORDER_FACT_51_MODIFY_USER$1" "T_ORDER_FACT_51_MODIFY_USER$1";
"ORDER_FACT_52_ENROLL_TYPE$1" "T_ORDER_FACT_52_ENROLL_TYPE$1";
"ORDER_FACT_56_ATTENDEE_TYPE$1" "T_ORDER_FACT_56_ATTENDEE_TY";
"ORDER_FACT_57_CHECK_NUMBER$1" "T_ORDER_FACT_57_CHECK_NUMBER$1";
"ORDER_FACT_58_COMMENTS$1" "T_ORDER_FACT_58_COMMENTS$1";
"ORDER_FA_59_OB_NATIO$1" "T_ORDER_FA_59_OB_NATIO$1";
"ORDER_FA_60_OB_NATIO$1" "T_ORDER_FA_60_OB_NATIO$1";
"ORDER_FA_61_OB_NATIO$1" "T_ORDER_FA_61_OB_NATIO$1";
"ORDER_FACT_62_OB_TERR_NUM$1" "T_ORDER_FACT_62_OB_TERR_NUM$1";
"ORDER_FACT_63_OB_REP_ID$1" "T_ORDER_FACT_63_OB_REP_ID$1";
"ORDER_FACT_64_OB_REP_NAME$1" "T_ORDER_FACT_64_OB_REP_NAME$1";
"ORDER_FACT_65_OSR_TERR_NUM$1" "T_ORDER_FACT_65_OSR_TERR_NUM$1";
"ORDER_FACT_66_OSR_ID$1" "T_ORDER_FACT_66_OSR_ID$1";
"ORDER_FACT_67_OSR_REP_NAME$1" "T_ORDER_FACT_67_OSR_REP_NAME$1";
"ORDER_FA_68_ENT_NATI$1" "T_ORDER_FA_68_ENT_NATI$1";
"ORDER_FA_69_ENT_NATI$1" "T_ORDER_FA_69_ENT_NATI$1";
"ORDER_FA_70_ENT_NATI$1" "T_ORDER_FA_70_ENT_NATI$1";
"ORDER_FA_71_ENT_INSI$1" "T_ORDER_FA_71_ENT_INSI$1";
"ORDER_FA_72_ENT_INSI$1" "T_ORDER_FA_72_ENT_INSI$1";
"ORDER_FA_73_ENT_INSI$1" "T_ORDER_FA_73_ENT_INSI$1";
"ORDER_FA_74_ENT_FEDE$1" "T_ORDER_FA_74_ENT_FEDE$1";
"ORDER_FA_75_ENT_FEDE$1" "T_ORDER_FA_75_ENT_FEDE$1";
"ORDER_FA_76_ENT_FEDE$1" "T_ORDER_FA_76_ENT_FEDE$1";
"ORDER_FACT_77_BTSR_TERR_NUM$1" "T_ORDER_FACT_77_BTSR_TERR_N";
"ORDER_FACT_78_BTSR_REP_ID$1" "T_ORDER_FACT_78_BTSR_REP_ID$1";
"ORDER_FACT_79_BTSR_REP_NAME$1" "T_ORDER_FACT_79_BTSR_REP_NA";
"ORDER_FACT_80_BTA_TERR_NUM$1" "T_ORDER_FACT_80_BTA_TERR_NUM$1";
"ORDER_FACT_81_BTA_REP_ID$1" "T_ORDER_FACT_81_BTA_REP_ID$1";
"ORDER_FACT_82_BTA_REP_NAME$1" "T_ORDER_FACT_82_BTA_REP_NAME$1";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "FLTR_ES$1"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_12_EVXEVENROLLID',0,80),
    p_value=>SUBSTRB("FLTR_12_EVXEVENROLLID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_7_EVXEVENTID',0,80),
    p_value=>SUBSTRB("FLTR_7_EVXEVENTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_8_ATTENDEECONTACTID',0,80),
    p_value=>SUBSTRB("FLTR_8_ATTENDEECONTACTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_5_ENROLL_DATE',0,80),
    p_value=>SUBSTRB("EXPR_5_ENROLL_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_13_EVXEVTICKETID',0,80),
    p_value=>SUBSTRB("FLTR_13_EVXEVTICKETID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_6_BOOK_DATE',0,80),
    p_value=>SUBSTRB("EXPR_6_BOOK_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_1_2_REV_DATE',0,80),
    p_value=>SUBSTRB("EXPR_1_2_REV_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_15_ENROLLSOURCE',0,80),
    p_value=>SUBSTRB("FLTR_15_ENROLLSOURCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_10_ENROLLQTY',0,80),
    p_value=>SUBSTRB("FLTR_10_ENROLLQTY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_5_ACTUALAMOUNT',0,80),
    p_value=>SUBSTRB("FLTR_5_ACTUALAMOUNT$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_17_CURRENCYTYPE',0,80),
    p_value=>SUBSTRB("FLTR_17_CURRENCYTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_19_SOLDBYUSER',0,80),
    p_value=>SUBSTRB("FLTR_19_SOLDBYUSER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_30_OPPORTUNITYID',0,80),
    p_value=>SUBSTRB("FLTR_30_OPPORTUNITYID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('GET_ORA_TRX_NUM_1_VALUE',0,80),
    p_value=>SUBSTRB("GET_ORA_TRX_NUM_1_VALUE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_2_2_ZIP_CODE',0,80),
    p_value=>SUBSTRB("EXPR_2_2_ZIP_CODE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVENT_DIM_20_COUNTRY',0,80),
    p_value=>SUBSTRB("EVENT_DIM_20_COUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_3_TERRITORY',0,80),
    p_value=>SUBSTRB("MARKET_DIM_3_TERRITORY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_4_REGION',0,80),
    p_value=>SUBSTRB("MARKET_DIM_4_REGION$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_5_SALES_REP',0,80),
    p_value=>SUBSTRB("MARKET_DIM_5_SALES_REP$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('MARKET_DIM_6_REGION_MGR',0,80),
    p_value=>SUBSTRB("MARKET_DIM_6_REGION_MGR$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_7_CREATE_DATE',0,80),
    p_value=>SUBSTRB("EXPR_7_CREATE_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_4_MODIFYDATE_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_4_MODIFYDATE_TXFEE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_11_ENROLLSTATUS',0,80),
    p_value=>SUBSTRB("FLTR_11_ENROLLSTATUS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_2_EVXEV_TXFEEID',0,80),
    p_value=>SUBSTRB("FLTR_2_EVXEV_TXFEEID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_16_BILLINGDATE',0,80),
    p_value=>SUBSTRB("FLTR_16_BILLINGDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_14_ENROLLSTATUSDESC',0,80),
    p_value=>SUBSTRB("FLTR_14_ENROLLSTATUSDESC$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_20_FEETYPE',0,80),
    p_value=>SUBSTRB("FLTR_20_FEETYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_21_ENROLLSTATUSDATE',0,80),
    p_value=>SUBSTRB("FLTR_21_ENROLLSTATUSDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('PPCARD_DIM_17_SALES_ORDER_ID',0,80),
    p_value=>SUBSTRB("PPCARD_DIM_17_SALES_ORDER_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_24_SOURCE',0,80),
    p_value=>SUBSTRB("FLTR_24_SOURCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLING_6_BALANCEDUE',0,80),
    p_value=>SUBSTRB("EVXBILLING_6_BALANCEDUE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EXPR_3_9_LIST_PRICE_OUT',0,80),
    p_value=>SUBSTRB("EXPR_3_9_LIST_PRICE_OUT$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_31_PONUMBER',0,80),
    p_value=>SUBSTRB("FLTR_31_PONUMBER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_61_EVXPPCARDID',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_61_EVXPPCARD"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_31_METHOD',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_31_METHOD$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_27_CHANNEL',0,80),
    p_value=>SUBSTRB("FLTR_27_CHANNEL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_28_CREATEUSER_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_28_CREATEUSER_TXFEE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_29_MODIFYUSER_TXFEE',0,80),
    p_value=>SUBSTRB("FLTR_29_MODIFYUSER_TXFEE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_32_REVIEWTYPE',0,80),
    p_value=>SUBSTRB("FLTR_32_REVIEWTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_35_ATTENDEETYPE',0,80),
    p_value=>SUBSTRB("FLTR_35_ATTENDEETYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_27_CHECKNUMBER',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_27_CHECKNUMB"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('FLTR_36_COMMENTS',0,80),
    p_value=>SUBSTRB("FLTR_36_COMMENTS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_39_OB_NATIO',0,80),
    p_value=>SUBSTRB("CUST_DIM_39_OB_NATIO$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_40_OB_NATIONAL_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_40_OB_NATIONAL_REP_"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_41_OB_NATIO',0,80),
    p_value=>SUBSTRB("CUST_DIM_41_OB_NATIO$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_42_OB_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_42_OB_TERR_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>47,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_43_OB_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_43_OB_REP_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>48,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_44_OB_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_44_OB_REP_NAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>49,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_45_OSR_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_45_OSR_TERR_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>50,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_46_OSR_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_46_OSR_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>51,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_47_OSR_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_47_OSR_REP_NAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>52,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_48_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_48_ENT_NATI$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>53,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_49_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_49_ENT_NATI$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>54,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_50_ENT_NATI',0,80),
    p_value=>SUBSTRB("CUST_DIM_50_ENT_NATI$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>55,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_51_ENT_INSI',0,80),
    p_value=>SUBSTRB("CUST_DIM_51_ENT_INSI$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>56,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_52_ENT_INSIDE_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_52_ENT_INSIDE_REP_"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>57,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_53_ENT_INSI',0,80),
    p_value=>SUBSTRB("CUST_DIM_53_ENT_INSI$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>58,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_54_ENT_FEDE',0,80),
    p_value=>SUBSTRB("CUST_DIM_54_ENT_FEDE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>59,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_55_ENT_FEDERAL_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_55_ENT_FEDERAL_REP_"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>60,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_56_ENT_FEDE',0,80),
    p_value=>SUBSTRB("CUST_DIM_56_ENT_FEDE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>61,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_57_BTSR_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_57_BTSR_TERR_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>62,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_58_BTSR_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_58_BTSR_REP_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>63,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_59_BTSR_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_59_BTSR_REP_NAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>64,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_60_BTA_TERR_NUM',0,80),
    p_value=>SUBSTRB("CUST_DIM_60_BTA_TERR_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>65,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_61_BTA_REP_ID',0,80),
    p_value=>SUBSTRB("CUST_DIM_61_BTA_REP_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>66,
    p_instance=>1,
    p_table=>SUBSTR('"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',0,80),
    p_column=>SUBSTR('CUST_DIM_62_BTA_REP_NAME',0,80),
    p_value=>SUBSTRB("CUST_DIM_62_BTA_REP_NAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "FLTR_ES$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "FLTR_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 18: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "FLTR_ES$1"(p_error_index);
  END IF;
END "FLTR_ER$1";



---------------------------------------------------------------------------
-- Procedure "FLTR_SU$1" opens and initializes data source
-- for map "FLTR_t"
---------------------------------------------------------------------------
PROCEDURE "FLTR_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "FLTR_c$1"%ISOPEN) THEN
    OPEN "FLTR_c$1";
  END IF;
  get_read_success := TRUE;
END "FLTR_SU$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_RD$1" fetches a bulk of rows from
--   the data source for map "FLTR_t"
---------------------------------------------------------------------------
PROCEDURE "FLTR_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "FLTR_12_EVXEVENROLLID$1".DELETE;
    "FLTR_7_EVXEVENTID$1".DELETE;
    "FLTR_8_ATTENDEECONTACTID$1".DELETE;
    "EXPR_5_ENROLL_DATE$1".DELETE;
    "FLTR_13_EVXEVTICKETID$1".DELETE;
    "EXPR_6_BOOK_DATE$1".DELETE;
    "EXPR_1_2_REV_DATE$1".DELETE;
    "FLTR_15_ENROLLSOURCE$1".DELETE;
    "FLTR_10_ENROLLQTY$1".DELETE;
    "FLTR_5_ACTUALAMOUNT$1".DELETE;
    "FLTR_17_CURRENCYTYPE$1".DELETE;
    "FLTR_19_SOLDBYUSER$1".DELETE;
    "FLTR_30_OPPORTUNITYID$1".DELETE;
    "GET_ORA_TRX_NUM_1_VALUE$1".DELETE;
    "EXPR_2_2_ZIP_CODE$1".DELETE;
    "EVENT_DIM_20_COUNTRY$1".DELETE;
    "MARKET_DIM_3_TERRITORY$1".DELETE;
    "MARKET_DIM_4_REGION$1".DELETE;
    "MARKET_DIM_5_SALES_REP$1".DELETE;
    "MARKET_DIM_6_REGION_MGR$1".DELETE;
    "EXPR_7_CREATE_DATE$1".DELETE;
    "FLTR_4_MODIFYDATE_TXFEE$1".DELETE;
    "FLTR_11_ENROLLSTATUS$1".DELETE;
    "FLTR_2_EVXEV_TXFEEID$1".DELETE;
    "FLTR_16_BILLINGDATE$1".DELETE;
    "FLTR_14_ENROLLSTATUSDESC$1".DELETE;
    "FLTR_20_FEETYPE$1".DELETE;
    "FLTR_21_ENROLLSTATUSDATE$1".DELETE;
    "PPCARD_DIM_17_SALES_ORDER_ID$1".DELETE;
    "FLTR_24_SOURCE$1".DELETE;
    "EVXBILLING_6_BALANCEDUE$1".DELETE;
    "EXPR_3_9_LIST_PRICE_OUT$1".DELETE;
    "FLTR_31_PONUMBER$1".DELETE;
    "EVXBILLPAYMENT_61_EVXPPCARD".DELETE;
    "EVXBILLPAYMENT_31_METHOD$1".DELETE;
    "FLTR_27_CHANNEL$1".DELETE;
    "FLTR_28_CREATEUSER_TXFEE$1".DELETE;
    "FLTR_29_MODIFYUSER_TXFEE$1".DELETE;
    "FLTR_32_REVIEWTYPE$1".DELETE;
    "FLTR_35_ATTENDEETYPE$1".DELETE;
    "EVXBILLPAYMENT_27_CHECKNUMB".DELETE;
    "FLTR_36_COMMENTS$1".DELETE;
    "CUST_DIM_39_OB_NATIO$1".DELETE;
    "CUST_DIM_40_OB_NATIONAL_REP_".DELETE;
    "CUST_DIM_41_OB_NATIO$1".DELETE;
    "CUST_DIM_42_OB_TERR_NUM$1".DELETE;
    "CUST_DIM_43_OB_REP_ID$1".DELETE;
    "CUST_DIM_44_OB_REP_NAME$1".DELETE;
    "CUST_DIM_45_OSR_TERR_NUM$1".DELETE;
    "CUST_DIM_46_OSR_ID$1".DELETE;
    "CUST_DIM_47_OSR_REP_NAME$1".DELETE;
    "CUST_DIM_48_ENT_NATI$1".DELETE;
    "CUST_DIM_49_ENT_NATI$1".DELETE;
    "CUST_DIM_50_ENT_NATI$1".DELETE;
    "CUST_DIM_51_ENT_INSI$1".DELETE;
    "CUST_DIM_52_ENT_INSIDE_REP_".DELETE;
    "CUST_DIM_53_ENT_INSI$1".DELETE;
    "CUST_DIM_54_ENT_FEDE$1".DELETE;
    "CUST_DIM_55_ENT_FEDERAL_REP_".DELETE;
    "CUST_DIM_56_ENT_FEDE$1".DELETE;
    "CUST_DIM_57_BTSR_TERR_NUM$1".DELETE;
    "CUST_DIM_58_BTSR_REP_ID$1".DELETE;
    "CUST_DIM_59_BTSR_REP_NAME$1".DELETE;
    "CUST_DIM_60_BTA_TERR_NUM$1".DELETE;
    "CUST_DIM_61_BTA_REP_ID$1".DELETE;
    "CUST_DIM_62_BTA_REP_NAME$1".DELETE;

    FETCH
      "FLTR_c$1"
    BULK COLLECT INTO
      "FLTR_12_EVXEVENROLLID$1",
      "FLTR_7_EVXEVENTID$1",
      "FLTR_8_ATTENDEECONTACTID$1",
      "EXPR_5_ENROLL_DATE$1",
      "FLTR_13_EVXEVTICKETID$1",
      "EXPR_6_BOOK_DATE$1",
      "EXPR_1_2_REV_DATE$1",
      "FLTR_15_ENROLLSOURCE$1",
      "FLTR_10_ENROLLQTY$1",
      "FLTR_5_ACTUALAMOUNT$1",
      "FLTR_17_CURRENCYTYPE$1",
      "FLTR_19_SOLDBYUSER$1",
      "FLTR_30_OPPORTUNITYID$1",
      "GET_ORA_TRX_NUM_1_VALUE$1",
      "EXPR_2_2_ZIP_CODE$1",
      "EVENT_DIM_20_COUNTRY$1",
      "MARKET_DIM_3_TERRITORY$1",
      "MARKET_DIM_4_REGION$1",
      "MARKET_DIM_5_SALES_REP$1",
      "MARKET_DIM_6_REGION_MGR$1",
      "EXPR_7_CREATE_DATE$1",
      "FLTR_4_MODIFYDATE_TXFEE$1",
      "FLTR_11_ENROLLSTATUS$1",
      "FLTR_2_EVXEV_TXFEEID$1",
      "FLTR_16_BILLINGDATE$1",
      "FLTR_14_ENROLLSTATUSDESC$1",
      "FLTR_20_FEETYPE$1",
      "FLTR_21_ENROLLSTATUSDATE$1",
      "PPCARD_DIM_17_SALES_ORDER_ID$1",
      "FLTR_24_SOURCE$1",
      "EVXBILLING_6_BALANCEDUE$1",
      "EXPR_3_9_LIST_PRICE_OUT$1",
      "FLTR_31_PONUMBER$1",
      "EVXBILLPAYMENT_61_EVXPPCARD",
      "EVXBILLPAYMENT_31_METHOD$1",
      "FLTR_27_CHANNEL$1",
      "FLTR_28_CREATEUSER_TXFEE$1",
      "FLTR_29_MODIFYUSER_TXFEE$1",
      "FLTR_32_REVIEWTYPE$1",
      "FLTR_35_ATTENDEETYPE$1",
      "EVXBILLPAYMENT_27_CHECKNUMB",
      "FLTR_36_COMMENTS$1",
      "CUST_DIM_39_OB_NATIO$1",
      "CUST_DIM_40_OB_NATIONAL_REP_",
      "CUST_DIM_41_OB_NATIO$1",
      "CUST_DIM_42_OB_TERR_NUM$1",
      "CUST_DIM_43_OB_REP_ID$1",
      "CUST_DIM_44_OB_REP_NAME$1",
      "CUST_DIM_45_OSR_TERR_NUM$1",
      "CUST_DIM_46_OSR_ID$1",
      "CUST_DIM_47_OSR_REP_NAME$1",
      "CUST_DIM_48_ENT_NATI$1",
      "CUST_DIM_49_ENT_NATI$1",
      "CUST_DIM_50_ENT_NATI$1",
      "CUST_DIM_51_ENT_INSI$1",
      "CUST_DIM_52_ENT_INSIDE_REP_",
      "CUST_DIM_53_ENT_INSI$1",
      "CUST_DIM_54_ENT_FEDE$1",
      "CUST_DIM_55_ENT_FEDERAL_REP_",
      "CUST_DIM_56_ENT_FEDE$1",
      "CUST_DIM_57_BTSR_TERR_NUM$1",
      "CUST_DIM_58_BTSR_REP_ID$1",
      "CUST_DIM_59_BTSR_REP_NAME$1",
      "CUST_DIM_60_BTA_TERR_NUM$1",
      "CUST_DIM_61_BTA_REP_ID$1",
      "CUST_DIM_62_BTA_REP_NAME$1"
    LIMIT get_bulk_size;

    IF "FLTR_c$1"%NOTFOUND AND "FLTR_12_EVXEVENROLLID$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "FLTR_12_EVXEVENROLLID$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "FLTR_12_EVXEVENROLLID$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 19: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "FLTR_RD$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "FLTR_DML$1"(si NUMBER, firstround BOOLEAN) IS
  "ORDER_FACT_ins0" NUMBER := "ORDER_FACT_ins";
  "ORDER_FACT_upd0" NUMBER := "ORDER_FACT_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "ORDER_FACT_St" THEN
  -- Update/Insert DML for "ORDER_FACT"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"ORDER_FACT"';
    get_audit_detail_id := "ORDER_FACT_id";
    "ORDER_FACT_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "ORDER_FACT_i" > get_bulk_size 
   OR "FLTR_c$1"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "ORDER_FACT_si".."ORDER_FACT_i" - 1 
            UPDATE
              "ORDER_FACT"
            SET
  
  						"ORDER_FACT"."ENROLL_ID" = "ORDER_FACT_0_ENROLL_ID$1"
  (i),						"ORDER_FACT"."EVENT_ID" = "ORDER_FACT_1_EVENT_ID$1"
  (i),						"ORDER_FACT"."CUST_ID" = "ORDER_FACT_2_CUST_ID$1"
  (i),						"ORDER_FACT"."ENROLL_DATE" = "ORDER_FACT_3_ENROLL_DATE$1"
  (i),						"ORDER_FACT"."KEYCODE" = "ORDER_FACT_4_KEYCODE$1"
  (i),						"ORDER_FACT"."BOOK_DATE" = "ORDER_FACT_5_BOOK_DATE$1"
  (i),						"ORDER_FACT"."REV_DATE" = "ORDER_FACT_6_REV_DATE$1"
  (i),						"ORDER_FACT"."ENROLL_SOURCE" = "ORDER_FACT_8_ENROLL_SOURCE$1"
  (i),						"ORDER_FACT"."QUANTITY" = "ORDER_FACT_9_QUANTITY$1"
  (i),						"ORDER_FACT"."BOOK_AMT" = "ORDER_FACT_10_BOOK_AMT$1"
  (i),						"ORDER_FACT"."CURR_CODE" = "ORDER_FACT_11_CURR_CODE$1"
  (i),						"ORDER_FACT"."SALESPERSON" = "ORDER_FACT_13_SALESPERSON$1"
  (i),						"ORDER_FACT"."OPPORTUNITY_ID" = "ORDER_FACT_15_OPPORTUNITY_ID$1"
  (i),						"ORDER_FACT"."ORACLE_TRX_NUM" = "ORDER_FACT_17_ORACLE_TRX_NUM$1"
  (i),						"ORDER_FACT"."GKDW_SOURCE" = "ORDER_FACT_22_GKDW_SOURCE$1"
  (i),						"ORDER_FACT"."ZIP_CODE" = "ORDER_FACT_24_ZIP_CODE$1"
  (i),						"ORDER_FACT"."COUNTRY" = "ORDER_FACT_26_COUNTRY$1"
  (i),						"ORDER_FACT"."TERRITORY" = "ORDER_FACT_28_TERRITORY$1"
  (i),						"ORDER_FACT"."REGION" = "ORDER_FACT_29_REGION$1"
  (i),						"ORDER_FACT"."SALES_REP" = "ORDER_FACT_30_SALES_REP$1"
  (i),						"ORDER_FACT"."REGION_REP" = "ORDER_FACT_31_REGION_REP$1"
  (i),						"ORDER_FACT"."CREATION_DATE" = "ORDER_FACT_32_CREATION_DATE$1"
  (i),						"ORDER_FACT"."LAST_UPDATE_DATE" = "ORDER_FACT_33_LAST_UPDATE_DA"
  (i),						"ORDER_FACT"."ENROLL_STATUS" = "ORDER_FACT_34_ENROLL_STATUS$1"
  (i),						"ORDER_FACT"."BILL_DATE" = "ORDER_FACT_37_BILL_DATE$1"
  (i),						"ORDER_FACT"."ENROLL_STATUS_DESC" = "ORDER_FA_39_ENROLL_S$1"
  (i),						"ORDER_FACT"."FEE_TYPE" = "ORDER_FACT_40_FEE_TYPE$1"
  (i),						"ORDER_FACT"."ENROLL_STATUS_DATE" = "ORDER_FA_41_ENROLL_S$1"
  (i),						"ORDER_FACT"."PP_SALES_ORDER_ID" = "ORDER_FA_42_PP_SALES$1"
  (i),						"ORDER_FACT"."SOURCE" = "ORDER_FACT_43_SOURCE$1"
  (i),						"ORDER_FACT"."BAL_DUE" = "ORDER_FACT_44_BAL_DUE$1"
  (i),						"ORDER_FACT"."LIST_PRICE" = "ORDER_FACT_45_LIST_PRICE$1"
  (i),						"ORDER_FACT"."PO_NUMBER" = "ORDER_FACT_46_PO_NUMBER$1"
  (i),						"ORDER_FACT"."PPCARD_ID" = "ORDER_FACT_47_PPCARD_ID$1"
  (i),						"ORDER_FACT"."PAYMENT_METHOD" = "ORDER_FACT_48_PAYMENT_METHOD$1"
  (i),						"ORDER_FACT"."REG_CODE" = "ORDER_FACT_49_REG_CODE$1"
  (i),						"ORDER_FACT"."CREATE_USER" = "ORDER_FACT_50_CREATE_USER$1"
  (i),						"ORDER_FACT"."MODIFY_USER" = "ORDER_FACT_51_MODIFY_USER$1"
  (i),						"ORDER_FACT"."ENROLL_TYPE" = "ORDER_FACT_52_ENROLL_TYPE$1"
  (i),						"ORDER_FACT"."ATTENDEE_TYPE" = "ORDER_FACT_56_ATTENDEE_TYPE$1"
  (i),						"ORDER_FACT"."CHECK_NUMBER" = "ORDER_FACT_57_CHECK_NUMBER$1"
  (i),						"ORDER_FACT"."COMMENTS" = "ORDER_FACT_58_COMMENTS$1"
  (i),						"ORDER_FACT"."OB_NATIONAL_TERR_NUM" = "ORDER_FA_59_OB_NATIO$1"
  (i),						"ORDER_FACT"."OB_NATIONAL_REP_ID" = "ORDER_FA_60_OB_NATIO$1"
  (i),						"ORDER_FACT"."OB_NATIONAL_REP_NAME" = "ORDER_FA_61_OB_NATIO$1"
  (i),						"ORDER_FACT"."OB_TERR_NUM" = "ORDER_FACT_62_OB_TERR_NUM$1"
  (i),						"ORDER_FACT"."OB_REP_ID" = "ORDER_FACT_63_OB_REP_ID$1"
  (i),						"ORDER_FACT"."OB_REP_NAME" = "ORDER_FACT_64_OB_REP_NAME$1"
  (i),						"ORDER_FACT"."OSR_TERR_NUM" = "ORDER_FACT_65_OSR_TERR_NUM$1"
  (i),						"ORDER_FACT"."OSR_ID" = "ORDER_FACT_66_OSR_ID$1"
  (i),						"ORDER_FACT"."OSR_REP_NAME" = "ORDER_FACT_67_OSR_REP_NAME$1"
  (i),						"ORDER_FACT"."ENT_NATIONAL_TERR_NUM" = "ORDER_FA_68_ENT_NATI$1"
  (i),						"ORDER_FACT"."ENT_NATIONAL_REP_ID" = "ORDER_FA_69_ENT_NATI$1"
  (i),						"ORDER_FACT"."ENT_NATIONAL_REP_NAME" = "ORDER_FA_70_ENT_NATI$1"
  (i),						"ORDER_FACT"."ENT_INSIDE_TERR_NUM" = "ORDER_FA_71_ENT_INSI$1"
  (i),						"ORDER_FACT"."ENT_INSIDE_REP_ID" = "ORDER_FA_72_ENT_INSI$1"
  (i),						"ORDER_FACT"."ENT_INSIDE_REP_NAME" = "ORDER_FA_73_ENT_INSI$1"
  (i),						"ORDER_FACT"."ENT_FEDERAL_TERR_NUM" = "ORDER_FA_74_ENT_FEDE$1"
  (i),						"ORDER_FACT"."ENT_FEDERAL_REP_ID" = "ORDER_FA_75_ENT_FEDE$1"
  (i),						"ORDER_FACT"."ENT_FEDERAL_REP_NAME" = "ORDER_FA_76_ENT_FEDE$1"
  (i),						"ORDER_FACT"."BTSR_TERR_NUM" = "ORDER_FACT_77_BTSR_TERR_NUM$1"
  (i),						"ORDER_FACT"."BTSR_REP_ID" = "ORDER_FACT_78_BTSR_REP_ID$1"
  (i),						"ORDER_FACT"."BTSR_REP_NAME" = "ORDER_FACT_79_BTSR_REP_NAME$1"
  (i),						"ORDER_FACT"."BTA_TERR_NUM" = "ORDER_FACT_80_BTA_TERR_NUM$1"
  (i),						"ORDER_FACT"."BTA_REP_ID" = "ORDER_FACT_81_BTA_REP_ID$1"
  (i),						"ORDER_FACT"."BTA_REP_NAME" = "ORDER_FACT_82_BTA_REP_NAME$1"
  (i)
    
            WHERE
  
  						"ORDER_FACT"."TXFEE_ID" = "ORDER_FACT_36_TXFEE_ID$1"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "ORDER_FACT_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "ORDER_FACT_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "ORDER_FACT_upd" := "ORDER_FACT_upd" + get_rowid.COUNT;
          "ORDER_FACT_si" := "ORDER_FACT_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "ORDER_FACT_si".."ORDER_FACT_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "ORDER_FACT_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "ORDER_FACT_upd" := "ORDER_FACT_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "ORDER_FACT_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "ORDER_FACT"
                SET
  
  								"ORDER_FACT"."ENROLL_ID" = "ORDER_FACT_0_ENROLL_ID$1"
  (last_successful_index),								"ORDER_FACT"."EVENT_ID" = "ORDER_FACT_1_EVENT_ID$1"
  (last_successful_index),								"ORDER_FACT"."CUST_ID" = "ORDER_FACT_2_CUST_ID$1"
  (last_successful_index),								"ORDER_FACT"."ENROLL_DATE" = "ORDER_FACT_3_ENROLL_DATE$1"
  (last_successful_index),								"ORDER_FACT"."KEYCODE" = "ORDER_FACT_4_KEYCODE$1"
  (last_successful_index),								"ORDER_FACT"."BOOK_DATE" = "ORDER_FACT_5_BOOK_DATE$1"
  (last_successful_index),								"ORDER_FACT"."REV_DATE" = "ORDER_FACT_6_REV_DATE$1"
  (last_successful_index),								"ORDER_FACT"."ENROLL_SOURCE" = "ORDER_FACT_8_ENROLL_SOURCE$1"
  (last_successful_index),								"ORDER_FACT"."QUANTITY" = "ORDER_FACT_9_QUANTITY$1"
  (last_successful_index),								"ORDER_FACT"."BOOK_AMT" = "ORDER_FACT_10_BOOK_AMT$1"
  (last_successful_index),								"ORDER_FACT"."CURR_CODE" = "ORDER_FACT_11_CURR_CODE$1"
  (last_successful_index),								"ORDER_FACT"."SALESPERSON" = "ORDER_FACT_13_SALESPERSON$1"
  (last_successful_index),								"ORDER_FACT"."OPPORTUNITY_ID" = "ORDER_FACT_15_OPPORTUNITY_ID$1"
  (last_successful_index),								"ORDER_FACT"."ORACLE_TRX_NUM" = "ORDER_FACT_17_ORACLE_TRX_NUM$1"
  (last_successful_index),								"ORDER_FACT"."GKDW_SOURCE" = "ORDER_FACT_22_GKDW_SOURCE$1"
  (last_successful_index),								"ORDER_FACT"."ZIP_CODE" = "ORDER_FACT_24_ZIP_CODE$1"
  (last_successful_index),								"ORDER_FACT"."COUNTRY" = "ORDER_FACT_26_COUNTRY$1"
  (last_successful_index),								"ORDER_FACT"."TERRITORY" = "ORDER_FACT_28_TERRITORY$1"
  (last_successful_index),								"ORDER_FACT"."REGION" = "ORDER_FACT_29_REGION$1"
  (last_successful_index),								"ORDER_FACT"."SALES_REP" = "ORDER_FACT_30_SALES_REP$1"
  (last_successful_index),								"ORDER_FACT"."REGION_REP" = "ORDER_FACT_31_REGION_REP$1"
  (last_successful_index),								"ORDER_FACT"."CREATION_DATE" = "ORDER_FACT_32_CREATION_DATE$1"
  (last_successful_index),								"ORDER_FACT"."LAST_UPDATE_DATE" = "ORDER_FACT_33_LAST_UPDATE_DA"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS" = "ORDER_FACT_34_ENROLL_STATUS$1"
  (last_successful_index),								"ORDER_FACT"."BILL_DATE" = "ORDER_FACT_37_BILL_DATE$1"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS_DESC" = "ORDER_FA_39_ENROLL_S$1"
  (last_successful_index),								"ORDER_FACT"."FEE_TYPE" = "ORDER_FACT_40_FEE_TYPE$1"
  (last_successful_index),								"ORDER_FACT"."ENROLL_STATUS_DATE" = "ORDER_FA_41_ENROLL_S$1"
  (last_successful_index),								"ORDER_FACT"."PP_SALES_ORDER_ID" = "ORDER_FA_42_PP_SALES$1"
  (last_successful_index),								"ORDER_FACT"."SOURCE" = "ORDER_FACT_43_SOURCE$1"
  (last_successful_index),								"ORDER_FACT"."BAL_DUE" = "ORDER_FACT_44_BAL_DUE$1"
  (last_successful_index),								"ORDER_FACT"."LIST_PRICE" = "ORDER_FACT_45_LIST_PRICE$1"
  (last_successful_index),								"ORDER_FACT"."PO_NUMBER" = "ORDER_FACT_46_PO_NUMBER$1"
  (last_successful_index),								"ORDER_FACT"."PPCARD_ID" = "ORDER_FACT_47_PPCARD_ID$1"
  (last_successful_index),								"ORDER_FACT"."PAYMENT_METHOD" = "ORDER_FACT_48_PAYMENT_METHOD$1"
  (last_successful_index),								"ORDER_FACT"."REG_CODE" = "ORDER_FACT_49_REG_CODE$1"
  (last_successful_index),								"ORDER_FACT"."CREATE_USER" = "ORDER_FACT_50_CREATE_USER$1"
  (last_successful_index),								"ORDER_FACT"."MODIFY_USER" = "ORDER_FACT_51_MODIFY_USER$1"
  (last_successful_index),								"ORDER_FACT"."ENROLL_TYPE" = "ORDER_FACT_52_ENROLL_TYPE$1"
  (last_successful_index),								"ORDER_FACT"."ATTENDEE_TYPE" = "ORDER_FACT_56_ATTENDEE_TYPE$1"
  (last_successful_index),								"ORDER_FACT"."CHECK_NUMBER" = "ORDER_FACT_57_CHECK_NUMBER$1"
  (last_successful_index),								"ORDER_FACT"."COMMENTS" = "ORDER_FACT_58_COMMENTS$1"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_TERR_NUM" = "ORDER_FA_59_OB_NATIO$1"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_REP_ID" = "ORDER_FA_60_OB_NATIO$1"
  (last_successful_index),								"ORDER_FACT"."OB_NATIONAL_REP_NAME" = "ORDER_FA_61_OB_NATIO$1"
  (last_successful_index),								"ORDER_FACT"."OB_TERR_NUM" = "ORDER_FACT_62_OB_TERR_NUM$1"
  (last_successful_index),								"ORDER_FACT"."OB_REP_ID" = "ORDER_FACT_63_OB_REP_ID$1"
  (last_successful_index),								"ORDER_FACT"."OB_REP_NAME" = "ORDER_FACT_64_OB_REP_NAME$1"
  (last_successful_index),								"ORDER_FACT"."OSR_TERR_NUM" = "ORDER_FACT_65_OSR_TERR_NUM$1"
  (last_successful_index),								"ORDER_FACT"."OSR_ID" = "ORDER_FACT_66_OSR_ID$1"
  (last_successful_index),								"ORDER_FACT"."OSR_REP_NAME" = "ORDER_FACT_67_OSR_REP_NAME$1"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_TERR_NUM" = "ORDER_FA_68_ENT_NATI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_REP_ID" = "ORDER_FA_69_ENT_NATI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_NATIONAL_REP_NAME" = "ORDER_FA_70_ENT_NATI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_TERR_NUM" = "ORDER_FA_71_ENT_INSI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_REP_ID" = "ORDER_FA_72_ENT_INSI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_INSIDE_REP_NAME" = "ORDER_FA_73_ENT_INSI$1"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_TERR_NUM" = "ORDER_FA_74_ENT_FEDE$1"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_REP_ID" = "ORDER_FA_75_ENT_FEDE$1"
  (last_successful_index),								"ORDER_FACT"."ENT_FEDERAL_REP_NAME" = "ORDER_FA_76_ENT_FEDE$1"
  (last_successful_index),								"ORDER_FACT"."BTSR_TERR_NUM" = "ORDER_FACT_77_BTSR_TERR_NUM$1"
  (last_successful_index),								"ORDER_FACT"."BTSR_REP_ID" = "ORDER_FACT_78_BTSR_REP_ID$1"
  (last_successful_index),								"ORDER_FACT"."BTSR_REP_NAME" = "ORDER_FACT_79_BTSR_REP_NAME$1"
  (last_successful_index),								"ORDER_FACT"."BTA_TERR_NUM" = "ORDER_FACT_80_BTA_TERR_NUM$1"
  (last_successful_index),								"ORDER_FACT"."BTA_REP_ID" = "ORDER_FACT_81_BTA_REP_ID$1"
  (last_successful_index),								"ORDER_FACT"."BTA_REP_NAME" = "ORDER_FACT_82_BTA_REP_NAME$1"
  (last_successful_index)
  
                WHERE
  
  								"ORDER_FACT"."TXFEE_ID" = "ORDER_FACT_36_TXFEE_ID$1"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "ORDER_FACT_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_ID"',0,80),SUBSTRB("ORDER_FACT_0_ENROLL_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."EVENT_ID"',0,80),SUBSTRB("ORDER_FACT_1_EVENT_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("ORDER_FACT_2_CUST_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_DATE"',0,80),SUBSTRB("ORDER_FACT_3_ENROLL_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("ORDER_FACT_4_KEYCODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("ORDER_FACT_5_BOOK_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("ORDER_FACT_6_REV_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_SOURCE"',0,80),SUBSTRB("ORDER_FACT_8_ENROLL_SOURCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("ORDER_FACT_9_QUANTITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("ORDER_FACT_10_BOOK_AMT$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("ORDER_FACT_11_CURR_CODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("ORDER_FACT_13_SALESPERSON$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("ORDER_FACT_15_OPPORTUNITY_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ORACLE_TRX_NUM"',0,80),SUBSTRB("ORDER_FACT_17_ORACLE_TRX_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("ORDER_FACT_22_GKDW_SOURCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ZIP_CODE"',0,80),SUBSTRB("ORDER_FACT_24_ZIP_CODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("ORDER_FACT_26_COUNTRY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("ORDER_FACT_28_TERRITORY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION"',0,80),SUBSTRB("ORDER_FACT_29_REGION$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("ORDER_FACT_30_SALES_REP$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("ORDER_FACT_31_REGION_REP$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("ORDER_FACT_32_CREATION_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("ORDER_FACT_33_LAST_UPDATE_DA"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS"',0,80),SUBSTRB("ORDER_FACT_34_ENROLL_STATUS$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("ORDER_FACT_37_BILL_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DESC"',0,80),SUBSTRB("ORDER_FA_39_ENROLL_S$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."FEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_40_FEE_TYPE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DATE"',0,80),SUBSTRB("ORDER_FA_41_ENROLL_S$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("ORDER_FA_42_PP_SALES$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SOURCE"',0,80),SUBSTRB("ORDER_FACT_43_SOURCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BAL_DUE"',0,80),SUBSTRB("ORDER_FACT_44_BAL_DUE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LIST_PRICE"',0,80),SUBSTRB("ORDER_FACT_45_LIST_PRICE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("ORDER_FACT_46_PO_NUMBER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("ORDER_FACT_47_PPCARD_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("ORDER_FACT_48_PAYMENT_METHOD$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REG_CODE"',0,80),SUBSTRB("ORDER_FACT_49_REG_CODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATE_USER"',0,80),SUBSTRB("ORDER_FACT_50_CREATE_USER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."MODIFY_USER"',0,80),SUBSTRB("ORDER_FACT_51_MODIFY_USER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_TYPE"',0,80),SUBSTRB("ORDER_FACT_52_ENROLL_TYPE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ATTENDEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_56_ATTENDEE_TYPE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CHECK_NUMBER"',0,80),SUBSTRB("ORDER_FACT_57_CHECK_NUMBER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COMMENTS"',0,80),SUBSTRB("ORDER_FACT_58_COMMENTS$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_59_OB_NATIO$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_60_OB_NATIO$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_61_OB_NATIO$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_62_OB_TERR_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_ID"',0,80),SUBSTRB("ORDER_FACT_63_OB_REP_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_64_OB_REP_NAME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_65_OSR_TERR_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_ID"',0,80),SUBSTRB("ORDER_FACT_66_OSR_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_67_OSR_REP_NAME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_68_ENT_NATI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_69_ENT_NATI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_70_ENT_NATI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_71_ENT_INSI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_ID"',0,80),SUBSTRB("ORDER_FA_72_ENT_INSI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_NAME"',0,80),SUBSTRB("ORDER_FA_73_ENT_INSI$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_74_ENT_FEDE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_75_ENT_FEDE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_76_ENT_FEDE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_77_BTSR_TERR_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_ID"',0,80),SUBSTRB("ORDER_FACT_78_BTSR_REP_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_79_BTSR_REP_NAME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_80_BTA_TERR_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_ID"',0,80),SUBSTRB("ORDER_FACT_81_BTA_REP_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_82_BTA_REP_NAME$1"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
                
                IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "ORDER_FACT_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "ORDER_FACT_si" >= "ORDER_FACT_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "ORDER_FACT_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"ORDER_FACT_0_ENROLL_ID$1"(insert_bulk_index) := "ORDER_FACT_0_ENROLL_ID$1"(update_bulk(j));
  		"ORDER_FACT_1_EVENT_ID$1"(insert_bulk_index) := "ORDER_FACT_1_EVENT_ID$1"(update_bulk(j));
  		"ORDER_FACT_2_CUST_ID$1"(insert_bulk_index) := "ORDER_FACT_2_CUST_ID$1"(update_bulk(j));
  		"ORDER_FACT_3_ENROLL_DATE$1"(insert_bulk_index) := "ORDER_FACT_3_ENROLL_DATE$1"(update_bulk(j));
  		"ORDER_FACT_4_KEYCODE$1"(insert_bulk_index) := "ORDER_FACT_4_KEYCODE$1"(update_bulk(j));
  		"ORDER_FACT_5_BOOK_DATE$1"(insert_bulk_index) := "ORDER_FACT_5_BOOK_DATE$1"(update_bulk(j));
  		"ORDER_FACT_6_REV_DATE$1"(insert_bulk_index) := "ORDER_FACT_6_REV_DATE$1"(update_bulk(j));
  		"ORDER_FACT_8_ENROLL_SOURCE$1"(insert_bulk_index) := "ORDER_FACT_8_ENROLL_SOURCE$1"(update_bulk(j));
  		"ORDER_FACT_9_QUANTITY$1"(insert_bulk_index) := "ORDER_FACT_9_QUANTITY$1"(update_bulk(j));
  		"ORDER_FACT_10_BOOK_AMT$1"(insert_bulk_index) := "ORDER_FACT_10_BOOK_AMT$1"(update_bulk(j));
  		"ORDER_FACT_11_CURR_CODE$1"(insert_bulk_index) := "ORDER_FACT_11_CURR_CODE$1"(update_bulk(j));
  		"ORDER_FACT_13_SALESPERSON$1"(insert_bulk_index) := "ORDER_FACT_13_SALESPERSON$1"(update_bulk(j));
  		"ORDER_FACT_15_OPPORTUNITY_ID$1"(insert_bulk_index) := "ORDER_FACT_15_OPPORTUNITY_ID$1"(update_bulk(j));
  		"ORDER_FACT_17_ORACLE_TRX_NUM$1"(insert_bulk_index) := "ORDER_FACT_17_ORACLE_TRX_NUM$1"(update_bulk(j));
  		"ORDER_FACT_22_GKDW_SOURCE$1"(insert_bulk_index) := "ORDER_FACT_22_GKDW_SOURCE$1"(update_bulk(j));
  		"ORDER_FACT_24_ZIP_CODE$1"(insert_bulk_index) := "ORDER_FACT_24_ZIP_CODE$1"(update_bulk(j));
  		"ORDER_FACT_26_COUNTRY$1"(insert_bulk_index) := "ORDER_FACT_26_COUNTRY$1"(update_bulk(j));
  		"ORDER_FACT_28_TERRITORY$1"(insert_bulk_index) := "ORDER_FACT_28_TERRITORY$1"(update_bulk(j));
  		"ORDER_FACT_29_REGION$1"(insert_bulk_index) := "ORDER_FACT_29_REGION$1"(update_bulk(j));
  		"ORDER_FACT_30_SALES_REP$1"(insert_bulk_index) := "ORDER_FACT_30_SALES_REP$1"(update_bulk(j));
  		"ORDER_FACT_31_REGION_REP$1"(insert_bulk_index) := "ORDER_FACT_31_REGION_REP$1"(update_bulk(j));
  		"ORDER_FACT_32_CREATION_DATE$1"(insert_bulk_index) := "ORDER_FACT_32_CREATION_DATE$1"(update_bulk(j));
  		"ORDER_FACT_33_LAST_UPDATE_DA"(insert_bulk_index) := "ORDER_FACT_33_LAST_UPDATE_DA"(update_bulk(j));
  		"ORDER_FACT_34_ENROLL_STATUS$1"(insert_bulk_index) := "ORDER_FACT_34_ENROLL_STATUS$1"(update_bulk(j));
  		"ORDER_FACT_36_TXFEE_ID$1"(insert_bulk_index) := "ORDER_FACT_36_TXFEE_ID$1"(update_bulk(j));
  		"ORDER_FACT_37_BILL_DATE$1"(insert_bulk_index) := "ORDER_FACT_37_BILL_DATE$1"(update_bulk(j));
  		"ORDER_FA_39_ENROLL_S$1"(insert_bulk_index) := "ORDER_FA_39_ENROLL_S$1"(update_bulk(j));
  		"ORDER_FACT_40_FEE_TYPE$1"(insert_bulk_index) := "ORDER_FACT_40_FEE_TYPE$1"(update_bulk(j));
  		"ORDER_FA_41_ENROLL_S$1"(insert_bulk_index) := "ORDER_FA_41_ENROLL_S$1"(update_bulk(j));
  		"ORDER_FA_42_PP_SALES$1"(insert_bulk_index) := "ORDER_FA_42_PP_SALES$1"(update_bulk(j));
  		"ORDER_FACT_43_SOURCE$1"(insert_bulk_index) := "ORDER_FACT_43_SOURCE$1"(update_bulk(j));
  		"ORDER_FACT_44_BAL_DUE$1"(insert_bulk_index) := "ORDER_FACT_44_BAL_DUE$1"(update_bulk(j));
  		"ORDER_FACT_45_LIST_PRICE$1"(insert_bulk_index) := "ORDER_FACT_45_LIST_PRICE$1"(update_bulk(j));
  		"ORDER_FACT_46_PO_NUMBER$1"(insert_bulk_index) := "ORDER_FACT_46_PO_NUMBER$1"(update_bulk(j));
  		"ORDER_FACT_47_PPCARD_ID$1"(insert_bulk_index) := "ORDER_FACT_47_PPCARD_ID$1"(update_bulk(j));
  		"ORDER_FACT_48_PAYMENT_METHOD$1"(insert_bulk_index) := "ORDER_FACT_48_PAYMENT_METHOD$1"(update_bulk(j));
  		"ORDER_FACT_49_REG_CODE$1"(insert_bulk_index) := "ORDER_FACT_49_REG_CODE$1"(update_bulk(j));
  		"ORDER_FACT_50_CREATE_USER$1"(insert_bulk_index) := "ORDER_FACT_50_CREATE_USER$1"(update_bulk(j));
  		"ORDER_FACT_51_MODIFY_USER$1"(insert_bulk_index) := "ORDER_FACT_51_MODIFY_USER$1"(update_bulk(j));
  		"ORDER_FACT_52_ENROLL_TYPE$1"(insert_bulk_index) := "ORDER_FACT_52_ENROLL_TYPE$1"(update_bulk(j));
  		"ORDER_FACT_56_ATTENDEE_TYPE$1"(insert_bulk_index) := "ORDER_FACT_56_ATTENDEE_TYPE$1"(update_bulk(j));
  		"ORDER_FACT_57_CHECK_NUMBER$1"(insert_bulk_index) := "ORDER_FACT_57_CHECK_NUMBER$1"(update_bulk(j));
  		"ORDER_FACT_58_COMMENTS$1"(insert_bulk_index) := "ORDER_FACT_58_COMMENTS$1"(update_bulk(j));
  		"ORDER_FA_59_OB_NATIO$1"(insert_bulk_index) := "ORDER_FA_59_OB_NATIO$1"(update_bulk(j));
  		"ORDER_FA_60_OB_NATIO$1"(insert_bulk_index) := "ORDER_FA_60_OB_NATIO$1"(update_bulk(j));
  		"ORDER_FA_61_OB_NATIO$1"(insert_bulk_index) := "ORDER_FA_61_OB_NATIO$1"(update_bulk(j));
  		"ORDER_FACT_62_OB_TERR_NUM$1"(insert_bulk_index) := "ORDER_FACT_62_OB_TERR_NUM$1"(update_bulk(j));
  		"ORDER_FACT_63_OB_REP_ID$1"(insert_bulk_index) := "ORDER_FACT_63_OB_REP_ID$1"(update_bulk(j));
  		"ORDER_FACT_64_OB_REP_NAME$1"(insert_bulk_index) := "ORDER_FACT_64_OB_REP_NAME$1"(update_bulk(j));
  		"ORDER_FACT_65_OSR_TERR_NUM$1"(insert_bulk_index) := "ORDER_FACT_65_OSR_TERR_NUM$1"(update_bulk(j));
  		"ORDER_FACT_66_OSR_ID$1"(insert_bulk_index) := "ORDER_FACT_66_OSR_ID$1"(update_bulk(j));
  		"ORDER_FACT_67_OSR_REP_NAME$1"(insert_bulk_index) := "ORDER_FACT_67_OSR_REP_NAME$1"(update_bulk(j));
  		"ORDER_FA_68_ENT_NATI$1"(insert_bulk_index) := "ORDER_FA_68_ENT_NATI$1"(update_bulk(j));
  		"ORDER_FA_69_ENT_NATI$1"(insert_bulk_index) := "ORDER_FA_69_ENT_NATI$1"(update_bulk(j));
  		"ORDER_FA_70_ENT_NATI$1"(insert_bulk_index) := "ORDER_FA_70_ENT_NATI$1"(update_bulk(j));
  		"ORDER_FA_71_ENT_INSI$1"(insert_bulk_index) := "ORDER_FA_71_ENT_INSI$1"(update_bulk(j));
  		"ORDER_FA_72_ENT_INSI$1"(insert_bulk_index) := "ORDER_FA_72_ENT_INSI$1"(update_bulk(j));
  		"ORDER_FA_73_ENT_INSI$1"(insert_bulk_index) := "ORDER_FA_73_ENT_INSI$1"(update_bulk(j));
  		"ORDER_FA_74_ENT_FEDE$1"(insert_bulk_index) := "ORDER_FA_74_ENT_FEDE$1"(update_bulk(j));
  		"ORDER_FA_75_ENT_FEDE$1"(insert_bulk_index) := "ORDER_FA_75_ENT_FEDE$1"(update_bulk(j));
  		"ORDER_FA_76_ENT_FEDE$1"(insert_bulk_index) := "ORDER_FA_76_ENT_FEDE$1"(update_bulk(j));
  		"ORDER_FACT_77_BTSR_TERR_NUM$1"(insert_bulk_index) := "ORDER_FACT_77_BTSR_TERR_NUM$1"(update_bulk(j));
  		"ORDER_FACT_78_BTSR_REP_ID$1"(insert_bulk_index) := "ORDER_FACT_78_BTSR_REP_ID$1"(update_bulk(j));
  		"ORDER_FACT_79_BTSR_REP_NAME$1"(insert_bulk_index) := "ORDER_FACT_79_BTSR_REP_NAME$1"(update_bulk(j));
  		"ORDER_FACT_80_BTA_TERR_NUM$1"(insert_bulk_index) := "ORDER_FACT_80_BTA_TERR_NUM$1"(update_bulk(j));
  		"ORDER_FACT_81_BTA_REP_ID$1"(insert_bulk_index) := "ORDER_FACT_81_BTA_REP_ID$1"(update_bulk(j));
  		"ORDER_FACT_82_BTA_REP_NAME$1"(insert_bulk_index) := "ORDER_FACT_82_BTA_REP_NAME$1"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "ORDER_FACT_srk"(insert_bulk_index) := "ORDER_FACT_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "ORDER_FACT_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "ORDER_FACT_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "ORDER_FACT_si"..insert_bulk_index
          INSERT INTO
            "ORDER_FACT"
            ("ORDER_FACT"."ENROLL_ID",
            "ORDER_FACT"."EVENT_ID",
            "ORDER_FACT"."CUST_ID",
            "ORDER_FACT"."ENROLL_DATE",
            "ORDER_FACT"."KEYCODE",
            "ORDER_FACT"."BOOK_DATE",
            "ORDER_FACT"."REV_DATE",
            "ORDER_FACT"."ENROLL_SOURCE",
            "ORDER_FACT"."QUANTITY",
            "ORDER_FACT"."BOOK_AMT",
            "ORDER_FACT"."CURR_CODE",
            "ORDER_FACT"."SALESPERSON",
            "ORDER_FACT"."OPPORTUNITY_ID",
            "ORDER_FACT"."ORACLE_TRX_NUM",
            "ORDER_FACT"."GKDW_SOURCE",
            "ORDER_FACT"."ZIP_CODE",
            "ORDER_FACT"."COUNTRY",
            "ORDER_FACT"."TERRITORY",
            "ORDER_FACT"."REGION",
            "ORDER_FACT"."SALES_REP",
            "ORDER_FACT"."REGION_REP",
            "ORDER_FACT"."CREATION_DATE",
            "ORDER_FACT"."LAST_UPDATE_DATE",
            "ORDER_FACT"."ENROLL_STATUS",
            "ORDER_FACT"."TXFEE_ID",
            "ORDER_FACT"."BILL_DATE",
            "ORDER_FACT"."ENROLL_STATUS_DESC",
            "ORDER_FACT"."FEE_TYPE",
            "ORDER_FACT"."ENROLL_STATUS_DATE",
            "ORDER_FACT"."PP_SALES_ORDER_ID",
            "ORDER_FACT"."SOURCE",
            "ORDER_FACT"."BAL_DUE",
            "ORDER_FACT"."LIST_PRICE",
            "ORDER_FACT"."PO_NUMBER",
            "ORDER_FACT"."PPCARD_ID",
            "ORDER_FACT"."PAYMENT_METHOD",
            "ORDER_FACT"."REG_CODE",
            "ORDER_FACT"."CREATE_USER",
            "ORDER_FACT"."MODIFY_USER",
            "ORDER_FACT"."ENROLL_TYPE",
            "ORDER_FACT"."ATTENDEE_TYPE",
            "ORDER_FACT"."CHECK_NUMBER",
            "ORDER_FACT"."COMMENTS",
            "ORDER_FACT"."OB_NATIONAL_TERR_NUM",
            "ORDER_FACT"."OB_NATIONAL_REP_ID",
            "ORDER_FACT"."OB_NATIONAL_REP_NAME",
            "ORDER_FACT"."OB_TERR_NUM",
            "ORDER_FACT"."OB_REP_ID",
            "ORDER_FACT"."OB_REP_NAME",
            "ORDER_FACT"."OSR_TERR_NUM",
            "ORDER_FACT"."OSR_ID",
            "ORDER_FACT"."OSR_REP_NAME",
            "ORDER_FACT"."ENT_NATIONAL_TERR_NUM",
            "ORDER_FACT"."ENT_NATIONAL_REP_ID",
            "ORDER_FACT"."ENT_NATIONAL_REP_NAME",
            "ORDER_FACT"."ENT_INSIDE_TERR_NUM",
            "ORDER_FACT"."ENT_INSIDE_REP_ID",
            "ORDER_FACT"."ENT_INSIDE_REP_NAME",
            "ORDER_FACT"."ENT_FEDERAL_TERR_NUM",
            "ORDER_FACT"."ENT_FEDERAL_REP_ID",
            "ORDER_FACT"."ENT_FEDERAL_REP_NAME",
            "ORDER_FACT"."BTSR_TERR_NUM",
            "ORDER_FACT"."BTSR_REP_ID",
            "ORDER_FACT"."BTSR_REP_NAME",
            "ORDER_FACT"."BTA_TERR_NUM",
            "ORDER_FACT"."BTA_REP_ID",
            "ORDER_FACT"."BTA_REP_NAME")
          VALUES
            ("ORDER_FACT_0_ENROLL_ID$1"(i),
            "ORDER_FACT_1_EVENT_ID$1"(i),
            "ORDER_FACT_2_CUST_ID$1"(i),
            "ORDER_FACT_3_ENROLL_DATE$1"(i),
            "ORDER_FACT_4_KEYCODE$1"(i),
            "ORDER_FACT_5_BOOK_DATE$1"(i),
            "ORDER_FACT_6_REV_DATE$1"(i),
            "ORDER_FACT_8_ENROLL_SOURCE$1"(i),
            "ORDER_FACT_9_QUANTITY$1"(i),
            "ORDER_FACT_10_BOOK_AMT$1"(i),
            "ORDER_FACT_11_CURR_CODE$1"(i),
            "ORDER_FACT_13_SALESPERSON$1"(i),
            "ORDER_FACT_15_OPPORTUNITY_ID$1"(i),
            "ORDER_FACT_17_ORACLE_TRX_NUM$1"(i),
            "ORDER_FACT_22_GKDW_SOURCE$1"(i),
            "ORDER_FACT_24_ZIP_CODE$1"(i),
            "ORDER_FACT_26_COUNTRY$1"(i),
            "ORDER_FACT_28_TERRITORY$1"(i),
            "ORDER_FACT_29_REGION$1"(i),
            "ORDER_FACT_30_SALES_REP$1"(i),
            "ORDER_FACT_31_REGION_REP$1"(i),
            "ORDER_FACT_32_CREATION_DATE$1"(i),
            "ORDER_FACT_33_LAST_UPDATE_DA"(i),
            "ORDER_FACT_34_ENROLL_STATUS$1"(i),
            "ORDER_FACT_36_TXFEE_ID$1"(i),
            "ORDER_FACT_37_BILL_DATE$1"(i),
            "ORDER_FA_39_ENROLL_S$1"(i),
            "ORDER_FACT_40_FEE_TYPE$1"(i),
            "ORDER_FA_41_ENROLL_S$1"(i),
            "ORDER_FA_42_PP_SALES$1"(i),
            "ORDER_FACT_43_SOURCE$1"(i),
            "ORDER_FACT_44_BAL_DUE$1"(i),
            "ORDER_FACT_45_LIST_PRICE$1"(i),
            "ORDER_FACT_46_PO_NUMBER$1"(i),
            "ORDER_FACT_47_PPCARD_ID$1"(i),
            "ORDER_FACT_48_PAYMENT_METHOD$1"(i),
            "ORDER_FACT_49_REG_CODE$1"(i),
            "ORDER_FACT_50_CREATE_USER$1"(i),
            "ORDER_FACT_51_MODIFY_USER$1"(i),
            "ORDER_FACT_52_ENROLL_TYPE$1"(i),
            "ORDER_FACT_56_ATTENDEE_TYPE$1"(i),
            "ORDER_FACT_57_CHECK_NUMBER$1"(i),
            "ORDER_FACT_58_COMMENTS$1"(i),
            "ORDER_FA_59_OB_NATIO$1"(i),
            "ORDER_FA_60_OB_NATIO$1"(i),
            "ORDER_FA_61_OB_NATIO$1"(i),
            "ORDER_FACT_62_OB_TERR_NUM$1"(i),
            "ORDER_FACT_63_OB_REP_ID$1"(i),
            "ORDER_FACT_64_OB_REP_NAME$1"(i),
            "ORDER_FACT_65_OSR_TERR_NUM$1"(i),
            "ORDER_FACT_66_OSR_ID$1"(i),
            "ORDER_FACT_67_OSR_REP_NAME$1"(i),
            "ORDER_FA_68_ENT_NATI$1"(i),
            "ORDER_FA_69_ENT_NATI$1"(i),
            "ORDER_FA_70_ENT_NATI$1"(i),
            "ORDER_FA_71_ENT_INSI$1"(i),
            "ORDER_FA_72_ENT_INSI$1"(i),
            "ORDER_FA_73_ENT_INSI$1"(i),
            "ORDER_FA_74_ENT_FEDE$1"(i),
            "ORDER_FA_75_ENT_FEDE$1"(i),
            "ORDER_FA_76_ENT_FEDE$1"(i),
            "ORDER_FACT_77_BTSR_TERR_NUM$1"(i),
            "ORDER_FACT_78_BTSR_REP_ID$1"(i),
            "ORDER_FACT_79_BTSR_REP_NAME$1"(i),
            "ORDER_FACT_80_BTA_TERR_NUM$1"(i),
            "ORDER_FACT_81_BTA_REP_ID$1"(i),
            "ORDER_FACT_82_BTA_REP_NAME$1"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "ORDER_FACT_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
          error_index := "ORDER_FACT_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "ORDER_FACT_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 20: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_ID"',0,80),SUBSTRB("ORDER_FACT_0_ENROLL_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."EVENT_ID"',0,80),SUBSTRB("ORDER_FACT_1_EVENT_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("ORDER_FACT_2_CUST_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_DATE"',0,80),SUBSTRB("ORDER_FACT_3_ENROLL_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("ORDER_FACT_4_KEYCODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("ORDER_FACT_5_BOOK_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("ORDER_FACT_6_REV_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_SOURCE"',0,80),SUBSTRB("ORDER_FACT_8_ENROLL_SOURCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("ORDER_FACT_9_QUANTITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("ORDER_FACT_10_BOOK_AMT$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("ORDER_FACT_11_CURR_CODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("ORDER_FACT_13_SALESPERSON$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("ORDER_FACT_15_OPPORTUNITY_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ORACLE_TRX_NUM"',0,80),SUBSTRB("ORDER_FACT_17_ORACLE_TRX_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("ORDER_FACT_22_GKDW_SOURCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ZIP_CODE"',0,80),SUBSTRB("ORDER_FACT_24_ZIP_CODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("ORDER_FACT_26_COUNTRY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("ORDER_FACT_28_TERRITORY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION"',0,80),SUBSTRB("ORDER_FACT_29_REGION$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("ORDER_FACT_30_SALES_REP$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("ORDER_FACT_31_REGION_REP$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("ORDER_FACT_32_CREATION_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("ORDER_FACT_33_LAST_UPDATE_DA"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS"',0,80),SUBSTRB("ORDER_FACT_34_ENROLL_STATUS$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."TXFEE_ID"',0,80),SUBSTRB("ORDER_FACT_36_TXFEE_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("ORDER_FACT_37_BILL_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DESC"',0,80),SUBSTRB("ORDER_FA_39_ENROLL_S$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."FEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_40_FEE_TYPE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_STATUS_DATE"',0,80),SUBSTRB("ORDER_FA_41_ENROLL_S$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("ORDER_FA_42_PP_SALES$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."SOURCE"',0,80),SUBSTRB("ORDER_FACT_43_SOURCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BAL_DUE"',0,80),SUBSTRB("ORDER_FACT_44_BAL_DUE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."LIST_PRICE"',0,80),SUBSTRB("ORDER_FACT_45_LIST_PRICE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("ORDER_FACT_46_PO_NUMBER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("ORDER_FACT_47_PPCARD_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("ORDER_FACT_48_PAYMENT_METHOD$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."REG_CODE"',0,80),SUBSTRB("ORDER_FACT_49_REG_CODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CREATE_USER"',0,80),SUBSTRB("ORDER_FACT_50_CREATE_USER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."MODIFY_USER"',0,80),SUBSTRB("ORDER_FACT_51_MODIFY_USER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENROLL_TYPE"',0,80),SUBSTRB("ORDER_FACT_52_ENROLL_TYPE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ATTENDEE_TYPE"',0,80),SUBSTRB("ORDER_FACT_56_ATTENDEE_TYPE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."CHECK_NUMBER"',0,80),SUBSTRB("ORDER_FACT_57_CHECK_NUMBER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."COMMENTS"',0,80),SUBSTRB("ORDER_FACT_58_COMMENTS$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_59_OB_NATIO$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_60_OB_NATIO$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_61_OB_NATIO$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_62_OB_TERR_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_ID"',0,80),SUBSTRB("ORDER_FACT_63_OB_REP_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OB_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_64_OB_REP_NAME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_65_OSR_TERR_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_ID"',0,80),SUBSTRB("ORDER_FACT_66_OSR_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."OSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_67_OSR_REP_NAME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_68_ENT_NATI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_69_ENT_NATI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_NATIONAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_70_ENT_NATI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_71_ENT_INSI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_ID"',0,80),SUBSTRB("ORDER_FA_72_ENT_INSI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_INSIDE_REP_NAME"',0,80),SUBSTRB("ORDER_FA_73_ENT_INSI$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_TERR_NUM"',0,80),SUBSTRB("ORDER_FA_74_ENT_FEDE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_ID"',0,80),SUBSTRB("ORDER_FA_75_ENT_FEDE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."ENT_FEDERAL_REP_NAME"',0,80),SUBSTRB("ORDER_FA_76_ENT_FEDE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_77_BTSR_TERR_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_ID"',0,80),SUBSTRB("ORDER_FACT_78_BTSR_REP_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTSR_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_79_BTSR_REP_NAME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_TERR_NUM"',0,80),SUBSTRB("ORDER_FACT_80_BTA_TERR_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_ID"',0,80),SUBSTRB("ORDER_FACT_81_BTA_REP_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"ORDER_FACT"."BTA_REP_NAME"',0,80),SUBSTRB("ORDER_FACT_82_BTA_REP_NAME$1"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
          
          IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "ORDER_FACT_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "ORDER_FACT_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "ORDER_FACT_ins" := "ORDER_FACT_ins" + get_rowid.COUNT;
      "ORDER_FACT_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "ORDER_FACT_ins" := "ORDER_FACT_ins0"; 
    "ORDER_FACT_upd" := "ORDER_FACT_upd0";
  END IF;

END "FLTR_DML$1";

---------------------------------------------------------------------------
-- "FLTR_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "ORDER_FACT_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "FLTR_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "ORDER_FACT_St" THEN
          "ORDER_FACT_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"ORDER_FACT"',
              p_target_uoid=>'A41FFB19B0755678E040007F01006C7D',
              p_stm=>'TRACE 22',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "ORDER_FACT_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19AB1F5678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0755678E040007F01006C7D', -- Operator ORDER_FACT
              p_parent_object_name=>'ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'ORDER_FACT',
              p_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B4225678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0975678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FFB1912D15678E040007F01006C7D', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0725678E040007F01006C7D', -- Operator QG_EVENROLL
              p_parent_object_name=>'QG_EVENROLL',
              p_parent_object_uoid=>'A41FFB1911CC5678E040007F01006C7D', -- Table QG_EVENROLL
              p_parent_object_type=>'Table',
              p_object_name=>'QG_EVENROLL',
              p_object_uoid=>'A41FFB1911CC5678E040007F01006C7D', -- Table QG_EVENROLL
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0965678E040007F01006C7D', -- Operator EVXBILLING
              p_parent_object_name=>'EVXBILLING',
              p_parent_object_uoid=>'A41FFB19087C5678E040007F01006C7D', -- Table EVXBILLING
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLING',
              p_object_uoid=>'A41FFB19087C5678E040007F01006C7D', -- Table EVXBILLING
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B4965678E040007F01006C7D', -- Operator ORDER_FACT
              p_parent_object_name=>'ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'ORDER_FACT',
              p_object_uoid=>'A41FA16DB082655CE040007F01006B9E', -- Table ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B08E5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B06F5678E040007F01006C7D', -- Operator EVXBILLPAYMENT
              p_parent_object_name=>'EVXBILLPAYMENT',
              p_parent_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLPAYMENT',
              p_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0955678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0705678E040007F01006C7D', -- Operator EVXENROLLHX
              p_parent_object_name=>'EVXENROLLHX',
              p_parent_object_uoid=>'A41FFB190D705678E040007F01006C7D', -- Table EVXENROLLHX
              p_parent_object_type=>'Table',
              p_object_name=>'EVXENROLLHX',
              p_object_uoid=>'A41FFB190D705678E040007F01006C7D', -- Table EVXENROLLHX
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19ADF05678E040007F01006C7D', -- Operator PPCARD_DIM
              p_parent_object_name=>'PPCARD_DIM',
              p_parent_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PPCARD_DIM',
              p_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B26A5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19ADF15678E040007F01006C7D', -- Operator EVXEVTICKET_1
              p_parent_object_name=>'EVXEVTICKET',
              p_parent_object_uoid=>'A41FFB190BFA5678E040007F01006C7D', -- Table EVXEVTICKET
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEVTICKET',
              p_object_uoid=>'A41FFB190BFA5678E040007F01006C7D', -- Table EVXEVTICKET
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B0905678E040007F01006C7D', -- Operator EVXEV_TXFEE
              p_parent_object_name=>'EVXEV_TXFEE',
              p_parent_object_uoid=>'A41FFB190D9F5678E040007F01006C7D', -- Table EVXEV_TXFEE
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEV_TXFEE',
              p_object_uoid=>'A41FFB190D9F5678E040007F01006C7D', -- Table EVXEV_TXFEE
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B3525678E040007F01006C7D', -- Operator PPCARD_DIM
              p_parent_object_name=>'PPCARD_DIM',
              p_parent_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PPCARD_DIM',
              p_object_uoid=>'A41FFB1914805678E040007F01006C7D', -- Table PPCARD_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "FLTR_si$1" := 0;
    "ORDER_FACT_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "FLTR_SU$1";

      LOOP
        IF "FLTR_si$1" = 0 THEN
          "FLTR_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "FLTR_12_EVXEVENROLLID$1".COUNT - 1;
          ELSE
            bulk_count := "FLTR_12_EVXEVENROLLID$1".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "ORDER_FACT_ir".DELETE;
"ORDER_FACT_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "FLTR_i$1" := "FLTR_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "ORDER_FACT_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "FLTR_i$1" := "FLTR_i$1" + 1;
            "FLTR_si$1" := "FLTR_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "ORDER_FACT_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("FLTR_c$1"%NOTFOUND AND
               "FLTR_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "FLTR_i$1" > bulk_count THEN
            
              "FLTR_si$1" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_LEADSOURCE_DESC"((RTRIM("FLTR_13_EVXEVTICKETID$1"
            ("FLTR_i$1"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i$1"));
            
            ',0,2000);
            
                
                "GET_LEADSOURCE_DESC"((RTRIM("FLTR_13_EVXEVTICKETID$1"
            ("FLTR_i$1"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i$1"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"ORDER_FACT"';
            get_audit_detail_id := "ORDER_FACT_id";
            IF NOT "ORDER_FACT_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"ORDER_FACT_0_ENROLL_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_12_EVXEVENROLLID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_0_ENROLL_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_12_EVXEVENROLLID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_0_ENROLL_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_12_EVXEVENROLLID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_0_ENROLL_ID$1" :=
            
            RTRIM("FLTR_12_EVXEVENROLLID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_1_EVENT_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_7_EVXEVENTID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_1_EVENT_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_7_EVXEVENTID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_1_EVENT_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_7_EVXEVENTID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_1_EVENT_ID$1" :=
            
            RTRIM("FLTR_7_EVXEVENTID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_2_CUST_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_8_ATTENDEECONTACTID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_2_CUST_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_8_ATTENDEECONTACTID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_2_CUST_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_8_ATTENDEECONTACTID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_2_CUST_ID$1" :=
            
            RTRIM("FLTR_8_ATTENDEECONTACTID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_3_ENROLL_DATE$1"("ORDER_FACT_i") := 
            
            "EXPR_5_ENROLL_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_3_ENROLL_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_5_ENROLL_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_3_ENROLL_DATE$1"("ORDER_FACT_i") :=
            
            "EXPR_5_ENROLL_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_3_ENROLL_DATE$1" :=
            
            "EXPR_5_ENROLL_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_4_KEYCODE$1"("ORDER_FACT_i") := 
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_4_KEYCODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_LEAD_1_LEADSOUR"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_4_KEYCODE$1"("ORDER_FACT_i") :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_4_KEYCODE$1" :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_5_BOOK_DATE$1"("ORDER_FACT_i") := 
            
            "EXPR_6_BOOK_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_5_BOOK_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_6_BOOK_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_5_BOOK_DATE$1"("ORDER_FACT_i") :=
            
            "EXPR_6_BOOK_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_5_BOOK_DATE$1" :=
            
            "EXPR_6_BOOK_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_6_REV_DATE$1"("ORDER_FACT_i") := 
            
            "EXPR_1_2_REV_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_6_REV_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_1_2_REV_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_6_REV_DATE$1"("ORDER_FACT_i") :=
            
            "EXPR_1_2_REV_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_6_REV_DATE$1" :=
            
            "EXPR_1_2_REV_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_8_ENROLL_SOURCE$1"("ORDER_FACT_i") := 
            
            "FLTR_15_ENROLLSOURCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_8_ENROLL_SOURCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_15_ENROLLSOURCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_8_ENROLL_SOURCE$1"("ORDER_FACT_i") :=
            
            "FLTR_15_ENROLLSOURCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_8_ENROLL_SOUR" :=
            
            "FLTR_15_ENROLLSOURCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_9_QUANTITY$1"("ORDER_FACT_i") := 
            
            "FLTR_10_ENROLLQTY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_9_QUANTITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_10_ENROLLQTY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_9_QUANTITY$1"("ORDER_FACT_i") :=
            
            "FLTR_10_ENROLLQTY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_9_QUANTITY$1" :=
            
            "FLTR_10_ENROLLQTY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_10_BOOK_AMT$1"("ORDER_FACT_i") := 
            
            "FLTR_5_ACTUALAMOUNT$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_10_BOOK_AMT$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_5_ACTUALAMOUNT$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_10_BOOK_AMT$1"("ORDER_FACT_i") :=
            
            "FLTR_5_ACTUALAMOUNT$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_10_BOOK_AMT$1" :=
            
            "FLTR_5_ACTUALAMOUNT$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_11_CURR_CODE$1"("ORDER_FACT_i") := 
            
            "FLTR_17_CURRENCYTYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_11_CURR_CODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_17_CURRENCYTYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_11_CURR_CODE$1"("ORDER_FACT_i") :=
            
            "FLTR_17_CURRENCYTYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_11_CURR_CODE$1" :=
            
            "FLTR_17_CURRENCYTYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_13_SALESPERSON$1"("ORDER_FACT_i") := 
            
            "FLTR_19_SOLDBYUSER$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_13_SALESPERSON$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_19_SOLDBYUSER$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_13_SALESPERSON$1"("ORDER_FACT_i") :=
            
            "FLTR_19_SOLDBYUSER$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_13_SALESPERSON$1" :=
            
            "FLTR_19_SOLDBYUSER$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_15_OPPORTUNITY_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_30_OPPORTUNITYID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_15_OPPORTUNITY_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_30_OPPORTUNITYID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_15_OPPORTUNITY_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_30_OPPORTUNITYID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_15_OPPORTUNIT" :=
            
            RTRIM("FLTR_30_OPPORTUNITYID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_17_ORACLE_TRX_NUM$1"("ORDER_FACT_i") := 
            
            "GET_ORA_TRX_NUM_1_VALUE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_17_ORACLE_TRX_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_ORA_TRX_NUM_1_VALUE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_17_ORACLE_TRX_NUM$1"("ORDER_FACT_i") :=
            
            "GET_ORA_TRX_NUM_1_VALUE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_17_ORACLE_TRX" :=
            
            "GET_ORA_TRX_NUM_1_VALUE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_22_GKDW_SOURCE$1"("ORDER_FACT_i") := 
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_22_GKDW_SOURCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_ORDER_FACT"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_22_GKDW_SOURCE$1"("ORDER_FACT_i") :=
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_22_GKDW_SOURCE$1" :=
            
            "OWB_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_24_ZIP_CODE$1"("ORDER_FACT_i") := 
            
            "EXPR_2_2_ZIP_CODE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_24_ZIP_CODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_2_2_ZIP_CODE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_24_ZIP_CODE$1"("ORDER_FACT_i") :=
            
            "EXPR_2_2_ZIP_CODE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_24_ZIP_CODE$1" :=
            
            "EXPR_2_2_ZIP_CODE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_26_COUNTRY$1"("ORDER_FACT_i") := 
            
            "EVENT_DIM_20_COUNTRY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_26_COUNTRY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVENT_DIM_20_COUNTRY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_26_COUNTRY$1"("ORDER_FACT_i") :=
            
            "EVENT_DIM_20_COUNTRY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_26_COUNTRY$1" :=
            
            "EVENT_DIM_20_COUNTRY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_28_TERRITORY$1"("ORDER_FACT_i") := 
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_28_TERRITORY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_3_TERRITORY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_28_TERRITORY$1"("ORDER_FACT_i") :=
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_28_TERRITORY$1" :=
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_29_REGION$1"("ORDER_FACT_i") := 
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_29_REGION$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_4_REGION$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_29_REGION$1"("ORDER_FACT_i") :=
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_29_REGION$1" :=
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_30_SALES_REP$1"("ORDER_FACT_i") := 
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_30_SALES_REP$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_5_SALES_REP$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_30_SALES_REP$1"("ORDER_FACT_i") :=
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_30_SALES_REP$1" :=
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_31_REGION_REP$1"("ORDER_FACT_i") := 
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_31_REGION_REP$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_31_REGION_REP$1"("ORDER_FACT_i") :=
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_31_REGION_REP$1" :=
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_32_CREATION_DATE$1"("ORDER_FACT_i") := 
            
            "EXPR_7_CREATE_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_32_CREATION_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_7_CREATE_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_32_CREATION_DATE$1"("ORDER_FACT_i") :=
            
            "EXPR_7_CREATE_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_32_CREATION_DA" :=
            
            "EXPR_7_CREATE_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_33_LAST_UPDATE_DA"("ORDER_FACT_i") := 
            
            "FLTR_4_MODIFYDATE_TXFEE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_33_LAST_UPDATE_DA"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_4_MODIFYDATE_TXFEE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_33_LAST_UPDATE_DA"("ORDER_FACT_i") :=
            
            "FLTR_4_MODIFYDATE_TXFEE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_33_LAST_UPDAT" :=
            
            "FLTR_4_MODIFYDATE_TXFEE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_34_ENROLL_STATUS$1"("ORDER_FACT_i") := 
            
            "FLTR_11_ENROLLSTATUS$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_34_ENROLL_STATUS$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_11_ENROLLSTATUS$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_34_ENROLL_STATUS$1"("ORDER_FACT_i") :=
            
            "FLTR_11_ENROLLSTATUS$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_34_ENROLL_STAT" :=
            
            "FLTR_11_ENROLLSTATUS$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_36_TXFEE_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_2_EVXEV_TXFEEID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_36_TXFEE_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_2_EVXEV_TXFEEID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_36_TXFEE_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_2_EVXEV_TXFEEID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_36_TXFEE_ID$1" :=
            
            RTRIM("FLTR_2_EVXEV_TXFEEID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_37_BILL_DATE$1"("ORDER_FACT_i") := 
            
            "FLTR_16_BILLINGDATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_37_BILL_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_16_BILLINGDATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_37_BILL_DATE$1"("ORDER_FACT_i") :=
            
            "FLTR_16_BILLINGDATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_37_BILL_DATE$1" :=
            
            "FLTR_16_BILLINGDATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_39_ENROLL_S$1"("ORDER_FACT_i") := 
            
            "FLTR_14_ENROLLSTATUSDESC$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_39_ENROLL_S$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_14_ENROLLSTATUSDESC$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_39_ENROLL_S$1"("ORDER_FACT_i") :=
            
            "FLTR_14_ENROLLSTATUSDESC$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_39_ENROLL_S$1" :=
            
            "FLTR_14_ENROLLSTATUSDESC$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_40_FEE_TYPE$1"("ORDER_FACT_i") := 
            
            "FLTR_20_FEETYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_40_FEE_TYPE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_20_FEETYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_40_FEE_TYPE$1"("ORDER_FACT_i") :=
            
            "FLTR_20_FEETYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_40_FEE_TYPE$1" :=
            
            "FLTR_20_FEETYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_41_ENROLL_S$1"("ORDER_FACT_i") := 
            
            "FLTR_21_ENROLLSTATUSDATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_41_ENROLL_S$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_21_ENROLLSTATUSDATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_41_ENROLL_S$1"("ORDER_FACT_i") :=
            
            "FLTR_21_ENROLLSTATUSDATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_41_ENROLL_S$1" :=
            
            "FLTR_21_ENROLLSTATUSDATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_42_PP_SALES$1"("ORDER_FACT_i") := 
            
            "PPCARD_DIM_17_SALES_ORDER_ID$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_42_PP_SALES$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("PPCARD_DIM_17_SALES_ORDER_ID$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_42_PP_SALES$1"("ORDER_FACT_i") :=
            
            "PPCARD_DIM_17_SALES_ORDER_ID$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_42_PP_SALES$1" :=
            
            "PPCARD_DIM_17_SALES_ORDER_ID$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_43_SOURCE$1"("ORDER_FACT_i") := 
            
            "FLTR_24_SOURCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_43_SOURCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_24_SOURCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_43_SOURCE$1"("ORDER_FACT_i") :=
            
            "FLTR_24_SOURCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_43_SOURCE$1" :=
            
            "FLTR_24_SOURCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_44_BAL_DUE$1"("ORDER_FACT_i") := 
            
            "EVXBILLING_6_BALANCEDUE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_44_BAL_DUE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLING_6_BALANCEDUE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_44_BAL_DUE$1"("ORDER_FACT_i") :=
            
            "EVXBILLING_6_BALANCEDUE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_44_BAL_DUE$1" :=
            
            "EVXBILLING_6_BALANCEDUE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_45_LIST_PRICE$1"("ORDER_FACT_i") := 
            
            "EXPR_3_9_LIST_PRICE_OUT$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_45_LIST_PRICE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_3_9_LIST_PRICE_OUT$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_45_LIST_PRICE$1"("ORDER_FACT_i") :=
            
            "EXPR_3_9_LIST_PRICE_OUT$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_45_LIST_PRICE$1" :=
            
            "EXPR_3_9_LIST_PRICE_OUT$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_46_PO_NUMBER$1"("ORDER_FACT_i") := 
            
            "FLTR_31_PONUMBER$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_46_PO_NUMBER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_31_PONUMBER$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_46_PO_NUMBER$1"("ORDER_FACT_i") :=
            
            "FLTR_31_PONUMBER$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_46_PO_NUMBER$1" :=
            
            "FLTR_31_PONUMBER$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_47_PPCARD_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARD"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_47_PPCARD_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXBILLPAYMENT_61_EVXPPCARD"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_47_PPCARD_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARD"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_47_PPCARD_ID$1" :=
            
            RTRIM("EVXBILLPAYMENT_61_EVXPPCARD"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_48_PAYMENT_METHOD$1"("ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_48_PAYMENT_METHOD$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_48_PAYMENT_METHOD$1"("ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_48_PAYMENT_ME" :=
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_49_REG_CODE$1"("ORDER_FACT_i") := 
            
            "FLTR_27_CHANNEL$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_49_REG_CODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_27_CHANNEL$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_49_REG_CODE$1"("ORDER_FACT_i") :=
            
            "FLTR_27_CHANNEL$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_49_REG_CODE$1" :=
            
            "FLTR_27_CHANNEL$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_50_CREATE_USER$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_50_CREATE_USER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_28_CREATEUSER_TXFEE$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_50_CREATE_USER$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_50_CREATE_USER$1" :=
            
            RTRIM("FLTR_28_CREATEUSER_TXFEE$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_51_MODIFY_USER$1"("ORDER_FACT_i") := 
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_51_MODIFY_USER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_29_MODIFYUSER_TXFEE$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_51_MODIFY_USER$1"("ORDER_FACT_i") :=
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_51_MODIFY_USER$1" :=
            
            RTRIM("FLTR_29_MODIFYUSER_TXFEE$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_52_ENROLL_TYPE$1"("ORDER_FACT_i") := 
            
            "FLTR_32_REVIEWTYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_52_ENROLL_TYPE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_32_REVIEWTYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_52_ENROLL_TYPE$1"("ORDER_FACT_i") :=
            
            "FLTR_32_REVIEWTYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_52_ENROLL_TYPE$1" :=
            
            "FLTR_32_REVIEWTYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_56_ATTENDEE_TYPE$1"("ORDER_FACT_i") := 
            
            "FLTR_35_ATTENDEETYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_56_ATTENDEE_TYPE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_35_ATTENDEETYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_56_ATTENDEE_TYPE$1"("ORDER_FACT_i") :=
            
            "FLTR_35_ATTENDEETYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_56_ATTENDEE_TY" :=
            
            "FLTR_35_ATTENDEETYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_57_CHECK_NUMBER$1"("ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_27_CHECKNUMB"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_57_CHECK_NUMBER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_27_CHECKNUMB"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_57_CHECK_NUMBER$1"("ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_27_CHECKNUMB"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_57_CHECK_NUMB" :=
            
            "EVXBILLPAYMENT_27_CHECKNUMB"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_58_COMMENTS$1"("ORDER_FACT_i") := 
            
            "FLTR_36_COMMENTS$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_58_COMMENTS$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_36_COMMENTS$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_58_COMMENTS$1"("ORDER_FACT_i") :=
            
            "FLTR_36_COMMENTS$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_58_COMMENTS$1" :=
            
            "FLTR_36_COMMENTS$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_59_OB_NATIO$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_39_OB_NATIO$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_59_OB_NATIO$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_39_OB_NATIO$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_59_OB_NATIO$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_39_OB_NATIO$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_59_OB_NATIO$1" :=
            
            "CUST_DIM_39_OB_NATIO$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_60_OB_NATIO$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_60_OB_NATIO$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_40_OB_NATIONAL_REP_"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_60_OB_NATIO$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_60_OB_NATIO$1" :=
            
            RTRIM("CUST_DIM_40_OB_NATIONAL_REP_"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_61_OB_NATIO$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_41_OB_NATIO$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_61_OB_NATIO$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_41_OB_NATIO$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_61_OB_NATIO$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_41_OB_NATIO$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_61_OB_NATIO$1" :=
            
            "CUST_DIM_41_OB_NATIO$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_62_OB_TERR_NUM$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_42_OB_TERR_NUM$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_62_OB_TERR_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_42_OB_TERR_NUM$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_62_OB_TERR_NUM$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_42_OB_TERR_NUM$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_62_OB_TERR_NUM$1" :=
            
            "CUST_DIM_42_OB_TERR_NUM$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_63_OB_REP_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_43_OB_REP_ID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_63_OB_REP_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_43_OB_REP_ID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_63_OB_REP_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_43_OB_REP_ID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_63_OB_REP_ID$1" :=
            
            RTRIM("CUST_DIM_43_OB_REP_ID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_64_OB_REP_NAME$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_44_OB_REP_NAME$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_64_OB_REP_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_44_OB_REP_NAME$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_64_OB_REP_NAME$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_44_OB_REP_NAME$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_64_OB_REP_NAME$1" :=
            
            "CUST_DIM_44_OB_REP_NAME$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_65_OSR_TERR_NUM$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_45_OSR_TERR_NUM$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_65_OSR_TERR_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_45_OSR_TERR_NUM$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_65_OSR_TERR_NUM$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_45_OSR_TERR_NUM$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_65_OSR_TERR_N" :=
            
            "CUST_DIM_45_OSR_TERR_NUM$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_66_OSR_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_46_OSR_ID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_66_OSR_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_46_OSR_ID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_66_OSR_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_46_OSR_ID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_66_OSR_ID$1" :=
            
            RTRIM("CUST_DIM_46_OSR_ID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_67_OSR_REP_NAME$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_47_OSR_REP_NAME$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_67_OSR_REP_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_47_OSR_REP_NAME$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_67_OSR_REP_NAME$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_47_OSR_REP_NAME$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_67_OSR_REP_NA" :=
            
            "CUST_DIM_47_OSR_REP_NAME$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_68_ENT_NATI$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_48_ENT_NATI$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_68_ENT_NATI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_48_ENT_NATI$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_68_ENT_NATI$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_48_ENT_NATI$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_68_ENT_NATI$1" :=
            
            "CUST_DIM_48_ENT_NATI$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_69_ENT_NATI$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_49_ENT_NATI$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_69_ENT_NATI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_49_ENT_NATI$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_69_ENT_NATI$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_49_ENT_NATI$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_69_ENT_NATI$1" :=
            
            RTRIM("CUST_DIM_49_ENT_NATI$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_70_ENT_NATI$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_50_ENT_NATI$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_70_ENT_NATI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_50_ENT_NATI$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_70_ENT_NATI$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_50_ENT_NATI$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_70_ENT_NATI$1" :=
            
            "CUST_DIM_50_ENT_NATI$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_71_ENT_INSI$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_51_ENT_INSI$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_71_ENT_INSI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_51_ENT_INSI$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_71_ENT_INSI$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_51_ENT_INSI$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_71_ENT_INSI$1" :=
            
            "CUST_DIM_51_ENT_INSI$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_72_ENT_INSI$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_72_ENT_INSI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_52_ENT_INSIDE_REP_"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_72_ENT_INSI$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_72_ENT_INSI$1" :=
            
            RTRIM("CUST_DIM_52_ENT_INSIDE_REP_"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_73_ENT_INSI$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_53_ENT_INSI$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_73_ENT_INSI$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_53_ENT_INSI$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_73_ENT_INSI$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_53_ENT_INSI$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_73_ENT_INSI$1" :=
            
            "CUST_DIM_53_ENT_INSI$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_74_ENT_FEDE$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_54_ENT_FEDE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_74_ENT_FEDE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_54_ENT_FEDE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_74_ENT_FEDE$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_54_ENT_FEDE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_74_ENT_FEDE$1" :=
            
            "CUST_DIM_54_ENT_FEDE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_75_ENT_FEDE$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FA_75_ENT_FEDE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_75_ENT_FEDE$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_75_ENT_FEDE$1" :=
            
            RTRIM("CUST_DIM_55_ENT_FEDERAL_REP_"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FA_76_ENT_FEDE$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_56_ENT_FEDE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FA_76_ENT_FEDE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_56_ENT_FEDE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FA_76_ENT_FEDE$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_56_ENT_FEDE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FA_76_ENT_FEDE$1" :=
            
            "CUST_DIM_56_ENT_FEDE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_77_BTSR_TERR_NUM$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_57_BTSR_TERR_NUM$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_77_BTSR_TERR_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_57_BTSR_TERR_NUM$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_77_BTSR_TERR_NUM$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_57_BTSR_TERR_NUM$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_77_BTSR_TERR_N" :=
            
            "CUST_DIM_57_BTSR_TERR_NUM$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_78_BTSR_REP_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_78_BTSR_REP_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_58_BTSR_REP_ID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_78_BTSR_REP_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_78_BTSR_REP_ID$1" :=
            
            RTRIM("CUST_DIM_58_BTSR_REP_ID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_79_BTSR_REP_NAME$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_59_BTSR_REP_NAME$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_79_BTSR_REP_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_59_BTSR_REP_NAME$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_79_BTSR_REP_NAME$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_59_BTSR_REP_NAME$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_79_BTSR_REP_NA" :=
            
            "CUST_DIM_59_BTSR_REP_NAME$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_80_BTA_TERR_NUM$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_60_BTA_TERR_NUM$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_80_BTA_TERR_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_60_BTA_TERR_NUM$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_80_BTA_TERR_NUM$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_60_BTA_TERR_NUM$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_80_BTA_TERR_N" :=
            
            "CUST_DIM_60_BTA_TERR_NUM$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_81_BTA_REP_ID$1"("ORDER_FACT_i") := 
            
            RTRIM("CUST_DIM_61_BTA_REP_ID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_81_BTA_REP_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("CUST_DIM_61_BTA_REP_ID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_81_BTA_REP_ID$1"("ORDER_FACT_i") :=
            
            RTRIM("CUST_DIM_61_BTA_REP_ID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_81_BTA_REP_ID$1" :=
            
            RTRIM("CUST_DIM_61_BTA_REP_ID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"ORDER_FACT_82_BTA_REP_NAME$1"("ORDER_FACT_i") := 
            
            "CUST_DIM_62_BTA_REP_NAME$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"ORDER_FACT_82_BTA_REP_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("CUST_DIM_62_BTA_REP_NAME$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "ORDER_FACT_82_BTA_REP_NAME$1"("ORDER_FACT_i") :=
            
            "CUST_DIM_62_BTA_REP_NAME$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_ORDER_FACT_82_BTA_REP_NA" :=
            
            "CUST_DIM_62_BTA_REP_NAME$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "ORDER_FACT_srk"("ORDER_FACT_i") := get_rowkey + "FLTR_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_ORDER_FACT_srk" := get_rowkey + "FLTR_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "ORDER_FACT_new" := TRUE;
                ELSE
                  "ORDER_FACT_i" := "ORDER_FACT_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
             
                  "FLTR_ER$1"('TRACE 23: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "FLTR_i$1");
                  
                  "ORDER_FACT_err" := "ORDER_FACT_err" + 1;
                  
                  IF get_errors + "ORDER_FACT_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("ORDER_FACT_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "ORDER_FACT_new" 
            AND (NOT "ORDER_FACT_nul") THEN
              "ORDER_FACT_ir"(dml_bsize) := "ORDER_FACT_i";
            	"ORDER_FACT_0_ENROLL_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_0_ENROLL_ID$1";
            	"ORDER_FACT_1_EVENT_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_1_EVENT_ID$1";
            	"ORDER_FACT_2_CUST_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_2_CUST_ID$1";
            	"ORDER_FACT_3_ENROLL_DATE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_3_ENROLL_DATE$1";
            	"ORDER_FACT_4_KEYCODE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_4_KEYCODE$1";
            	"ORDER_FACT_5_BOOK_DATE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_5_BOOK_DATE$1";
            	"ORDER_FACT_6_REV_DATE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_6_REV_DATE$1";
            	"ORDER_FACT_8_ENROLL_SOURCE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_8_ENROLL_SOUR";
            	"ORDER_FACT_9_QUANTITY$1"("ORDER_FACT_i") := "SV_ORDER_FACT_9_QUANTITY$1";
            	"ORDER_FACT_10_BOOK_AMT$1"("ORDER_FACT_i") := "SV_ORDER_FACT_10_BOOK_AMT$1";
            	"ORDER_FACT_11_CURR_CODE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_11_CURR_CODE$1";
            	"ORDER_FACT_13_SALESPERSON$1"("ORDER_FACT_i") := "SV_ORDER_FACT_13_SALESPERSON$1";
            	"ORDER_FACT_15_OPPORTUNITY_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_15_OPPORTUNIT";
            	"ORDER_FACT_17_ORACLE_TRX_NUM$1"("ORDER_FACT_i") := "SV_ORDER_FACT_17_ORACLE_TRX";
            	"ORDER_FACT_22_GKDW_SOURCE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_22_GKDW_SOURCE$1";
            	"ORDER_FACT_24_ZIP_CODE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_24_ZIP_CODE$1";
            	"ORDER_FACT_26_COUNTRY$1"("ORDER_FACT_i") := "SV_ORDER_FACT_26_COUNTRY$1";
            	"ORDER_FACT_28_TERRITORY$1"("ORDER_FACT_i") := "SV_ORDER_FACT_28_TERRITORY$1";
            	"ORDER_FACT_29_REGION$1"("ORDER_FACT_i") := "SV_ORDER_FACT_29_REGION$1";
            	"ORDER_FACT_30_SALES_REP$1"("ORDER_FACT_i") := "SV_ORDER_FACT_30_SALES_REP$1";
            	"ORDER_FACT_31_REGION_REP$1"("ORDER_FACT_i") := "SV_ORDER_FACT_31_REGION_REP$1";
            	"ORDER_FACT_32_CREATION_DATE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_32_CREATION_DA";
            	"ORDER_FACT_33_LAST_UPDATE_DA"("ORDER_FACT_i") := "SV_ORDER_FACT_33_LAST_UPDAT";
            	"ORDER_FACT_34_ENROLL_STATUS$1"("ORDER_FACT_i") := "SV_ORDER_FACT_34_ENROLL_STAT";
            	"ORDER_FACT_36_TXFEE_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_36_TXFEE_ID$1";
            	"ORDER_FACT_37_BILL_DATE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_37_BILL_DATE$1";
            	"ORDER_FA_39_ENROLL_S$1"("ORDER_FACT_i") := "SV_ORDER_FA_39_ENROLL_S$1";
            	"ORDER_FACT_40_FEE_TYPE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_40_FEE_TYPE$1";
            	"ORDER_FA_41_ENROLL_S$1"("ORDER_FACT_i") := "SV_ORDER_FA_41_ENROLL_S$1";
            	"ORDER_FA_42_PP_SALES$1"("ORDER_FACT_i") := "SV_ORDER_FA_42_PP_SALES$1";
            	"ORDER_FACT_43_SOURCE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_43_SOURCE$1";
            	"ORDER_FACT_44_BAL_DUE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_44_BAL_DUE$1";
            	"ORDER_FACT_45_LIST_PRICE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_45_LIST_PRICE$1";
            	"ORDER_FACT_46_PO_NUMBER$1"("ORDER_FACT_i") := "SV_ORDER_FACT_46_PO_NUMBER$1";
            	"ORDER_FACT_47_PPCARD_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_47_PPCARD_ID$1";
            	"ORDER_FACT_48_PAYMENT_METHOD$1"("ORDER_FACT_i") := "SV_ORDER_FACT_48_PAYMENT_ME";
            	"ORDER_FACT_49_REG_CODE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_49_REG_CODE$1";
            	"ORDER_FACT_50_CREATE_USER$1"("ORDER_FACT_i") := "SV_ORDER_FACT_50_CREATE_USER$1";
            	"ORDER_FACT_51_MODIFY_USER$1"("ORDER_FACT_i") := "SV_ORDER_FACT_51_MODIFY_USER$1";
            	"ORDER_FACT_52_ENROLL_TYPE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_52_ENROLL_TYPE$1";
            	"ORDER_FACT_56_ATTENDEE_TYPE$1"("ORDER_FACT_i") := "SV_ORDER_FACT_56_ATTENDEE_TY";
            	"ORDER_FACT_57_CHECK_NUMBER$1"("ORDER_FACT_i") := "SV_ORDER_FACT_57_CHECK_NUMB";
            	"ORDER_FACT_58_COMMENTS$1"("ORDER_FACT_i") := "SV_ORDER_FACT_58_COMMENTS$1";
            	"ORDER_FA_59_OB_NATIO$1"("ORDER_FACT_i") := "SV_ORDER_FA_59_OB_NATIO$1";
            	"ORDER_FA_60_OB_NATIO$1"("ORDER_FACT_i") := "SV_ORDER_FA_60_OB_NATIO$1";
            	"ORDER_FA_61_OB_NATIO$1"("ORDER_FACT_i") := "SV_ORDER_FA_61_OB_NATIO$1";
            	"ORDER_FACT_62_OB_TERR_NUM$1"("ORDER_FACT_i") := "SV_ORDER_FACT_62_OB_TERR_NUM$1";
            	"ORDER_FACT_63_OB_REP_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_63_OB_REP_ID$1";
            	"ORDER_FACT_64_OB_REP_NAME$1"("ORDER_FACT_i") := "SV_ORDER_FACT_64_OB_REP_NAME$1";
            	"ORDER_FACT_65_OSR_TERR_NUM$1"("ORDER_FACT_i") := "SV_ORDER_FACT_65_OSR_TERR_N";
            	"ORDER_FACT_66_OSR_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_66_OSR_ID$1";
            	"ORDER_FACT_67_OSR_REP_NAME$1"("ORDER_FACT_i") := "SV_ORDER_FACT_67_OSR_REP_NA";
            	"ORDER_FA_68_ENT_NATI$1"("ORDER_FACT_i") := "SV_ORDER_FA_68_ENT_NATI$1";
            	"ORDER_FA_69_ENT_NATI$1"("ORDER_FACT_i") := "SV_ORDER_FA_69_ENT_NATI$1";
            	"ORDER_FA_70_ENT_NATI$1"("ORDER_FACT_i") := "SV_ORDER_FA_70_ENT_NATI$1";
            	"ORDER_FA_71_ENT_INSI$1"("ORDER_FACT_i") := "SV_ORDER_FA_71_ENT_INSI$1";
            	"ORDER_FA_72_ENT_INSI$1"("ORDER_FACT_i") := "SV_ORDER_FA_72_ENT_INSI$1";
            	"ORDER_FA_73_ENT_INSI$1"("ORDER_FACT_i") := "SV_ORDER_FA_73_ENT_INSI$1";
            	"ORDER_FA_74_ENT_FEDE$1"("ORDER_FACT_i") := "SV_ORDER_FA_74_ENT_FEDE$1";
            	"ORDER_FA_75_ENT_FEDE$1"("ORDER_FACT_i") := "SV_ORDER_FA_75_ENT_FEDE$1";
            	"ORDER_FA_76_ENT_FEDE$1"("ORDER_FACT_i") := "SV_ORDER_FA_76_ENT_FEDE$1";
            	"ORDER_FACT_77_BTSR_TERR_NUM$1"("ORDER_FACT_i") := "SV_ORDER_FACT_77_BTSR_TERR_N";
            	"ORDER_FACT_78_BTSR_REP_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_78_BTSR_REP_ID$1";
            	"ORDER_FACT_79_BTSR_REP_NAME$1"("ORDER_FACT_i") := "SV_ORDER_FACT_79_BTSR_REP_NA";
            	"ORDER_FACT_80_BTA_TERR_NUM$1"("ORDER_FACT_i") := "SV_ORDER_FACT_80_BTA_TERR_N";
            	"ORDER_FACT_81_BTA_REP_ID$1"("ORDER_FACT_i") := "SV_ORDER_FACT_81_BTA_REP_ID$1";
            	"ORDER_FACT_82_BTA_REP_NAME$1"("ORDER_FACT_i") := "SV_ORDER_FACT_82_BTA_REP_NA";
              "ORDER_FACT_srk"("ORDER_FACT_i") := "SV_ORDER_FACT_srk";
              "ORDER_FACT_i" := "ORDER_FACT_i" + 1;
            ELSE
              "ORDER_FACT_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "FLTR_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "FLTR_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  dbms_output.put_line(last_error_number);
            dbms_output.put_line(last_error_message);
            "FLTR_ER$1"('TRACE 21: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "FLTR_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "FLTR_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "FLTR_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "FLTR_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "FLTR_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "ORDER_FACT_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"ORDER_FACT_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"ORDER_FACT_ins",
        p_upd=>"ORDER_FACT_upd",
        p_del=>"ORDER_FACT_del",
        p_err=>"ORDER_FACT_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "ORDER_FACT_ins";
    get_updated  := get_updated  + "ORDER_FACT_upd";
    get_deleted  := get_deleted  + "ORDER_FACT_del";
    get_errors   := get_errors   + "ORDER_FACT_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "FLTR_t";







PROCEDURE Initialize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  get_selected := 0;
  get_inserted := 0;
  get_updated  := 0;
  get_deleted  := 0;
  get_merged   := 0;
  get_errors   := 0;
  get_logical_errors := 0;
  get_abort    := FALSE;
  get_abort_procedure  := FALSE;

  FOR i IN 1..p_env.COUNT LOOP
    IF p_env(i).param_value IS NOT NULL THEN
      IF p_env(i).param_name = 'MAX_NO_OF_ERRORS' THEN
        get_max_errors := p_env(i).param_value;

      ELSIF p_env(i).param_name = 'COMMIT_FREQUENCY' THEN
        get_commit_frequency := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OPERATING_MODE' THEN
        get_operating_mode := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'BULK_SIZE' THEN
        get_bulk_size := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_LEVEL' THEN
        get_audit_level := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_ID' THEN
        get_audit_id := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'PURGE_GROUP' THEN
        get_purge_group := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OBJECT_ID' THEN
        OWB$MAP_OBJECT_ID := p_env(i).param_value;
      END IF;
    END IF;
  END LOOP;




  IF NOT (get_audit_level = AUDIT_NONE) THEN
    get_runtime_audit_id := WB_RT_MAPAUDIT.audit_begin(  -- Template AuditBegin
      p_auditid=>get_audit_id,
      p_lob_uoid=>get_lob_uoid,
      p_lob_name=>get_model_name,
      p_purge_group=>get_purge_group,
      p_parent=>NULL,
      p_source=>'"EVENT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."EVXBILLPAYMENT","PPCARD_DIM","SLXDW"."EVXBILLING","SLXDW"."EVXENROLLHX","SLXDW"."EVXEV_TXFEE","SLXDW"."EVXEVTICKET","SLXDW"."QG_EVENROLL"',
      p_source_uoid=>'A41FFB19B0975678E040007F01006C7D,A41FFB19B08E5678E040007F01006C7D,A41FFB19B0955678E040007F01006C7D,A41FFB19B06F5678E040007F01006C7D,A41FFB19ADF05678E040007F01006C7D,A41FFB19B0965678E040007F01006C7D',
      p_target=>'"ORDER_FACT"',
      p_target_uoid=>'A41FFB19B0755678E040007F01006C7D',      p_info=>NULL,
      
            p_type=>'PLSQLMap',
      
      p_date=>get_cycle_date
    );
  END IF;



BEGIN
  -- Expression statement
      error_stmt := SUBSTRB('
  
      
      GET_MAX_DATE("OWB_ORDER_FACT"."GET_CONST_0_TABLE_NAME","OWB_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT","OWB_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT");
  
  ',0,2000);
  
      
      GET_MAX_DATE("OWB_ORDER_FACT"."GET_CONST_0_TABLE_NAME","OWB_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT","OWB_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT");
  
    -- End expression statement
--    "OWB_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" := '01-NOV-2015';
--    "OWB_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" := '01-NOV-2015';
  
  
EXCEPTION WHEN OTHERS THEN
  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
 dbms_output.put_line(last_error_message);
 dbms_output.put_line(last_error_number);
  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_rtd=>NULL,
      p_rowkey=>0,
      p_table=>NULL,
      p_column=>NULL,
      p_dstval=>NULL,
      p_stm=>'PRE_MAP_TRIGGER',
      p_sqlerr=>SQLCODE,
      p_sqlerrm=>SQLERRM,
      p_rowid=>NULL
    );
  END IF;
  get_errors := get_errors + 1;
  get_abort  := TRUE;
  get_trigger_success := FALSE;
END;
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.1
  END IF;
END Initialize;

PROCEDURE Analyze_Targets IS
BEGIN
  FOR i IN 1..tables_to_analyze.COUNT LOOP
    WB_RT_MAPAUDIT_UTIL_INVOKER.gather_table_stats(
      p_ownname          => tables_to_analyze(i).ownname,
      p_tabname          => tables_to_analyze(i).tabname,
      p_estimate_percent => tables_to_analyze(i).estimate_percent,
      p_granularity      => tables_to_analyze(i).granularity,
      p_cascade          => tables_to_analyze(i).cascade,
      p_degree           => tables_to_analyze(i).degree);
  END LOOP;
END Analyze_Targets;


PROCEDURE Finalize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.13
  END IF;


  IF get_abort THEN
    get_status := 1;
  ELSIF get_errors > 0 THEN
    get_status := 2;
  ELSE
    get_status := 0;
  END IF;
  get_processed := get_inserted + get_deleted + get_updated + get_merged; 
  IF (get_errors = 0) THEN
    get_error_ratio := 0;
  ELSE
    get_error_ratio := (get_errors /(get_errors + get_processed)) * 100;
  END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
  IF get_status = 0 THEN
    WB_RT_MAPAUDIT.audit_end(
      p_rta=>get_runtime_audit_id,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  ELSE
    WB_RT_MAPAUDIT.audit_fail(
      p_rta=>get_runtime_audit_id,
      p_status=>get_status,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  END IF;
END IF;


  Analyze_Targets;
END Finalize;



FUNCTION Main(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN

  --DBMS_OUTPUT.ENABLE (1000000);

  IF WB_RT_MAPAUDIT_UTIL.supportsDesignClient(p_designVersion=>'10.2.0.1.31', p_minRuntimeVersion=>'10.2.0.1.0') < 1 THEN
    raise_application_error(-20103, 'Incompatible runtime and design client versions.');
  END IF;
  dbms_output.put_line('IN MAIN');
  Initialize(p_env);
  
  
  
  
  
  -- Initialize all batch status variables
  "ORDER_FACT_St" := FALSE;
  IF get_trigger_success THEN

  --  Processing for different operating modes
  IF get_operating_mode = MODE_SET THEN
    RAISE_APPLICATION_ERROR(-20101, 'Set based mode not supported');
  END IF;
  IF get_operating_mode = MODE_ROW THEN
		"FLTR_p";
  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW THEN
    IF get_use_hc THEN
      IF NOT get_batch_status AND get_use_hc THEN
        get_inserted := 0;
        get_updated  := 0;
        get_deleted  := 0;
        get_merged   := 0;
        get_logical_errors := 0;
"ORDER_FACT_St" := FALSE;

      END IF;
    END IF;

"FLTR_p";

  END IF;
  IF get_operating_mode = MODE_ROW_TARGET THEN
"FLTR_t";

  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW_TARGET THEN
    IF NOT get_batch_status AND get_use_hc THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
"ORDER_FACT_St" := FALSE;

    END IF;
"FLTR_t";

  END IF;
END IF;

  Finalize(p_env);
  RETURN get_status;
  END;

FUNCTION encode_operating_mode(p_operating_mode IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_operating_mode IS NULL THEN
    RETURN get_operating_mode;
  END IF;
  IF p_operating_mode = 'SET_BASED' THEN
    RETURN MODE_SET;
  ELSIF p_operating_mode = 'ROW_BASED' THEN
    RETURN MODE_ROW;
  ELSIF p_operating_mode = 'ROW_BASED_TARGET_ONLY' THEN
    RETURN MODE_ROW_TARGET;
  ELSIF p_operating_mode = 'SET_BASED_FAIL_OVER_TO_ROW_BASED' THEN
    RETURN MODE_SET_FAILOVER_ROW;
  ELSE
    RETURN MODE_SET_FAILOVER_ROW_TARGET;
  END IF;
END encode_operating_mode;

FUNCTION encode_audit_level(p_audit_level IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_audit_level IS NULL THEN
    RETURN get_audit_level;
  END IF;
  IF p_audit_level = 'NONE' THEN
    RETURN AUDIT_NONE;
  ELSIF p_audit_level = 'STATISTICS' THEN
    RETURN AUDIT_STATISTICS;
  ELSIF p_audit_level = 'ERROR_DETAILS' THEN
    RETURN AUDIT_ERROR_DETAILS;
  ELSE
    RETURN AUDIT_COMPLETE;
  END IF;
END encode_audit_level;


PROCEDURE Main(p_status OUT VARCHAR2,
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL) IS

  x_schema      VARCHAR2(30);

  x_audit_id    NUMBER;
  x_object_id   NUMBER;

  x_env         wb_rt_mapaudit.wb_rt_name_values;
  x_param       wb_rt_mapaudit.wb_rt_name_value;

  x_result      NUMBER;
  x_return_code NUMBER;

BEGIN
  -- validate parameters

  IF NOT wb_rt_mapaudit_util.validate_runtime_parameter('MAX_NO_OF_ERRORS',
                                                        p_max_no_of_errors) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('COMMIT_FREQUENCY',
                                                        p_commit_frequency) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('OPERATING_MODE',
                                                        p_operating_mode)   OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('BULK_SIZE',
                                                        p_bulk_size)        OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('AUDIT_LEVEL',
                                                        p_audit_level) THEN
    p_status := 'FAILURE';
    RETURN;
  END IF;

  -- perform pre-run setup

  SELECT ao.owner INTO x_schema
  FROM   user_objects uo, all_objects ao
  WHERE  uo.object_type = 'PACKAGE'
  AND    uo.object_name = 'OWB_ORDER_FACT'
  AND    uo.object_id = ao.object_id;

  wb_rt_mapaudit_util.premap('OWB_ORDER_FACT', x_schema, x_audit_id, x_object_id);

  -- prepare parameters for Main:

  x_param.param_name := 'AUDIT_ID';
  x_param.param_value := x_audit_id;
  x_env(1) := x_param;

  x_param.param_name := 'OBJECT_ID';
  x_param.param_value := x_object_id;
  x_env(2) := x_param;

  x_param.param_name := 'MAX_NO_OF_ERRORS';
  x_param.param_value := p_max_no_of_errors;
  x_env(3) := x_param;

  x_param.param_name := 'COMMIT_FREQUENCY';
  x_param.param_value := p_commit_frequency;
  x_env(4) := x_param;

  x_param.param_name := 'OPERATING_MODE';
  x_param.param_value := encode_operating_mode(p_operating_mode);
  x_env(5) := x_param;

  x_param.param_name := 'BULK_SIZE';
  x_param.param_value := p_bulk_size;
  x_env(6) := x_param;

  x_param.param_name := 'AUDIT_LEVEL';
  x_param.param_value := encode_audit_level(p_audit_level);
  x_env(7) := x_param;

  x_param.param_name := 'PURGE_GROUP';
  x_param.param_value := p_purge_group;
  x_env(8) := x_param;

  -- register "system" parameters:
  FOR i IN 3..8 LOOP
    IF x_env(i).param_value IS NOT NULL THEN
      wb_rt_mapaudit_util.register_sys_param(x_audit_id,
                                             x_env(i).param_name,
                                             x_env(i).param_value);
    END IF;
  END LOOP;

  -- really run it:
  -- return code from mapping is
  --   0 - success
  --   1 - failure
  --   2 - completed (with errors/warnings)
  x_return_code := NULL;
  BEGIN
    x_result := Main(x_env);
  EXCEPTION
    WHEN OTHERS THEN
      x_result := 1;
      x_return_code := SQLCODE;
  END;

  -- perform post map cleanup

  wb_rt_mapaudit_util.postmap(x_audit_id, x_result, x_return_code);

  -- show results:
  wb_rt_mapaudit_util.show_run_results(x_audit_id);

  -- set return status
  IF x_result = 0 THEN
    p_status := 'OK';
  ELSIF x_result = 1 THEN
    p_status := 'FAILURE';
  ELSE
    p_status := 'OK_WITH_WARNINGS';
  END IF;

END Main;

PROCEDURE Close_Cursors IS
BEGIN
BEGIN
  IF "FLTR_c"%ISOPEN THEN
    CLOSE "FLTR_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "FLTR_c$1"%ISOPEN THEN
    CLOSE "FLTR_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;

END Close_Cursors;



END "OWB_ORDER_FACT";
/


GRANT EXECUTE, DEBUG ON GKDW.OWB_ORDER_FACT TO DWHREAD;

