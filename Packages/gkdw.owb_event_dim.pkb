DROP PACKAGE BODY GKDW.OWB_EVENT_DIM;

CREATE OR REPLACE PACKAGE BODY GKDW."OWB_EVENT_DIM" AS

-- Define cursors here so that they have global scope within the package (for debugger)

---------------------------------------------------------------------------
--
-- "EVXEVENT_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "EVXEVENT_c" IS
  SELECT
  "EVXEVENT"."EVXEVENTID" "EVXEVENTID",
  "EVXEVENT"."DESCRIPTION" "DESCRIPTION",
  "EVXEVENT"."EVXCOURSEID" "EVXCOURSEID",
  "EVXEVENT"."EVXFACILITYID" "EVXFACILITYID",
  "EVXEVENT"."STARTDATE" "STARTDATE",
  TO_CHAR( "EVXEVENT"."STARTTIME", 'HH:MI:SS AM' )/* EXPR.OUTGRP1.STARTTIME */ "STARTTIME",
  "EVXEVENT"."ENDDATE" "ENDDATE",
  TO_CHAR( "EVXEVENT"."ENDTIME" , 'HH:MI:SS AM' )/* EXPR.OUTGRP1.ENDTIME */ "ENDTIME",
  "EVXEVENT"."EVENTSTATUS" "EVENTSTATUS",
  "EVXEVENT"."FACILITYNAME" "FACILITYNAME",
  "EVXEVENT"."FACILITYADDRESS1" "FACILITYADDRESS1",
  "EVXEVENT"."FACILITYADDRESS2" "FACILITYADDRESS2",
  "EVXEVENT"."FACILITYCITY" "FACILITYCITY",
  case upper(trim( "EVXEVENT"."FACILITYCOUNTRY"  ))
when 'CANADA' 
then null 
when 'CAN' 
then null 
else   upper(trim("EVXEVENT"."FACILITYSTATE"))
end/* EXPR.OUTGRP1.STATE */ "STATE",
  "EVXEVENT"."FACILITYPOSTAL" "FACILITYPOSTAL",
  case upper(trim( "EVXEVENT"."FACILITYCOUNTRY"  ))
when 'CANADA' 
then upper(trim("EVXEVENT"."FACILITYSTATE"))
when 'CAN' 
then upper(trim("EVXEVENT"."FACILITYSTATE"))
else   null
end/* EXPR.OUTGRP1.PROVINCE */ "PROVINCE",
  UPPER( TRIM( "EVXEVENT"."FACILITYCOUNTRY" ) )/* EXPR.OUTGRP1.COUNTRY */ "COUNTRY",
  "EVXEVENT"."CANCELDATE" "CANCELDATE",
  UPPER( "EVXEVENT"."OPPORTUNITYID" )/* EXPR.OUTGRP1.OPPORTUNITY_ID */ "OPPORTUNITY_ID",
  "EVXEVENT"."CREATEDATE" "CREATEDATE",
  "EVXEVENT"."MODIFYDATE" "MODIFYDATE",
  NVL("COURSE_DIM"."COURSE_CH", NULL) "COURSE_CH",
  NVL("COURSE_DIM"."COURSE_MOD", NULL) "COURSE_MOD",
  NVL("COURSE_DIM"."COURSE_PL", NULL) "COURSE_PL",
  NVL("COURSE_DIM"."ORACLE_ITEM_ID", NULL) "ORACLE_ITEM_ID",
  NVL("COURSE_DIM"."ORACLE_ITEM_NUM", NULL) "ORACLE_ITEM_NUM",
  "EVXEVENT"."COURSECODE" "COURSECODE",
  "EVXEVENT"."EVENTTYPE" "EVENTTYPE",
  "EVXEVENT"."CANCELREASON" "CANCELREASON",
  "EVXEVENT"."MAXENROLLMENT" "MAXENROLLMENT",
  "EVXEVENT"."FACILITYCODE" "FACILITYCODE",
  "EVXEVENT"."FACILITYREGIONMETRO" "FACILITYREGIONMETRO",
  "EVXEVENT"."MEETINGDESCRIPTION" "MEETINGDESCRIPTION",
  "QG_EVENT"."RESELLEREVENTID" "RESELLEREVENTID",
  "EVXEVENT"."CONFIRMEDENROLLMENT" "CONFIRMEDENROLLMENT",
  "EVXEVENT"."WAITENROLLMENT" "WAITENROLLMENT",
  "EVXEVENT"."ATTENDEDENROLLMENT" "ATTENDEDENROLLMENT",
  "EVXEVENT"."EVENTNAME" "EVENTNAME",
  UPPER( TRIM( "QG_EVENT"."EVENTCOUNTRY"  ) )/* EXPR.OUTGRP1.OPS_COUNTRY */ "OPS_COUNTRY",
  "QG_EVENT"."INTERNALFACILITY" "INTERNALFACILITY",
  "EVXEVENT"."SPOKENLANGUAGE" "SPOKENLANGUAGE",
  "QG_EVENT"."PLANTYPE" "PLANTYPE",
  "EVXEVENT"."CREATEUSER" "CREATEUSER",
  "EVXEVENT"."INSTOOLSTUDATTEND" "INSTOOLSTUDATTEND",
  "EVXEVENT"."MEETINGDAYS" "MEETINGDAYS",
  "QG_EVENT"."MANAGEDPROGRAMID" "MANAGEDPROGRAMID"
FROM
    "SLXDW"."EVXEVENT"  "EVXEVENT"   
 LEFT OUTER JOIN   "SLXDW"."QG_EVENT"  "QG_EVENT" ON ( ( ( "QG_EVENT"."EVXEVENTID" = "EVXEVENT"."EVXEVENTID" ) ) )
 LEFT OUTER JOIN   "COURSE_DIM"  "COURSE_DIM" ON ( ( ( "COURSE_DIM"."COUNTRY" = (UPPER( TRIM( "EVXEVENT"."FACILITYCOUNTRY" ) )/* EXPR.OUTGRP1.COUNTRY */) ) ) AND ( ( "COURSE_DIM"."COURSE_ID" = "EVXEVENT"."EVXCOURSEID" ) ) ); 

---------------------------------------------------------------------------
--
-- "EVXEVENT_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "EVXEVENT_c$1" IS
  SELECT
  "EVXEVENT"."EVXEVENTID" "EVXEVENTID",
  "EVXEVENT"."DESCRIPTION" "DESCRIPTION",
  "EVXEVENT"."EVXCOURSEID" "EVXCOURSEID",
  "EVXEVENT"."EVXFACILITYID" "EVXFACILITYID",
  "EVXEVENT"."STARTDATE" "STARTDATE",
  TO_CHAR( "EVXEVENT"."STARTTIME", 'HH:MI:SS AM' )/* EXPR.OUTGRP1.STARTTIME */ "STARTTIME",
  "EVXEVENT"."ENDDATE" "ENDDATE",
  TO_CHAR( "EVXEVENT"."ENDTIME" , 'HH:MI:SS AM' )/* EXPR.OUTGRP1.ENDTIME */ "ENDTIME",
  "EVXEVENT"."EVENTSTATUS" "EVENTSTATUS",
  "EVXEVENT"."FACILITYNAME" "FACILITYNAME",
  "EVXEVENT"."FACILITYADDRESS1" "FACILITYADDRESS1",
  "EVXEVENT"."FACILITYADDRESS2" "FACILITYADDRESS2",
  "EVXEVENT"."FACILITYCITY" "FACILITYCITY",
  case upper(trim( "EVXEVENT"."FACILITYCOUNTRY"  ))
when 'CANADA' 
then null 
when 'CAN' 
then null 
else   upper(trim("EVXEVENT"."FACILITYSTATE"))
end/* EXPR.OUTGRP1.STATE */ "STATE",
  "EVXEVENT"."FACILITYPOSTAL" "FACILITYPOSTAL",
  case upper(trim( "EVXEVENT"."FACILITYCOUNTRY"  ))
when 'CANADA' 
then upper(trim("EVXEVENT"."FACILITYSTATE"))
when 'CAN' 
then upper(trim("EVXEVENT"."FACILITYSTATE"))
else   null
end/* EXPR.OUTGRP1.PROVINCE */ "PROVINCE",
  UPPER( TRIM( "EVXEVENT"."FACILITYCOUNTRY" ) )/* EXPR.OUTGRP1.COUNTRY */ "COUNTRY",
  "EVXEVENT"."CANCELDATE" "CANCELDATE",
  UPPER( "EVXEVENT"."OPPORTUNITYID" )/* EXPR.OUTGRP1.OPPORTUNITY_ID */ "OPPORTUNITY_ID",
  "EVXEVENT"."CREATEDATE" "CREATEDATE",
  "EVXEVENT"."MODIFYDATE" "MODIFYDATE",
  NVL("COURSE_DIM"."COURSE_CH", NULL) "COURSE_CH",
  NVL("COURSE_DIM"."COURSE_MOD", NULL) "COURSE_MOD",
  NVL("COURSE_DIM"."COURSE_PL", NULL) "COURSE_PL",
  NVL("COURSE_DIM"."ORACLE_ITEM_ID", NULL) "ORACLE_ITEM_ID",
  NVL("COURSE_DIM"."ORACLE_ITEM_NUM", NULL) "ORACLE_ITEM_NUM",
  "EVXEVENT"."COURSECODE" "COURSECODE",
  "EVXEVENT"."EVENTTYPE" "EVENTTYPE",
  "EVXEVENT"."CANCELREASON" "CANCELREASON",
  "EVXEVENT"."MAXENROLLMENT" "MAXENROLLMENT",
  "EVXEVENT"."FACILITYCODE" "FACILITYCODE",
  "EVXEVENT"."FACILITYREGIONMETRO" "FACILITYREGIONMETRO",
  "EVXEVENT"."MEETINGDESCRIPTION" "MEETINGDESCRIPTION",
  "QG_EVENT"."RESELLEREVENTID" "RESELLEREVENTID",
  "EVXEVENT"."CONFIRMEDENROLLMENT" "CONFIRMEDENROLLMENT",
  "EVXEVENT"."WAITENROLLMENT" "WAITENROLLMENT",
  "EVXEVENT"."ATTENDEDENROLLMENT" "ATTENDEDENROLLMENT",
  "EVXEVENT"."EVENTNAME" "EVENTNAME",
  UPPER( TRIM( "QG_EVENT"."EVENTCOUNTRY"  ) )/* EXPR.OUTGRP1.OPS_COUNTRY */ "OPS_COUNTRY",
  "QG_EVENT"."INTERNALFACILITY" "INTERNALFACILITY",
  "EVXEVENT"."SPOKENLANGUAGE" "SPOKENLANGUAGE",
  "QG_EVENT"."PLANTYPE" "PLANTYPE",
  "EVXEVENT"."CREATEUSER" "CREATEUSER",
  "EVXEVENT"."INSTOOLSTUDATTEND" "INSTOOLSTUDATTEND",
  "EVXEVENT"."MEETINGDAYS" "MEETINGDAYS",
  "QG_EVENT"."MANAGEDPROGRAMID" "MANAGEDPROGRAMID"
FROM
    "SLXDW"."EVXEVENT"  "EVXEVENT"   
 LEFT OUTER JOIN   "SLXDW"."QG_EVENT"  "QG_EVENT" ON ( ( ( "QG_EVENT"."EVXEVENTID" = "EVXEVENT"."EVXEVENTID" ) ) )
 LEFT OUTER JOIN   "COURSE_DIM"  "COURSE_DIM" ON ( ( ( "COURSE_DIM"."COUNTRY" = (UPPER( TRIM( "EVXEVENT"."FACILITYCOUNTRY" ) )/* EXPR.OUTGRP1.COUNTRY */) ) ) AND ( ( "COURSE_DIM"."COURSE_ID" = "EVXEVENT"."EVXCOURSEID" ) ) ); 


a_table_to_analyze a_table_to_analyze_type;


PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
FUNCTION "GET_CONST_0_TABLE_NAME" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_0_TABLE_NAME";
END "GET_CONST_0_TABLE_NAME";
FUNCTION "GET_CONST_1_SOURCE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_1_SOURCE";
END "GET_CONST_1_SOURCE";
FUNCTION "GET_CONST_2_ENROLL_STATUS" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_2_ENROLL_STATUS";
END "GET_CONST_2_ENROLL_STATUS";





-- Procedure "EVXEVENT_p" is the entry point for map "EVXEVENT_p"

PROCEDURE "EVXEVENT_p"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"EVXEVENT_p"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19A3A35678E040007F01006C7D,A41FFB19A3A05678E040007F01006C7D,A41FFB19A30A5678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"EVENT_DIM_id" NUMBER(22) := 0;
"EVENT_DIM_ins" NUMBER(22) := 0;
"EVENT_DIM_upd" NUMBER(22) := 0;
"EVENT_DIM_del" NUMBER(22) := 0;
"EVENT_DIM_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"EVENT_DIM_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"EVENT_DIM_ir"  index_redirect_array;
"SV_EVENT_DIM_srk" NUMBER;
"EVENT_DIM_new"  BOOLEAN;
"EVENT_DIM_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"EVXEVENT_si" NUMBER(22) := 0;

"EVXEVENT_i" NUMBER(22) := 0;


"EVENT_DIM_si" NUMBER(22) := 0;

"EVENT_DIM_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_EVXEVENT_0_EVXEVENTID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_EVXEVENT" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_9_DESCRIPTION" IS TABLE OF VARCHAR2(3000) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_24_EVXCOURSEID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_28_EVXFACILITYID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_21_STARTDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_10_STARTTIME" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_10_ENDDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_14_ENDTIME" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_2_EVENTSTATUS" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_15_FACILITYNAME" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_40_FACILITYADDRESS1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_41_FACILITYADDRESS2" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_13_FACILITYCITY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_8_STATE" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_43_FACILITYPOSTAL" IS TABLE OF VARCHAR2(24) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_9_PROVINCE" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_11_COUNTRY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_1_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_2_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_3_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_65_CANCELDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_15_OPPORTUNITY_ID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_68_CREATEDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_70_MODIFYDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_4_COURSE_CH" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_5_COURSE_MOD" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_6_COURSE_PL" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_8_ORACLE_ITEM_ID" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_9_ORACLE_ITEM_NUM" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_6_COURSECODE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_3_EVENTTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_66_CANCELREASON" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_18_MAXENROLLMENT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_46_FACILITYCODE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_71_FACILITY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_72_MEETINGDESCRIPTI" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_12_RESELLEREVENTID" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_51_CONFIRME" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_23_WAITENROLLMENT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_49_ATTENDEDENROLLME" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_GET_ENRO_2_ENROLL_C" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_1_EVENTNAME" IS TABLE OF VARCHAR2(128) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_13_OPS_COUNTRY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_14_INTERNALFACILITY" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_27_SPOKENLANGUAGE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_15_PLANTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_67_CREATEUSER" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_73_INSTOOLSTUDATTE" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_19_MEETINGDAYS" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_16_MANAGEDPROGRAMID" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_0_EVENT_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_1_EVENT_DESC" IS TABLE OF VARCHAR2(3000) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_2_COURSE_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_3_LOCATION_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_5_START_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_6_START_TIME" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_7_END_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_8_END_TIME" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_9_STATUS" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_11_LOCATION_NAME" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_12_ADDRESS1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_13_ADDRESS2" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_15_CITY" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_16_STATE" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_17_ZIPCODE" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_18_PROVINCE" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_19_COUNTRY" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_21_INSTRUCTOR1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_22_INSTRUCTOR2" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_23_INSTRUCTOR3" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_24_CANCEL_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_26_OPPORTUNITY_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_28_CREATION_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_29_LAST_UPDATE_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_34_GKDW_SOURCE" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_36_EVENT_CHANNEL" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_37_EVENT_MODALITY" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_38_EVENT_PROD_LINE" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_39_ORACLE_ITEM_ID" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_40_ORACLE_ITEM_NUM" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_41_COURSE_CODE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_42_EVENT_TYPE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_43_CANCEL_REASON" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_44_CAPACITY" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_45_FACILITY_CODE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_46_FACILITY" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_47_MEETING_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_48_RESELLER_EVENT_" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_49_CONF_ENROLLMEN" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_50_WAIT_ENROLLMEN" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_51_ATTEND_E" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_52_DID_NOT_" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_53_EVENT_NAME" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_54_OPS_COUNTRY" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_55_INTERNALFACILI" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_56_SPOKEN_LANGUAGE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_58_PLAN_TYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_59_CREATE_USER" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_60_ONSITE_ATTENDED" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_61_MEETING_DAYS" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_62_MANAGED_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_EVXEVENT_0_EVXEVENTID"  CHAR(12);
"SV_ROWKEY_EVXEVENT"  VARCHAR2(18);
"SV_EVXEVENT_9_DESCRIPTION"  VARCHAR2(3000);
"SV_EVXEVENT_24_EVXCOURSEID"  CHAR(12);
"SV_EVXEVENT_28_EVXFACILITYID"  CHAR(12);
"SV_EVXEVENT_21_STARTDATE"  DATE;
"SV_EXPR_10_STARTTIME"  VARCHAR2(20);
"SV_EVXEVENT_10_ENDDATE"  DATE;
"SV_EXPR_14_ENDTIME"  VARCHAR2(20);
"SV_EVXEVENT_2_EVENTSTATUS"  VARCHAR2(32);
"SV_EVXEVENT_15_FACILITYNAME"  VARCHAR2(64);
"SV_EVXEVENT_40_FACILITYADDRES"  VARCHAR2(64);
"SV_EVXEVENT_41_FACILITYADDRES"  VARCHAR2(64);
"SV_EVXEVENT_13_FACILITYCITY"  VARCHAR2(32);
"SV_EXPR_8_STATE"  VARCHAR2(60);
"SV_EVXEVENT_43_FACILITYPOSTAL"  VARCHAR2(24);
"SV_EXPR_9_PROVINCE"  VARCHAR2(100);
"SV_EXPR_11_COUNTRY"  VARCHAR2(32);
"SV_GET_QG_I_1_INSTR_ID"  VARCHAR2(32767);
"SV_GET_QG_I_2_INSTR_ID"  VARCHAR2(32767);
"SV_GET_QG_I_3_INSTR_ID"  VARCHAR2(32767);
"SV_EVXEVENT_65_CANCELDATE"  DATE;
"SV_EXPR_15_OPPORTUNITY_ID"  CHAR(12);
"SV_EVXEVENT_68_CREATEDATE"  DATE;
"SV_EVXEVENT_70_MODIFYDATE"  DATE;
"SV_COURSE_DIM_4_COURSE_CH"  VARCHAR2(50);
"SV_COURSE_DIM_5_COURSE_MOD"  VARCHAR2(50);
"SV_COURSE_DIM_6_COURSE_PL"  VARCHAR2(50);
"SV_COURSE_DIM_8_ORACLE_ITEM_ID"  NUMBER;
"SV_COURSE_DIM_9_ORACLE_ITEM_N"  VARCHAR2(50);
"SV_EVXEVENT_6_COURSECODE"  VARCHAR2(32);
"SV_EVXEVENT_3_EVENTTYPE"  VARCHAR2(32);
"SV_EVXEVENT_66_CANCELREASON"  VARCHAR2(32);
"SV_EVXEVENT_18_MAXENROLLMENT"  NUMBER;
"SV_EVXEVENT_46_FACILITYCODE"  VARCHAR2(32);
"SV_EVXEVENT_71_FACILITY"  VARCHAR2(32);
"SV_EVXEVENT_72_MEETINGDESCRIP"  VARCHAR2(32);
"SV_QG_EVENT_12_RESELLEREVENTID"  VARCHAR2(64);
"SV_EVXEVENT_51_CONFIRME"  NUMBER;
"SV_EVXEVENT_23_WAITENROLLMENT"  NUMBER;
"SV_EVXEVENT_49_ATTENDEDENROLL"  NUMBER;
"SV_GET_ENRO_2_ENROLL_C"  NUMBER;
"SV_EVXEVENT_1_EVENTNAME"  VARCHAR2(128);
"SV_EXPR_13_OPS_COUNTRY"  VARCHAR2(32);
"SV_QG_EVENT_14_INTERNALFACILI"  CHAR(1);
"SV_EVXEVENT_27_SPOKENLANGUAGE"  VARCHAR2(32);
"SV_QG_EVENT_15_PLANTYPE"  VARCHAR2(32);
"SV_EVXEVENT_67_CREATEUSER"  CHAR(12);
"SV_EVXEVENT_73_INSTOOLSTUDATTE"  NUMBER;
"SV_EVXEVENT_19_MEETINGDAYS"  NUMBER;
"SV_QG_EVENT_16_MANAGEDPROGRAM"  VARCHAR2(32);
"SV_EVENT_DIM_0_EVENT_ID"  VARCHAR2(50);
"SV_EVENT_DIM_1_EVENT_DESC"  VARCHAR2(3000);
"SV_EVENT_DIM_2_COURSE_ID"  VARCHAR2(50);
"SV_EVENT_DIM_3_LOCATION_ID"  VARCHAR2(50);
"SV_EVENT_DIM_5_START_DATE"  DATE;
"SV_EVENT_DIM_6_START_TIME"  VARCHAR2(20);
"SV_EVENT_DIM_7_END_DATE"  DATE;
"SV_EVENT_DIM_8_END_TIME"  VARCHAR2(20);
"SV_EVENT_DIM_9_STATUS"  VARCHAR2(50);
"SV_EVENT_DIM_11_LOCATION_NAME"  VARCHAR2(250);
"SV_EVENT_DIM_12_ADDRESS1"  VARCHAR2(250);
"SV_EVENT_DIM_13_ADDRESS2"  VARCHAR2(250);
"SV_EVENT_DIM_15_CITY"  VARCHAR2(250);
"SV_EVENT_DIM_16_STATE"  VARCHAR2(60);
"SV_EVENT_DIM_17_ZIPCODE"  VARCHAR2(60);
"SV_EVENT_DIM_18_PROVINCE"  VARCHAR2(100);
"SV_EVENT_DIM_19_COUNTRY"  VARCHAR2(60);
"SV_EVENT_DIM_21_INSTRUCTOR1"  VARCHAR2(250);
"SV_EVENT_DIM_22_INSTRUCTOR2"  VARCHAR2(250);
"SV_EVENT_DIM_23_INSTRUCTOR3"  VARCHAR2(250);
"SV_EVENT_DIM_24_CANCEL_DATE"  DATE;
"SV_EVENT_DIM_26_OPPORTUNITY_ID"  VARCHAR2(50);
"SV_EVENT_DIM_28_CREATION_DATE"  DATE;
"SV_EVENT_DIM_29_LAST_UPDATE_DA"  DATE;
"SV_EVENT_DIM_34_GKDW_SOURCE"  VARCHAR2(20);
"SV_EVENT_DIM_36_EVENT_CHANNEL"  VARCHAR2(100);
"SV_EVENT_DIM_37_EVENT_MODALITY"  VARCHAR2(100);
"SV_EVENT_DIM_38_EVENT_PROD_LI"  VARCHAR2(100);
"SV_EVENT_DIM_39_ORACLE_ITEM_ID"  NUMBER;
"SV_EVENT_DIM_40_ORACLE_ITEM_N"  VARCHAR2(100);
"SV_EVENT_DIM_41_COURSE_CODE"  VARCHAR2(50);
"SV_EVENT_DIM_42_EVENT_TYPE"  VARCHAR2(50);
"SV_EVENT_DIM_43_CANCEL_REASON"  VARCHAR2(50);
"SV_EVENT_DIM_44_CAPACITY"  NUMBER;
"SV_EVENT_DIM_45_FACILITY_CODE"  VARCHAR2(50);
"SV_EVENT_DI_46_FACILITY"  VARCHAR2(50);
"SV_EVENT_DI_47_MEETING_"  VARCHAR2(50);
"SV_EVENT_DIM_48_RESELLER_EVEN"  VARCHAR2(100);
"SV_EVENT_DIM_49_CONF_ENROLLMEN"  NUMBER;
"SV_EVENT_DIM_50_WAIT_ENROLLMEN"  NUMBER;
"SV_EVENT_DI_51_ATTEND_E"  NUMBER;
"SV_EVENT_DI_52_DID_NOT_"  NUMBER;
"SV_EVENT_DIM_53_EVENT_NAME"  VARCHAR2(255);
"SV_EVENT_DIM_54_OPS_COUNTRY"  VARCHAR2(100);
"SV_EVENT_DIM_55_INTERNALFACILI"  CHAR(1);
"SV_EVENT_DIM_56_SPOKEN_LANGUA"  VARCHAR2(50);
"SV_EVENT_DIM_58_PLAN_TYPE"  VARCHAR2(32);
"SV_EVENT_DIM_59_CREATE_USER"  VARCHAR2(20);
"SV_EVENT_DIM_60_ONSITE_ATTEND"  NUMBER;
"SV_EVENT_DIM_61_MEETING_DAYS"  NUMBER;
"SV_EVENT_DI_62_MANAGED_"  VARCHAR2(50);

-- Bulk: intermediate collection variables
"EVXEVENT_0_EVXEVENTID" "T_EVXEVENT_0_EVXEVENTID";
"ROWKEY_EVXEVENT" "T_ROWKEY_EVXEVENT";
"EVXEVENT_9_DESCRIPTION" "T_EVXEVENT_9_DESCRIPTION";
"EVXEVENT_24_EVXCOURSEID" "T_EVXEVENT_24_EVXCOURSEID";
"EVXEVENT_28_EVXFACILITYID" "T_EVXEVENT_28_EVXFACILITYID";
"EVXEVENT_21_STARTDATE" "T_EVXEVENT_21_STARTDATE";
"EXPR_10_STARTTIME" "T_EXPR_10_STARTTIME";
"EVXEVENT_10_ENDDATE" "T_EVXEVENT_10_ENDDATE";
"EXPR_14_ENDTIME" "T_EXPR_14_ENDTIME";
"EVXEVENT_2_EVENTSTATUS" "T_EVXEVENT_2_EVENTSTATUS";
"EVXEVENT_15_FACILITYNAME" "T_EVXEVENT_15_FACILITYNAME";
"EVXEVENT_40_FACILITYADDRESS1" "T_EVXEVENT_40_FACILITYADDRESS1";
"EVXEVENT_41_FACILITYADDRESS2" "T_EVXEVENT_41_FACILITYADDRESS2";
"EVXEVENT_13_FACILITYCITY" "T_EVXEVENT_13_FACILITYCITY";
"EXPR_8_STATE" "T_EXPR_8_STATE";
"EVXEVENT_43_FACILITYPOSTAL" "T_EVXEVENT_43_FACILITYPOSTAL";
"EXPR_9_PROVINCE" "T_EXPR_9_PROVINCE";
"EXPR_11_COUNTRY" "T_EXPR_11_COUNTRY";
"GET_QG_I_1_INSTR_ID" "T_GET_QG_I_1_INSTR_ID";
"GET_QG_I_2_INSTR_ID" "T_GET_QG_I_2_INSTR_ID";
"GET_QG_I_3_INSTR_ID" "T_GET_QG_I_3_INSTR_ID";
"EVXEVENT_65_CANCELDATE" "T_EVXEVENT_65_CANCELDATE";
"EXPR_15_OPPORTUNITY_ID" "T_EXPR_15_OPPORTUNITY_ID";
"EVXEVENT_68_CREATEDATE" "T_EVXEVENT_68_CREATEDATE";
"EVXEVENT_70_MODIFYDATE" "T_EVXEVENT_70_MODIFYDATE";
"COURSE_DIM_4_COURSE_CH" "T_COURSE_DIM_4_COURSE_CH";
"COURSE_DIM_5_COURSE_MOD" "T_COURSE_DIM_5_COURSE_MOD";
"COURSE_DIM_6_COURSE_PL" "T_COURSE_DIM_6_COURSE_PL";
"COURSE_DIM_8_ORACLE_ITEM_ID" "T_COURSE_DIM_8_ORACLE_ITEM_ID";
"COURSE_DIM_9_ORACLE_ITEM_NUM" "T_COURSE_DIM_9_ORACLE_ITEM_NUM";
"EVXEVENT_6_COURSECODE" "T_EVXEVENT_6_COURSECODE";
"EVXEVENT_3_EVENTTYPE" "T_EVXEVENT_3_EVENTTYPE";
"EVXEVENT_66_CANCELREASON" "T_EVXEVENT_66_CANCELREASON";
"EVXEVENT_18_MAXENROLLMENT" "T_EVXEVENT_18_MAXENROLLMENT";
"EVXEVENT_46_FACILITYCODE" "T_EVXEVENT_46_FACILITYCODE";
"EVXEVENT_71_FACILITY" "T_EVXEVENT_71_FACILITY";
"EVXEVENT_72_MEETINGDESCRIPTION" "T_EVXEVENT_72_MEETINGDESCRIPTI";
"QG_EVENT_12_RESELLEREVENTID" "T_QG_EVENT_12_RESELLEREVENTID";
"EVXEVENT_51_CONFIRME" "T_EVXEVENT_51_CONFIRME";
"EVXEVENT_23_WAITENROLLMENT" "T_EVXEVENT_23_WAITENROLLMENT";
"EVXEVENT_49_ATTENDEDENROLLMENT" "T_EVXEVENT_49_ATTENDEDENROLLME";
"GET_ENRO_2_ENROLL_C" "T_GET_ENRO_2_ENROLL_C";
"EVXEVENT_1_EVENTNAME" "T_EVXEVENT_1_EVENTNAME";
"EXPR_13_OPS_COUNTRY" "T_EXPR_13_OPS_COUNTRY";
"QG_EVENT_14_INTERNALFACILITY" "T_QG_EVENT_14_INTERNALFACILITY";
"EVXEVENT_27_SPOKENLANGUAGE" "T_EVXEVENT_27_SPOKENLANGUAGE";
"QG_EVENT_15_PLANTYPE" "T_QG_EVENT_15_PLANTYPE";
"EVXEVENT_67_CREATEUSER" "T_EVXEVENT_67_CREATEUSER";
"EVXEVENT_73_INSTOOLSTUDATTEND" "T_EVXEVENT_73_INSTOOLSTUDATTE";
"EVXEVENT_19_MEETINGDAYS" "T_EVXEVENT_19_MEETINGDAYS";
"QG_EVENT_16_MANAGEDPROGRAMID" "T_QG_EVENT_16_MANAGEDPROGRAMID";
"EVENT_DIM_0_EVENT_ID" "T_EVENT_DIM_0_EVENT_ID";
"EVENT_DIM_1_EVENT_DESC" "T_EVENT_DIM_1_EVENT_DESC";
"EVENT_DIM_2_COURSE_ID" "T_EVENT_DIM_2_COURSE_ID";
"EVENT_DIM_3_LOCATION_ID" "T_EVENT_DIM_3_LOCATION_ID";
"EVENT_DIM_5_START_DATE" "T_EVENT_DIM_5_START_DATE";
"EVENT_DIM_6_START_TIME" "T_EVENT_DIM_6_START_TIME";
"EVENT_DIM_7_END_DATE" "T_EVENT_DIM_7_END_DATE";
"EVENT_DIM_8_END_TIME" "T_EVENT_DIM_8_END_TIME";
"EVENT_DIM_9_STATUS" "T_EVENT_DIM_9_STATUS";
"EVENT_DIM_11_LOCATION_NAME" "T_EVENT_DIM_11_LOCATION_NAME";
"EVENT_DIM_12_ADDRESS1" "T_EVENT_DIM_12_ADDRESS1";
"EVENT_DIM_13_ADDRESS2" "T_EVENT_DIM_13_ADDRESS2";
"EVENT_DIM_15_CITY" "T_EVENT_DIM_15_CITY";
"EVENT_DIM_16_STATE" "T_EVENT_DIM_16_STATE";
"EVENT_DIM_17_ZIPCODE" "T_EVENT_DIM_17_ZIPCODE";
"EVENT_DIM_18_PROVINCE" "T_EVENT_DIM_18_PROVINCE";
"EVENT_DIM_19_COUNTRY" "T_EVENT_DIM_19_COUNTRY";
"EVENT_DIM_21_INSTRUCTOR1" "T_EVENT_DIM_21_INSTRUCTOR1";
"EVENT_DIM_22_INSTRUCTOR2" "T_EVENT_DIM_22_INSTRUCTOR2";
"EVENT_DIM_23_INSTRUCTOR3" "T_EVENT_DIM_23_INSTRUCTOR3";
"EVENT_DIM_24_CANCEL_DATE" "T_EVENT_DIM_24_CANCEL_DATE";
"EVENT_DIM_26_OPPORTUNITY_ID" "T_EVENT_DIM_26_OPPORTUNITY_ID";
"EVENT_DIM_28_CREATION_DATE" "T_EVENT_DIM_28_CREATION_DATE";
"EVENT_DIM_29_LAST_UPDATE_DATE" "T_EVENT_DIM_29_LAST_UPDATE_DA";
"EVENT_DIM_34_GKDW_SOURCE" "T_EVENT_DIM_34_GKDW_SOURCE";
"EVENT_DIM_36_EVENT_CHANNEL" "T_EVENT_DIM_36_EVENT_CHANNEL";
"EVENT_DIM_37_EVENT_MODALITY" "T_EVENT_DIM_37_EVENT_MODALITY";
"EVENT_DIM_38_EVENT_PROD_LINE" "T_EVENT_DIM_38_EVENT_PROD_LINE";
"EVENT_DIM_39_ORACLE_ITEM_ID" "T_EVENT_DIM_39_ORACLE_ITEM_ID";
"EVENT_DIM_40_ORACLE_ITEM_NUM" "T_EVENT_DIM_40_ORACLE_ITEM_NUM";
"EVENT_DIM_41_COURSE_CODE" "T_EVENT_DIM_41_COURSE_CODE";
"EVENT_DIM_42_EVENT_TYPE" "T_EVENT_DIM_42_EVENT_TYPE";
"EVENT_DIM_43_CANCEL_REASON" "T_EVENT_DIM_43_CANCEL_REASON";
"EVENT_DIM_44_CAPACITY" "T_EVENT_DIM_44_CAPACITY";
"EVENT_DIM_45_FACILITY_CODE" "T_EVENT_DIM_45_FACILITY_CODE";
"EVENT_DI_46_FACILITY" "T_EVENT_DI_46_FACILITY";
"EVENT_DI_47_MEETING_" "T_EVENT_DI_47_MEETING_";
"EVENT_DIM_48_RESELLER_EVENT_ID" "T_EVENT_DIM_48_RESELLER_EVENT_";
"EVENT_DIM_49_CONF_ENROLLMENTS" "T_EVENT_DIM_49_CONF_ENROLLMEN";
"EVENT_DIM_50_WAIT_ENROLLMENTS" "T_EVENT_DIM_50_WAIT_ENROLLMEN";
"EVENT_DI_51_ATTEND_E" "T_EVENT_DI_51_ATTEND_E";
"EVENT_DI_52_DID_NOT_" "T_EVENT_DI_52_DID_NOT_";
"EVENT_DIM_53_EVENT_NAME" "T_EVENT_DIM_53_EVENT_NAME";
"EVENT_DIM_54_OPS_COUNTRY" "T_EVENT_DIM_54_OPS_COUNTRY";
"EVENT_DIM_55_INTERNALFACILITY" "T_EVENT_DIM_55_INTERNALFACILI";
"EVENT_DIM_56_SPOKEN_LANGUAGE" "T_EVENT_DIM_56_SPOKEN_LANGUAGE";
"EVENT_DIM_58_PLAN_TYPE" "T_EVENT_DIM_58_PLAN_TYPE";
"EVENT_DIM_59_CREATE_USER" "T_EVENT_DIM_59_CREATE_USER";
"EVENT_DIM_60_ONSITE_ATTENDED" "T_EVENT_DIM_60_ONSITE_ATTENDED";
"EVENT_DIM_61_MEETING_DAYS" "T_EVENT_DIM_61_MEETING_DAYS";
"EVENT_DI_62_MANAGED_" "T_EVENT_DI_62_MANAGED_";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_ES"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_0_EVXEVENTID',0,80),
    p_value=>SUBSTRB("EVXEVENT_0_EVXEVENTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_9_DESCRIPTION',0,80),
    p_value=>SUBSTRB("EVXEVENT_9_DESCRIPTION"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_24_EVXCOURSEID',0,80),
    p_value=>SUBSTRB("EVXEVENT_24_EVXCOURSEID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_28_EVXFACILITYID',0,80),
    p_value=>SUBSTRB("EVXEVENT_28_EVXFACILITYID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_21_STARTDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_21_STARTDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_10_STARTTIME',0,80),
    p_value=>SUBSTRB("EXPR_10_STARTTIME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_10_ENDDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_10_ENDDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_14_ENDTIME',0,80),
    p_value=>SUBSTRB("EXPR_14_ENDTIME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_2_EVENTSTATUS',0,80),
    p_value=>SUBSTRB("EVXEVENT_2_EVENTSTATUS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_15_FACILITYNAME',0,80),
    p_value=>SUBSTRB("EVXEVENT_15_FACILITYNAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_40_FACILITYADDRESS1',0,80),
    p_value=>SUBSTRB("EVXEVENT_40_FACILITYADDRESS1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_41_FACILITYADDRESS2',0,80),
    p_value=>SUBSTRB("EVXEVENT_41_FACILITYADDRESS2"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_13_FACILITYCITY',0,80),
    p_value=>SUBSTRB("EVXEVENT_13_FACILITYCITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_8_STATE',0,80),
    p_value=>SUBSTRB("EXPR_8_STATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_43_FACILITYPOSTAL',0,80),
    p_value=>SUBSTRB("EVXEVENT_43_FACILITYPOSTAL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_9_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_9_PROVINCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_11_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_11_COUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_65_CANCELDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_65_CANCELDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_15_OPPORTUNITY_ID',0,80),
    p_value=>SUBSTRB("EXPR_15_OPPORTUNITY_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_68_CREATEDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_68_CREATEDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_70_MODIFYDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_70_MODIFYDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_4_COURSE_CH',0,80),
    p_value=>SUBSTRB("COURSE_DIM_4_COURSE_CH"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_5_COURSE_MOD',0,80),
    p_value=>SUBSTRB("COURSE_DIM_5_COURSE_MOD"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_6_COURSE_PL',0,80),
    p_value=>SUBSTRB("COURSE_DIM_6_COURSE_PL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_8_ORACLE_ITEM_ID',0,80),
    p_value=>SUBSTRB("COURSE_DIM_8_ORACLE_ITEM_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_9_ORACLE_ITEM_NUM',0,80),
    p_value=>SUBSTRB("COURSE_DIM_9_ORACLE_ITEM_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_6_COURSECODE',0,80),
    p_value=>SUBSTRB("EVXEVENT_6_COURSECODE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_3_EVENTTYPE',0,80),
    p_value=>SUBSTRB("EVXEVENT_3_EVENTTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_66_CANCELREASON',0,80),
    p_value=>SUBSTRB("EVXEVENT_66_CANCELREASON"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_18_MAXENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_18_MAXENROLLMENT"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_46_FACILITYCODE',0,80),
    p_value=>SUBSTRB("EVXEVENT_46_FACILITYCODE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_71_FACILITY',0,80),
    p_value=>SUBSTRB("EVXEVENT_71_FACILITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_72_MEETINGDESCRIPTION',0,80),
    p_value=>SUBSTRB("EVXEVENT_72_MEETINGDESCRIPTION"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_12_RESELLEREVENTID',0,80),
    p_value=>SUBSTRB("QG_EVENT_12_RESELLEREVENTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_51_CONFIRME',0,80),
    p_value=>SUBSTRB("EVXEVENT_51_CONFIRME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_23_WAITENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_23_WAITENROLLMENT"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_49_ATTENDEDENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_49_ATTENDEDENROLLMENT"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_1_EVENTNAME',0,80),
    p_value=>SUBSTRB("EVXEVENT_1_EVENTNAME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_13_OPS_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_13_OPS_COUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_14_INTERNALFACILITY',0,80),
    p_value=>SUBSTRB("QG_EVENT_14_INTERNALFACILITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_27_SPOKENLANGUAGE',0,80),
    p_value=>SUBSTRB("EVXEVENT_27_SPOKENLANGUAGE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_15_PLANTYPE',0,80),
    p_value=>SUBSTRB("QG_EVENT_15_PLANTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_67_CREATEUSER',0,80),
    p_value=>SUBSTRB("EVXEVENT_67_CREATEUSER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_73_INSTOOLSTUDATTEND',0,80),
    p_value=>SUBSTRB("EVXEVENT_73_INSTOOLSTUDATTEND"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_19_MEETINGDAYS',0,80),
    p_value=>SUBSTRB("EVXEVENT_19_MEETINGDAYS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_16_MANAGEDPROGRAMID',0,80),
    p_value=>SUBSTRB("QG_EVENT_16_MANAGEDPROGRAMID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "EVXEVENT_ES";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 112: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "EVXEVENT_ES"(p_error_index);
  END IF;
END "EVXEVENT_ER";



---------------------------------------------------------------------------
-- Procedure "EVXEVENT_SU" opens and initializes data source
-- for map "EVXEVENT_p"
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "EVXEVENT_c"%ISOPEN) THEN
    OPEN "EVXEVENT_c";
  END IF;
  get_read_success := TRUE;
END "EVXEVENT_SU";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_RD" fetches a bulk of rows from
--   the data source for map "EVXEVENT_p"
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "EVXEVENT_0_EVXEVENTID".DELETE;
    "EVXEVENT_9_DESCRIPTION".DELETE;
    "EVXEVENT_24_EVXCOURSEID".DELETE;
    "EVXEVENT_28_EVXFACILITYID".DELETE;
    "EVXEVENT_21_STARTDATE".DELETE;
    "EXPR_10_STARTTIME".DELETE;
    "EVXEVENT_10_ENDDATE".DELETE;
    "EXPR_14_ENDTIME".DELETE;
    "EVXEVENT_2_EVENTSTATUS".DELETE;
    "EVXEVENT_15_FACILITYNAME".DELETE;
    "EVXEVENT_40_FACILITYADDRESS1".DELETE;
    "EVXEVENT_41_FACILITYADDRESS2".DELETE;
    "EVXEVENT_13_FACILITYCITY".DELETE;
    "EXPR_8_STATE".DELETE;
    "EVXEVENT_43_FACILITYPOSTAL".DELETE;
    "EXPR_9_PROVINCE".DELETE;
    "EXPR_11_COUNTRY".DELETE;
    "EVXEVENT_65_CANCELDATE".DELETE;
    "EXPR_15_OPPORTUNITY_ID".DELETE;
    "EVXEVENT_68_CREATEDATE".DELETE;
    "EVXEVENT_70_MODIFYDATE".DELETE;
    "COURSE_DIM_4_COURSE_CH".DELETE;
    "COURSE_DIM_5_COURSE_MOD".DELETE;
    "COURSE_DIM_6_COURSE_PL".DELETE;
    "COURSE_DIM_8_ORACLE_ITEM_ID".DELETE;
    "COURSE_DIM_9_ORACLE_ITEM_NUM".DELETE;
    "EVXEVENT_6_COURSECODE".DELETE;
    "EVXEVENT_3_EVENTTYPE".DELETE;
    "EVXEVENT_66_CANCELREASON".DELETE;
    "EVXEVENT_18_MAXENROLLMENT".DELETE;
    "EVXEVENT_46_FACILITYCODE".DELETE;
    "EVXEVENT_71_FACILITY".DELETE;
    "EVXEVENT_72_MEETINGDESCRIPTION".DELETE;
    "QG_EVENT_12_RESELLEREVENTID".DELETE;
    "EVXEVENT_51_CONFIRME".DELETE;
    "EVXEVENT_23_WAITENROLLMENT".DELETE;
    "EVXEVENT_49_ATTENDEDENROLLMENT".DELETE;
    "EVXEVENT_1_EVENTNAME".DELETE;
    "EXPR_13_OPS_COUNTRY".DELETE;
    "QG_EVENT_14_INTERNALFACILITY".DELETE;
    "EVXEVENT_27_SPOKENLANGUAGE".DELETE;
    "QG_EVENT_15_PLANTYPE".DELETE;
    "EVXEVENT_67_CREATEUSER".DELETE;
    "EVXEVENT_73_INSTOOLSTUDATTEND".DELETE;
    "EVXEVENT_19_MEETINGDAYS".DELETE;
    "QG_EVENT_16_MANAGEDPROGRAMID".DELETE;

    FETCH
      "EVXEVENT_c"
    BULK COLLECT INTO
      "EVXEVENT_0_EVXEVENTID",
      "EVXEVENT_9_DESCRIPTION",
      "EVXEVENT_24_EVXCOURSEID",
      "EVXEVENT_28_EVXFACILITYID",
      "EVXEVENT_21_STARTDATE",
      "EXPR_10_STARTTIME",
      "EVXEVENT_10_ENDDATE",
      "EXPR_14_ENDTIME",
      "EVXEVENT_2_EVENTSTATUS",
      "EVXEVENT_15_FACILITYNAME",
      "EVXEVENT_40_FACILITYADDRESS1",
      "EVXEVENT_41_FACILITYADDRESS2",
      "EVXEVENT_13_FACILITYCITY",
      "EXPR_8_STATE",
      "EVXEVENT_43_FACILITYPOSTAL",
      "EXPR_9_PROVINCE",
      "EXPR_11_COUNTRY",
      "EVXEVENT_65_CANCELDATE",
      "EXPR_15_OPPORTUNITY_ID",
      "EVXEVENT_68_CREATEDATE",
      "EVXEVENT_70_MODIFYDATE",
      "COURSE_DIM_4_COURSE_CH",
      "COURSE_DIM_5_COURSE_MOD",
      "COURSE_DIM_6_COURSE_PL",
      "COURSE_DIM_8_ORACLE_ITEM_ID",
      "COURSE_DIM_9_ORACLE_ITEM_NUM",
      "EVXEVENT_6_COURSECODE",
      "EVXEVENT_3_EVENTTYPE",
      "EVXEVENT_66_CANCELREASON",
      "EVXEVENT_18_MAXENROLLMENT",
      "EVXEVENT_46_FACILITYCODE",
      "EVXEVENT_71_FACILITY",
      "EVXEVENT_72_MEETINGDESCRIPTION",
      "QG_EVENT_12_RESELLEREVENTID",
      "EVXEVENT_51_CONFIRME",
      "EVXEVENT_23_WAITENROLLMENT",
      "EVXEVENT_49_ATTENDEDENROLLMENT",
      "EVXEVENT_1_EVENTNAME",
      "EXPR_13_OPS_COUNTRY",
      "QG_EVENT_14_INTERNALFACILITY",
      "EVXEVENT_27_SPOKENLANGUAGE",
      "QG_EVENT_15_PLANTYPE",
      "EVXEVENT_67_CREATEUSER",
      "EVXEVENT_73_INSTOOLSTUDATTEND",
      "EVXEVENT_19_MEETINGDAYS",
      "QG_EVENT_16_MANAGEDPROGRAMID"
    LIMIT get_bulk_size;

    IF "EVXEVENT_c"%NOTFOUND AND "EVXEVENT_0_EVXEVENTID".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "EVXEVENT_0_EVXEVENTID".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "EVXEVENT_0_EVXEVENTID".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 113: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "EVXEVENT_RD";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_DML"(si NUMBER, firstround BOOLEAN) IS
  "EVENT_DIM_ins0" NUMBER := "EVENT_DIM_ins";
  "EVENT_DIM_upd0" NUMBER := "EVENT_DIM_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "EVENT_DIM_St" THEN
  -- Update/Insert DML for "EVENT_DIM"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"EVENT_DIM"';
    get_audit_detail_id := "EVENT_DIM_id";
    "EVENT_DIM_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "EVENT_DIM_i" > get_bulk_size 
   OR "EVXEVENT_c"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "EVENT_DIM_si".."EVENT_DIM_i" - 1 
            UPDATE
              "EVENT_DIM"
            SET
  
  						"EVENT_DIM"."EVENT_DESC" = "EVENT_DIM_1_EVENT_DESC"
  (i),						"EVENT_DIM"."COURSE_ID" = "EVENT_DIM_2_COURSE_ID"
  (i),						"EVENT_DIM"."LOCATION_ID" = "EVENT_DIM_3_LOCATION_ID"
  (i),						"EVENT_DIM"."START_DATE" = "EVENT_DIM_5_START_DATE"
  (i),						"EVENT_DIM"."START_TIME" = "EVENT_DIM_6_START_TIME"
  (i),						"EVENT_DIM"."END_DATE" = "EVENT_DIM_7_END_DATE"
  (i),						"EVENT_DIM"."END_TIME" = "EVENT_DIM_8_END_TIME"
  (i),						"EVENT_DIM"."STATUS" = "EVENT_DIM_9_STATUS"
  (i),						"EVENT_DIM"."LOCATION_NAME" = "EVENT_DIM_11_LOCATION_NAME"
  (i),						"EVENT_DIM"."ADDRESS1" = "EVENT_DIM_12_ADDRESS1"
  (i),						"EVENT_DIM"."ADDRESS2" = "EVENT_DIM_13_ADDRESS2"
  (i),						"EVENT_DIM"."CITY" = "EVENT_DIM_15_CITY"
  (i),						"EVENT_DIM"."STATE" = "EVENT_DIM_16_STATE"
  (i),						"EVENT_DIM"."ZIPCODE" = "EVENT_DIM_17_ZIPCODE"
  (i),						"EVENT_DIM"."PROVINCE" = "EVENT_DIM_18_PROVINCE"
  (i),						"EVENT_DIM"."COUNTRY" = "EVENT_DIM_19_COUNTRY"
  (i),						"EVENT_DIM"."INSTRUCTOR1" = "EVENT_DIM_21_INSTRUCTOR1"
  (i),						"EVENT_DIM"."INSTRUCTOR2" = "EVENT_DIM_22_INSTRUCTOR2"
  (i),						"EVENT_DIM"."INSTRUCTOR3" = "EVENT_DIM_23_INSTRUCTOR3"
  (i),						"EVENT_DIM"."CANCEL_DATE" = "EVENT_DIM_24_CANCEL_DATE"
  (i),						"EVENT_DIM"."OPPORTUNITY_ID" = "EVENT_DIM_26_OPPORTUNITY_ID"
  (i),						"EVENT_DIM"."CREATION_DATE" = "EVENT_DIM_28_CREATION_DATE"
  (i),						"EVENT_DIM"."LAST_UPDATE_DATE" = "EVENT_DIM_29_LAST_UPDATE_DATE"
  (i),						"EVENT_DIM"."GKDW_SOURCE" = "EVENT_DIM_34_GKDW_SOURCE"
  (i),						"EVENT_DIM"."EVENT_CHANNEL" = "EVENT_DIM_36_EVENT_CHANNEL"
  (i),						"EVENT_DIM"."EVENT_MODALITY" = "EVENT_DIM_37_EVENT_MODALITY"
  (i),						"EVENT_DIM"."EVENT_PROD_LINE" = "EVENT_DIM_38_EVENT_PROD_LINE"
  (i),						"EVENT_DIM"."ORACLE_ITEM_ID" = "EVENT_DIM_39_ORACLE_ITEM_ID"
  (i),						"EVENT_DIM"."ORACLE_ITEM_NUM" = "EVENT_DIM_40_ORACLE_ITEM_NUM"
  (i),						"EVENT_DIM"."COURSE_CODE" = "EVENT_DIM_41_COURSE_CODE"
  (i),						"EVENT_DIM"."EVENT_TYPE" = "EVENT_DIM_42_EVENT_TYPE"
  (i),						"EVENT_DIM"."CANCEL_REASON" = "EVENT_DIM_43_CANCEL_REASON"
  (i),						"EVENT_DIM"."CAPACITY" = "EVENT_DIM_44_CAPACITY"
  (i),						"EVENT_DIM"."FACILITY_CODE" = "EVENT_DIM_45_FACILITY_CODE"
  (i),						"EVENT_DIM"."FACILITY_REGION_METRO" = "EVENT_DI_46_FACILITY"
  (i),						"EVENT_DIM"."MEETING_DESCRIPTION" = "EVENT_DI_47_MEETING_"
  (i),						"EVENT_DIM"."RESELLER_EVENT_ID" = "EVENT_DIM_48_RESELLER_EVENT_ID"
  (i),						"EVENT_DIM"."CONF_ENROLLMENTS" = "EVENT_DIM_49_CONF_ENROLLMENTS"
  (i),						"EVENT_DIM"."WAIT_ENROLLMENTS" = "EVENT_DIM_50_WAIT_ENROLLMENTS"
  (i),						"EVENT_DIM"."ATTEND_ENROLLMENTS" = "EVENT_DI_51_ATTEND_E"
  (i),						"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS" = "EVENT_DI_52_DID_NOT_"
  (i),						"EVENT_DIM"."EVENT_NAME" = "EVENT_DIM_53_EVENT_NAME"
  (i),						"EVENT_DIM"."OPS_COUNTRY" = "EVENT_DIM_54_OPS_COUNTRY"
  (i),						"EVENT_DIM"."INTERNALFACILITY" = "EVENT_DIM_55_INTERNALFACILITY"
  (i),						"EVENT_DIM"."SPOKEN_LANGUAGE" = "EVENT_DIM_56_SPOKEN_LANGUAGE"
  (i),						"EVENT_DIM"."PLAN_TYPE" = "EVENT_DIM_58_PLAN_TYPE"
  (i),						"EVENT_DIM"."CREATE_USER" = "EVENT_DIM_59_CREATE_USER"
  (i),						"EVENT_DIM"."ONSITE_ATTENDED" = "EVENT_DIM_60_ONSITE_ATTENDED"
  (i),						"EVENT_DIM"."MEETING_DAYS" = "EVENT_DIM_61_MEETING_DAYS"
  (i),						"EVENT_DIM"."MANAGED_PROGRAM_ID" = "EVENT_DI_62_MANAGED_"
  (i)
    
            WHERE
  
  						"EVENT_DIM"."EVENT_ID" = "EVENT_DIM_0_EVENT_ID"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "EVENT_DIM_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "EVENT_DIM_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "EVENT_DIM_upd" := "EVENT_DIM_upd" + get_rowid.COUNT;
          "EVENT_DIM_si" := "EVENT_DIM_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "EVENT_DIM_si".."EVENT_DIM_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "EVENT_DIM_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "EVENT_DIM_upd" := "EVENT_DIM_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "EVENT_DIM_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "EVENT_DIM"
                SET
  
  								"EVENT_DIM"."EVENT_DESC" = "EVENT_DIM_1_EVENT_DESC"
  (last_successful_index),								"EVENT_DIM"."COURSE_ID" = "EVENT_DIM_2_COURSE_ID"
  (last_successful_index),								"EVENT_DIM"."LOCATION_ID" = "EVENT_DIM_3_LOCATION_ID"
  (last_successful_index),								"EVENT_DIM"."START_DATE" = "EVENT_DIM_5_START_DATE"
  (last_successful_index),								"EVENT_DIM"."START_TIME" = "EVENT_DIM_6_START_TIME"
  (last_successful_index),								"EVENT_DIM"."END_DATE" = "EVENT_DIM_7_END_DATE"
  (last_successful_index),								"EVENT_DIM"."END_TIME" = "EVENT_DIM_8_END_TIME"
  (last_successful_index),								"EVENT_DIM"."STATUS" = "EVENT_DIM_9_STATUS"
  (last_successful_index),								"EVENT_DIM"."LOCATION_NAME" = "EVENT_DIM_11_LOCATION_NAME"
  (last_successful_index),								"EVENT_DIM"."ADDRESS1" = "EVENT_DIM_12_ADDRESS1"
  (last_successful_index),								"EVENT_DIM"."ADDRESS2" = "EVENT_DIM_13_ADDRESS2"
  (last_successful_index),								"EVENT_DIM"."CITY" = "EVENT_DIM_15_CITY"
  (last_successful_index),								"EVENT_DIM"."STATE" = "EVENT_DIM_16_STATE"
  (last_successful_index),								"EVENT_DIM"."ZIPCODE" = "EVENT_DIM_17_ZIPCODE"
  (last_successful_index),								"EVENT_DIM"."PROVINCE" = "EVENT_DIM_18_PROVINCE"
  (last_successful_index),								"EVENT_DIM"."COUNTRY" = "EVENT_DIM_19_COUNTRY"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR1" = "EVENT_DIM_21_INSTRUCTOR1"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR2" = "EVENT_DIM_22_INSTRUCTOR2"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR3" = "EVENT_DIM_23_INSTRUCTOR3"
  (last_successful_index),								"EVENT_DIM"."CANCEL_DATE" = "EVENT_DIM_24_CANCEL_DATE"
  (last_successful_index),								"EVENT_DIM"."OPPORTUNITY_ID" = "EVENT_DIM_26_OPPORTUNITY_ID"
  (last_successful_index),								"EVENT_DIM"."CREATION_DATE" = "EVENT_DIM_28_CREATION_DATE"
  (last_successful_index),								"EVENT_DIM"."LAST_UPDATE_DATE" = "EVENT_DIM_29_LAST_UPDATE_DATE"
  (last_successful_index),								"EVENT_DIM"."GKDW_SOURCE" = "EVENT_DIM_34_GKDW_SOURCE"
  (last_successful_index),								"EVENT_DIM"."EVENT_CHANNEL" = "EVENT_DIM_36_EVENT_CHANNEL"
  (last_successful_index),								"EVENT_DIM"."EVENT_MODALITY" = "EVENT_DIM_37_EVENT_MODALITY"
  (last_successful_index),								"EVENT_DIM"."EVENT_PROD_LINE" = "EVENT_DIM_38_EVENT_PROD_LINE"
  (last_successful_index),								"EVENT_DIM"."ORACLE_ITEM_ID" = "EVENT_DIM_39_ORACLE_ITEM_ID"
  (last_successful_index),								"EVENT_DIM"."ORACLE_ITEM_NUM" = "EVENT_DIM_40_ORACLE_ITEM_NUM"
  (last_successful_index),								"EVENT_DIM"."COURSE_CODE" = "EVENT_DIM_41_COURSE_CODE"
  (last_successful_index),								"EVENT_DIM"."EVENT_TYPE" = "EVENT_DIM_42_EVENT_TYPE"
  (last_successful_index),								"EVENT_DIM"."CANCEL_REASON" = "EVENT_DIM_43_CANCEL_REASON"
  (last_successful_index),								"EVENT_DIM"."CAPACITY" = "EVENT_DIM_44_CAPACITY"
  (last_successful_index),								"EVENT_DIM"."FACILITY_CODE" = "EVENT_DIM_45_FACILITY_CODE"
  (last_successful_index),								"EVENT_DIM"."FACILITY_REGION_METRO" = "EVENT_DI_46_FACILITY"
  (last_successful_index),								"EVENT_DIM"."MEETING_DESCRIPTION" = "EVENT_DI_47_MEETING_"
  (last_successful_index),								"EVENT_DIM"."RESELLER_EVENT_ID" = "EVENT_DIM_48_RESELLER_EVENT_ID"
  (last_successful_index),								"EVENT_DIM"."CONF_ENROLLMENTS" = "EVENT_DIM_49_CONF_ENROLLMENTS"
  (last_successful_index),								"EVENT_DIM"."WAIT_ENROLLMENTS" = "EVENT_DIM_50_WAIT_ENROLLMENTS"
  (last_successful_index),								"EVENT_DIM"."ATTEND_ENROLLMENTS" = "EVENT_DI_51_ATTEND_E"
  (last_successful_index),								"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS" = "EVENT_DI_52_DID_NOT_"
  (last_successful_index),								"EVENT_DIM"."EVENT_NAME" = "EVENT_DIM_53_EVENT_NAME"
  (last_successful_index),								"EVENT_DIM"."OPS_COUNTRY" = "EVENT_DIM_54_OPS_COUNTRY"
  (last_successful_index),								"EVENT_DIM"."INTERNALFACILITY" = "EVENT_DIM_55_INTERNALFACILITY"
  (last_successful_index),								"EVENT_DIM"."SPOKEN_LANGUAGE" = "EVENT_DIM_56_SPOKEN_LANGUAGE"
  (last_successful_index),								"EVENT_DIM"."PLAN_TYPE" = "EVENT_DIM_58_PLAN_TYPE"
  (last_successful_index),								"EVENT_DIM"."CREATE_USER" = "EVENT_DIM_59_CREATE_USER"
  (last_successful_index),								"EVENT_DIM"."ONSITE_ATTENDED" = "EVENT_DIM_60_ONSITE_ATTENDED"
  (last_successful_index),								"EVENT_DIM"."MEETING_DAYS" = "EVENT_DIM_61_MEETING_DAYS"
  (last_successful_index),								"EVENT_DIM"."MANAGED_PROGRAM_ID" = "EVENT_DI_62_MANAGED_"
  (last_successful_index)
  
                WHERE
  
  								"EVENT_DIM"."EVENT_ID" = "EVENT_DIM_0_EVENT_ID"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "EVENT_DIM_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_DESC"',0,80),SUBSTRB("EVENT_DIM_1_EVENT_DESC"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_ID"',0,80),SUBSTRB("EVENT_DIM_2_COURSE_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_ID"',0,80),SUBSTRB("EVENT_DIM_3_LOCATION_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_DATE"',0,80),SUBSTRB("EVENT_DIM_5_START_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_TIME"',0,80),SUBSTRB("EVENT_DIM_6_START_TIME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_DATE"',0,80),SUBSTRB("EVENT_DIM_7_END_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_TIME"',0,80),SUBSTRB("EVENT_DIM_8_END_TIME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATUS"',0,80),SUBSTRB("EVENT_DIM_9_STATUS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_NAME"',0,80),SUBSTRB("EVENT_DIM_11_LOCATION_NAME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS1"',0,80),SUBSTRB("EVENT_DIM_12_ADDRESS1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS2"',0,80),SUBSTRB("EVENT_DIM_13_ADDRESS2"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CITY"',0,80),SUBSTRB("EVENT_DIM_15_CITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATE"',0,80),SUBSTRB("EVENT_DIM_16_STATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ZIPCODE"',0,80),SUBSTRB("EVENT_DIM_17_ZIPCODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PROVINCE"',0,80),SUBSTRB("EVENT_DIM_18_PROVINCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COUNTRY"',0,80),SUBSTRB("EVENT_DIM_19_COUNTRY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR1"',0,80),SUBSTRB("EVENT_DIM_21_INSTRUCTOR1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR2"',0,80),SUBSTRB("EVENT_DIM_22_INSTRUCTOR2"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR3"',0,80),SUBSTRB("EVENT_DIM_23_INSTRUCTOR3"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_DATE"',0,80),SUBSTRB("EVENT_DIM_24_CANCEL_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("EVENT_DIM_26_OPPORTUNITY_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATION_DATE"',0,80),SUBSTRB("EVENT_DIM_28_CREATION_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("EVENT_DIM_29_LAST_UPDATE_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("EVENT_DIM_34_GKDW_SOURCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_CHANNEL"',0,80),SUBSTRB("EVENT_DIM_36_EVENT_CHANNEL"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_MODALITY"',0,80),SUBSTRB("EVENT_DIM_37_EVENT_MODALITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_PROD_LINE"',0,80),SUBSTRB("EVENT_DIM_38_EVENT_PROD_LINE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_ID"',0,80),SUBSTRB("EVENT_DIM_39_ORACLE_ITEM_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_NUM"',0,80),SUBSTRB("EVENT_DIM_40_ORACLE_ITEM_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_CODE"',0,80),SUBSTRB("EVENT_DIM_41_COURSE_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_TYPE"',0,80),SUBSTRB("EVENT_DIM_42_EVENT_TYPE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_REASON"',0,80),SUBSTRB("EVENT_DIM_43_CANCEL_REASON"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CAPACITY"',0,80),SUBSTRB("EVENT_DIM_44_CAPACITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_CODE"',0,80),SUBSTRB("EVENT_DIM_45_FACILITY_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_REGION_METRO"',0,80),SUBSTRB("EVENT_DI_46_FACILITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DESCRIPTION"',0,80),SUBSTRB("EVENT_DI_47_MEETING_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."RESELLER_EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_48_RESELLER_EVENT_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CONF_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_49_CONF_ENROLLMENTS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."WAIT_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_50_WAIT_ENROLLMENTS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_51_ATTEND_E"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_52_DID_NOT_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_NAME"',0,80),SUBSTRB("EVENT_DIM_53_EVENT_NAME"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPS_COUNTRY"',0,80),SUBSTRB("EVENT_DIM_54_OPS_COUNTRY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INTERNALFACILITY"',0,80),SUBSTRB("EVENT_DIM_55_INTERNALFACILITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."SPOKEN_LANGUAGE"',0,80),SUBSTRB("EVENT_DIM_56_SPOKEN_LANGUAGE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PLAN_TYPE"',0,80),SUBSTRB("EVENT_DIM_58_PLAN_TYPE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATE_USER"',0,80),SUBSTRB("EVENT_DIM_59_CREATE_USER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ONSITE_ATTENDED"',0,80),SUBSTRB("EVENT_DIM_60_ONSITE_ATTENDED"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DAYS"',0,80),SUBSTRB("EVENT_DIM_61_MEETING_DAYS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MANAGED_PROGRAM_ID"',0,80),SUBSTRB("EVENT_DI_62_MANAGED_"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
                
                IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "EVENT_DIM_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "EVENT_DIM_si" >= "EVENT_DIM_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "EVENT_DIM_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"EVENT_DIM_0_EVENT_ID"(insert_bulk_index) := "EVENT_DIM_0_EVENT_ID"(update_bulk(j));
  		"EVENT_DIM_1_EVENT_DESC"(insert_bulk_index) := "EVENT_DIM_1_EVENT_DESC"(update_bulk(j));
  		"EVENT_DIM_2_COURSE_ID"(insert_bulk_index) := "EVENT_DIM_2_COURSE_ID"(update_bulk(j));
  		"EVENT_DIM_3_LOCATION_ID"(insert_bulk_index) := "EVENT_DIM_3_LOCATION_ID"(update_bulk(j));
  		"EVENT_DIM_5_START_DATE"(insert_bulk_index) := "EVENT_DIM_5_START_DATE"(update_bulk(j));
  		"EVENT_DIM_6_START_TIME"(insert_bulk_index) := "EVENT_DIM_6_START_TIME"(update_bulk(j));
  		"EVENT_DIM_7_END_DATE"(insert_bulk_index) := "EVENT_DIM_7_END_DATE"(update_bulk(j));
  		"EVENT_DIM_8_END_TIME"(insert_bulk_index) := "EVENT_DIM_8_END_TIME"(update_bulk(j));
  		"EVENT_DIM_9_STATUS"(insert_bulk_index) := "EVENT_DIM_9_STATUS"(update_bulk(j));
  		"EVENT_DIM_11_LOCATION_NAME"(insert_bulk_index) := "EVENT_DIM_11_LOCATION_NAME"(update_bulk(j));
  		"EVENT_DIM_12_ADDRESS1"(insert_bulk_index) := "EVENT_DIM_12_ADDRESS1"(update_bulk(j));
  		"EVENT_DIM_13_ADDRESS2"(insert_bulk_index) := "EVENT_DIM_13_ADDRESS2"(update_bulk(j));
  		"EVENT_DIM_15_CITY"(insert_bulk_index) := "EVENT_DIM_15_CITY"(update_bulk(j));
  		"EVENT_DIM_16_STATE"(insert_bulk_index) := "EVENT_DIM_16_STATE"(update_bulk(j));
  		"EVENT_DIM_17_ZIPCODE"(insert_bulk_index) := "EVENT_DIM_17_ZIPCODE"(update_bulk(j));
  		"EVENT_DIM_18_PROVINCE"(insert_bulk_index) := "EVENT_DIM_18_PROVINCE"(update_bulk(j));
  		"EVENT_DIM_19_COUNTRY"(insert_bulk_index) := "EVENT_DIM_19_COUNTRY"(update_bulk(j));
  		"EVENT_DIM_21_INSTRUCTOR1"(insert_bulk_index) := "EVENT_DIM_21_INSTRUCTOR1"(update_bulk(j));
  		"EVENT_DIM_22_INSTRUCTOR2"(insert_bulk_index) := "EVENT_DIM_22_INSTRUCTOR2"(update_bulk(j));
  		"EVENT_DIM_23_INSTRUCTOR3"(insert_bulk_index) := "EVENT_DIM_23_INSTRUCTOR3"(update_bulk(j));
  		"EVENT_DIM_24_CANCEL_DATE"(insert_bulk_index) := "EVENT_DIM_24_CANCEL_DATE"(update_bulk(j));
  		"EVENT_DIM_26_OPPORTUNITY_ID"(insert_bulk_index) := "EVENT_DIM_26_OPPORTUNITY_ID"(update_bulk(j));
  		"EVENT_DIM_28_CREATION_DATE"(insert_bulk_index) := "EVENT_DIM_28_CREATION_DATE"(update_bulk(j));
  		"EVENT_DIM_29_LAST_UPDATE_DATE"(insert_bulk_index) := "EVENT_DIM_29_LAST_UPDATE_DATE"(update_bulk(j));
  		"EVENT_DIM_34_GKDW_SOURCE"(insert_bulk_index) := "EVENT_DIM_34_GKDW_SOURCE"(update_bulk(j));
  		"EVENT_DIM_36_EVENT_CHANNEL"(insert_bulk_index) := "EVENT_DIM_36_EVENT_CHANNEL"(update_bulk(j));
  		"EVENT_DIM_37_EVENT_MODALITY"(insert_bulk_index) := "EVENT_DIM_37_EVENT_MODALITY"(update_bulk(j));
  		"EVENT_DIM_38_EVENT_PROD_LINE"(insert_bulk_index) := "EVENT_DIM_38_EVENT_PROD_LINE"(update_bulk(j));
  		"EVENT_DIM_39_ORACLE_ITEM_ID"(insert_bulk_index) := "EVENT_DIM_39_ORACLE_ITEM_ID"(update_bulk(j));
  		"EVENT_DIM_40_ORACLE_ITEM_NUM"(insert_bulk_index) := "EVENT_DIM_40_ORACLE_ITEM_NUM"(update_bulk(j));
  		"EVENT_DIM_41_COURSE_CODE"(insert_bulk_index) := "EVENT_DIM_41_COURSE_CODE"(update_bulk(j));
  		"EVENT_DIM_42_EVENT_TYPE"(insert_bulk_index) := "EVENT_DIM_42_EVENT_TYPE"(update_bulk(j));
  		"EVENT_DIM_43_CANCEL_REASON"(insert_bulk_index) := "EVENT_DIM_43_CANCEL_REASON"(update_bulk(j));
  		"EVENT_DIM_44_CAPACITY"(insert_bulk_index) := "EVENT_DIM_44_CAPACITY"(update_bulk(j));
  		"EVENT_DIM_45_FACILITY_CODE"(insert_bulk_index) := "EVENT_DIM_45_FACILITY_CODE"(update_bulk(j));
  		"EVENT_DI_46_FACILITY"(insert_bulk_index) := "EVENT_DI_46_FACILITY"(update_bulk(j));
  		"EVENT_DI_47_MEETING_"(insert_bulk_index) := "EVENT_DI_47_MEETING_"(update_bulk(j));
  		"EVENT_DIM_48_RESELLER_EVENT_ID"(insert_bulk_index) := "EVENT_DIM_48_RESELLER_EVENT_ID"(update_bulk(j));
  		"EVENT_DIM_49_CONF_ENROLLMENTS"(insert_bulk_index) := "EVENT_DIM_49_CONF_ENROLLMENTS"(update_bulk(j));
  		"EVENT_DIM_50_WAIT_ENROLLMENTS"(insert_bulk_index) := "EVENT_DIM_50_WAIT_ENROLLMENTS"(update_bulk(j));
  		"EVENT_DI_51_ATTEND_E"(insert_bulk_index) := "EVENT_DI_51_ATTEND_E"(update_bulk(j));
  		"EVENT_DI_52_DID_NOT_"(insert_bulk_index) := "EVENT_DI_52_DID_NOT_"(update_bulk(j));
  		"EVENT_DIM_53_EVENT_NAME"(insert_bulk_index) := "EVENT_DIM_53_EVENT_NAME"(update_bulk(j));
  		"EVENT_DIM_54_OPS_COUNTRY"(insert_bulk_index) := "EVENT_DIM_54_OPS_COUNTRY"(update_bulk(j));
  		"EVENT_DIM_55_INTERNALFACILITY"(insert_bulk_index) := "EVENT_DIM_55_INTERNALFACILITY"(update_bulk(j));
  		"EVENT_DIM_56_SPOKEN_LANGUAGE"(insert_bulk_index) := "EVENT_DIM_56_SPOKEN_LANGUAGE"(update_bulk(j));
  		"EVENT_DIM_58_PLAN_TYPE"(insert_bulk_index) := "EVENT_DIM_58_PLAN_TYPE"(update_bulk(j));
  		"EVENT_DIM_59_CREATE_USER"(insert_bulk_index) := "EVENT_DIM_59_CREATE_USER"(update_bulk(j));
  		"EVENT_DIM_60_ONSITE_ATTENDED"(insert_bulk_index) := "EVENT_DIM_60_ONSITE_ATTENDED"(update_bulk(j));
  		"EVENT_DIM_61_MEETING_DAYS"(insert_bulk_index) := "EVENT_DIM_61_MEETING_DAYS"(update_bulk(j));
  		"EVENT_DI_62_MANAGED_"(insert_bulk_index) := "EVENT_DI_62_MANAGED_"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "EVENT_DIM_srk"(insert_bulk_index) := "EVENT_DIM_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "EVENT_DIM_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "EVENT_DIM_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "EVENT_DIM_si"..insert_bulk_index
          INSERT INTO
            "EVENT_DIM"
            ("EVENT_DIM"."EVENT_ID",
            "EVENT_DIM"."EVENT_DESC",
            "EVENT_DIM"."COURSE_ID",
            "EVENT_DIM"."LOCATION_ID",
            "EVENT_DIM"."START_DATE",
            "EVENT_DIM"."START_TIME",
            "EVENT_DIM"."END_DATE",
            "EVENT_DIM"."END_TIME",
            "EVENT_DIM"."STATUS",
            "EVENT_DIM"."LOCATION_NAME",
            "EVENT_DIM"."ADDRESS1",
            "EVENT_DIM"."ADDRESS2",
            "EVENT_DIM"."CITY",
            "EVENT_DIM"."STATE",
            "EVENT_DIM"."ZIPCODE",
            "EVENT_DIM"."PROVINCE",
            "EVENT_DIM"."COUNTRY",
            "EVENT_DIM"."INSTRUCTOR1",
            "EVENT_DIM"."INSTRUCTOR2",
            "EVENT_DIM"."INSTRUCTOR3",
            "EVENT_DIM"."CANCEL_DATE",
            "EVENT_DIM"."OPPORTUNITY_ID",
            "EVENT_DIM"."CREATION_DATE",
            "EVENT_DIM"."LAST_UPDATE_DATE",
            "EVENT_DIM"."GKDW_SOURCE",
            "EVENT_DIM"."EVENT_CHANNEL",
            "EVENT_DIM"."EVENT_MODALITY",
            "EVENT_DIM"."EVENT_PROD_LINE",
            "EVENT_DIM"."ORACLE_ITEM_ID",
            "EVENT_DIM"."ORACLE_ITEM_NUM",
            "EVENT_DIM"."COURSE_CODE",
            "EVENT_DIM"."EVENT_TYPE",
            "EVENT_DIM"."CANCEL_REASON",
            "EVENT_DIM"."CAPACITY",
            "EVENT_DIM"."FACILITY_CODE",
            "EVENT_DIM"."FACILITY_REGION_METRO",
            "EVENT_DIM"."MEETING_DESCRIPTION",
            "EVENT_DIM"."RESELLER_EVENT_ID",
            "EVENT_DIM"."CONF_ENROLLMENTS",
            "EVENT_DIM"."WAIT_ENROLLMENTS",
            "EVENT_DIM"."ATTEND_ENROLLMENTS",
            "EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS",
            "EVENT_DIM"."EVENT_NAME",
            "EVENT_DIM"."OPS_COUNTRY",
            "EVENT_DIM"."INTERNALFACILITY",
            "EVENT_DIM"."SPOKEN_LANGUAGE",
            "EVENT_DIM"."PLAN_TYPE",
            "EVENT_DIM"."CREATE_USER",
            "EVENT_DIM"."ONSITE_ATTENDED",
            "EVENT_DIM"."MEETING_DAYS",
            "EVENT_DIM"."MANAGED_PROGRAM_ID")
          VALUES
            ("EVENT_DIM_0_EVENT_ID"(i),
            "EVENT_DIM_1_EVENT_DESC"(i),
            "EVENT_DIM_2_COURSE_ID"(i),
            "EVENT_DIM_3_LOCATION_ID"(i),
            "EVENT_DIM_5_START_DATE"(i),
            "EVENT_DIM_6_START_TIME"(i),
            "EVENT_DIM_7_END_DATE"(i),
            "EVENT_DIM_8_END_TIME"(i),
            "EVENT_DIM_9_STATUS"(i),
            "EVENT_DIM_11_LOCATION_NAME"(i),
            "EVENT_DIM_12_ADDRESS1"(i),
            "EVENT_DIM_13_ADDRESS2"(i),
            "EVENT_DIM_15_CITY"(i),
            "EVENT_DIM_16_STATE"(i),
            "EVENT_DIM_17_ZIPCODE"(i),
            "EVENT_DIM_18_PROVINCE"(i),
            "EVENT_DIM_19_COUNTRY"(i),
            "EVENT_DIM_21_INSTRUCTOR1"(i),
            "EVENT_DIM_22_INSTRUCTOR2"(i),
            "EVENT_DIM_23_INSTRUCTOR3"(i),
            "EVENT_DIM_24_CANCEL_DATE"(i),
            "EVENT_DIM_26_OPPORTUNITY_ID"(i),
            "EVENT_DIM_28_CREATION_DATE"(i),
            "EVENT_DIM_29_LAST_UPDATE_DATE"(i),
            "EVENT_DIM_34_GKDW_SOURCE"(i),
            "EVENT_DIM_36_EVENT_CHANNEL"(i),
            "EVENT_DIM_37_EVENT_MODALITY"(i),
            "EVENT_DIM_38_EVENT_PROD_LINE"(i),
            "EVENT_DIM_39_ORACLE_ITEM_ID"(i),
            "EVENT_DIM_40_ORACLE_ITEM_NUM"(i),
            "EVENT_DIM_41_COURSE_CODE"(i),
            "EVENT_DIM_42_EVENT_TYPE"(i),
            "EVENT_DIM_43_CANCEL_REASON"(i),
            "EVENT_DIM_44_CAPACITY"(i),
            "EVENT_DIM_45_FACILITY_CODE"(i),
            "EVENT_DI_46_FACILITY"(i),
            "EVENT_DI_47_MEETING_"(i),
            "EVENT_DIM_48_RESELLER_EVENT_ID"(i),
            "EVENT_DIM_49_CONF_ENROLLMENTS"(i),
            "EVENT_DIM_50_WAIT_ENROLLMENTS"(i),
            "EVENT_DI_51_ATTEND_E"(i),
            "EVENT_DI_52_DID_NOT_"(i),
            "EVENT_DIM_53_EVENT_NAME"(i),
            "EVENT_DIM_54_OPS_COUNTRY"(i),
            "EVENT_DIM_55_INTERNALFACILITY"(i),
            "EVENT_DIM_56_SPOKEN_LANGUAGE"(i),
            "EVENT_DIM_58_PLAN_TYPE"(i),
            "EVENT_DIM_59_CREATE_USER"(i),
            "EVENT_DIM_60_ONSITE_ATTENDED"(i),
            "EVENT_DIM_61_MEETING_DAYS"(i),
            "EVENT_DI_62_MANAGED_"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "EVENT_DIM_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "EVENT_DIM_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "EVENT_DIM_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 114: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_0_EVENT_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_DESC"',0,80),SUBSTRB("EVENT_DIM_1_EVENT_DESC"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_ID"',0,80),SUBSTRB("EVENT_DIM_2_COURSE_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_ID"',0,80),SUBSTRB("EVENT_DIM_3_LOCATION_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_DATE"',0,80),SUBSTRB("EVENT_DIM_5_START_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_TIME"',0,80),SUBSTRB("EVENT_DIM_6_START_TIME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_DATE"',0,80),SUBSTRB("EVENT_DIM_7_END_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_TIME"',0,80),SUBSTRB("EVENT_DIM_8_END_TIME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATUS"',0,80),SUBSTRB("EVENT_DIM_9_STATUS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_NAME"',0,80),SUBSTRB("EVENT_DIM_11_LOCATION_NAME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS1"',0,80),SUBSTRB("EVENT_DIM_12_ADDRESS1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS2"',0,80),SUBSTRB("EVENT_DIM_13_ADDRESS2"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CITY"',0,80),SUBSTRB("EVENT_DIM_15_CITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATE"',0,80),SUBSTRB("EVENT_DIM_16_STATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ZIPCODE"',0,80),SUBSTRB("EVENT_DIM_17_ZIPCODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PROVINCE"',0,80),SUBSTRB("EVENT_DIM_18_PROVINCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COUNTRY"',0,80),SUBSTRB("EVENT_DIM_19_COUNTRY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR1"',0,80),SUBSTRB("EVENT_DIM_21_INSTRUCTOR1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR2"',0,80),SUBSTRB("EVENT_DIM_22_INSTRUCTOR2"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR3"',0,80),SUBSTRB("EVENT_DIM_23_INSTRUCTOR3"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_DATE"',0,80),SUBSTRB("EVENT_DIM_24_CANCEL_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("EVENT_DIM_26_OPPORTUNITY_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATION_DATE"',0,80),SUBSTRB("EVENT_DIM_28_CREATION_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("EVENT_DIM_29_LAST_UPDATE_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("EVENT_DIM_34_GKDW_SOURCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_CHANNEL"',0,80),SUBSTRB("EVENT_DIM_36_EVENT_CHANNEL"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_MODALITY"',0,80),SUBSTRB("EVENT_DIM_37_EVENT_MODALITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_PROD_LINE"',0,80),SUBSTRB("EVENT_DIM_38_EVENT_PROD_LINE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_ID"',0,80),SUBSTRB("EVENT_DIM_39_ORACLE_ITEM_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_NUM"',0,80),SUBSTRB("EVENT_DIM_40_ORACLE_ITEM_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_CODE"',0,80),SUBSTRB("EVENT_DIM_41_COURSE_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_TYPE"',0,80),SUBSTRB("EVENT_DIM_42_EVENT_TYPE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_REASON"',0,80),SUBSTRB("EVENT_DIM_43_CANCEL_REASON"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CAPACITY"',0,80),SUBSTRB("EVENT_DIM_44_CAPACITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_CODE"',0,80),SUBSTRB("EVENT_DIM_45_FACILITY_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_REGION_METRO"',0,80),SUBSTRB("EVENT_DI_46_FACILITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DESCRIPTION"',0,80),SUBSTRB("EVENT_DI_47_MEETING_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."RESELLER_EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_48_RESELLER_EVENT_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CONF_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_49_CONF_ENROLLMENTS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."WAIT_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_50_WAIT_ENROLLMENTS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_51_ATTEND_E"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_52_DID_NOT_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_NAME"',0,80),SUBSTRB("EVENT_DIM_53_EVENT_NAME"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPS_COUNTRY"',0,80),SUBSTRB("EVENT_DIM_54_OPS_COUNTRY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INTERNALFACILITY"',0,80),SUBSTRB("EVENT_DIM_55_INTERNALFACILITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."SPOKEN_LANGUAGE"',0,80),SUBSTRB("EVENT_DIM_56_SPOKEN_LANGUAGE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PLAN_TYPE"',0,80),SUBSTRB("EVENT_DIM_58_PLAN_TYPE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATE_USER"',0,80),SUBSTRB("EVENT_DIM_59_CREATE_USER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ONSITE_ATTENDED"',0,80),SUBSTRB("EVENT_DIM_60_ONSITE_ATTENDED"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DAYS"',0,80),SUBSTRB("EVENT_DIM_61_MEETING_DAYS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MANAGED_PROGRAM_ID"',0,80),SUBSTRB("EVENT_DI_62_MANAGED_"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
          
          IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "EVENT_DIM_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "EVENT_DIM_ins" := "EVENT_DIM_ins" + get_rowid.COUNT;
      "EVENT_DIM_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "EVENT_DIM_ins" := "EVENT_DIM_ins0"; 
    "EVENT_DIM_upd" := "EVENT_DIM_upd0";
  END IF;

END "EVXEVENT_DML";

---------------------------------------------------------------------------
-- "EVXEVENT_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "EVENT_DIM_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "EVXEVENT_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "EVENT_DIM_St" THEN
          "EVENT_DIM_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"EVENT_DIM"',
              p_target_uoid=>'A41FFB19A39D5678E040007F01006C7D',
              p_stm=>'TRACE 116',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "EVENT_DIM_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A30A5678E040007F01006C7D', -- Operator COURSE_DIM
              p_parent_object_name=>'COURSE_DIM',
              p_parent_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'COURSE_DIM',
              p_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A39D5678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A18D5678E040007F01006C7D', -- Operator COURSE_DIM
              p_parent_object_name=>'COURSE_DIM',
              p_parent_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'COURSE_DIM',
              p_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A3A35678E040007F01006C7D', -- Operator EVXEVENT
              p_parent_object_name=>'EVXEVENT',
              p_parent_object_uoid=>'A41FFB1910475678E040007F01006C7D', -- Table EVXEVENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEVENT',
              p_object_uoid=>'A41FFB1910475678E040007F01006C7D', -- Table EVXEVENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A5295678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A3A05678E040007F01006C7D', -- Operator QG_EVENT
              p_parent_object_name=>'QG_EVENT',
              p_parent_object_uoid=>'A41FFB190CE65678E040007F01006C7D', -- Table QG_EVENT
              p_parent_object_type=>'Table',
              p_object_name=>'QG_EVENT',
              p_object_uoid=>'A41FFB190CE65678E040007F01006C7D', -- Table QG_EVENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "EVXEVENT_si" := 0;
    "EVENT_DIM_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "EVXEVENT_SU";

      LOOP
        IF "EVXEVENT_si" = 0 THEN
          "EVXEVENT_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "EVXEVENT_0_EVXEVENTID".COUNT - 1;
          ELSE
            bulk_count := "EVXEVENT_0_EVXEVENTID".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "EVENT_DIM_ir".DELETE;
"EVENT_DIM_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "EVXEVENT_i" := "EVXEVENT_si";
        BEGIN
          
          LOOP
            EXIT WHEN "EVENT_DIM_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "EVXEVENT_i" := "EVXEVENT_i" + 1;
            "EVXEVENT_si" := "EVXEVENT_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "EVENT_DIM_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("EVXEVENT_c"%NOTFOUND AND
               "EVXEVENT_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "EVXEVENT_i" > bulk_count THEN
            
              "EVXEVENT_si" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_QG_INSTRUCTOR_ID"((RTRIM("EVXEVENT_0_EVXEVENTID"
            ("EVXEVENT_i"))),"GET_QG_I_1_INSTR_ID"
            ("EVXEVENT_i"),"GET_QG_I_2_INSTR_ID"
            ("EVXEVENT_i"),"GET_QG_I_3_INSTR_ID"
            ("EVXEVENT_i"));
            
            ',0,2000);
            
                
                "GET_QG_INSTRUCTOR_ID"((RTRIM("EVXEVENT_0_EVXEVENTID"
            ("EVXEVENT_i"))),"GET_QG_I_1_INSTR_ID"
            ("EVXEVENT_i"),"GET_QG_I_2_INSTR_ID"
            ("EVXEVENT_i"),"GET_QG_I_3_INSTR_ID"
            ("EVXEVENT_i"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_ENROLL_STATUS_COUNT"((RTRIM("EVXEVENT_0_EVXEVENTID"
            ("EVXEVENT_i"))),"OWB_EVENT_DIM"."GET_CONST_2_ENROLL_STATUS","GET_ENRO_2_ENROLL_C"
            ("EVXEVENT_i"));
            
            ',0,2000);
            
                
                "GET_ENROLL_STATUS_COUNT"((RTRIM("EVXEVENT_0_EVXEVENTID"
            ("EVXEVENT_i"))),"OWB_EVENT_DIM"."GET_CONST_2_ENROLL_STATUS","GET_ENRO_2_ENROLL_C"
            ("EVXEVENT_i"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"EVENT_DIM"';
            get_audit_detail_id := "EVENT_DIM_id";
            IF NOT "EVENT_DIM_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"EVENT_DIM_0_EVENT_ID"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_0_EVXEVENTID"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_0_EVENT_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_0_EVXEVENTID"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_0_EVENT_ID"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_0_EVXEVENTID"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_0_EVENT_ID" :=
            
            RTRIM("EVXEVENT_0_EVXEVENTID"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_1_EVENT_DESC"("EVENT_DIM_i") := 
            
            "EVXEVENT_9_DESCRIPTION"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_1_EVENT_DESC"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_9_DESCRIPTION"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_1_EVENT_DESC"("EVENT_DIM_i") :=
            
            "EVXEVENT_9_DESCRIPTION"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_1_EVENT_DESC" :=
            
            "EVXEVENT_9_DESCRIPTION"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_2_COURSE_ID"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_24_EVXCOURSEID"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_2_COURSE_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_24_EVXCOURSEID"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_2_COURSE_ID"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_24_EVXCOURSEID"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_2_COURSE_ID" :=
            
            RTRIM("EVXEVENT_24_EVXCOURSEID"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_3_LOCATION_ID"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_28_EVXFACILITYID"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_3_LOCATION_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_28_EVXFACILITYID"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_3_LOCATION_ID"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_28_EVXFACILITYID"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_3_LOCATION_ID" :=
            
            RTRIM("EVXEVENT_28_EVXFACILITYID"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_5_START_DATE"("EVENT_DIM_i") := 
            
            "EVXEVENT_21_STARTDATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_5_START_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_21_STARTDATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_5_START_DATE"("EVENT_DIM_i") :=
            
            "EVXEVENT_21_STARTDATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_5_START_DATE" :=
            
            "EVXEVENT_21_STARTDATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_6_START_TIME"("EVENT_DIM_i") := 
            
            "EXPR_10_STARTTIME"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_6_START_TIME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_10_STARTTIME"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_6_START_TIME"("EVENT_DIM_i") :=
            
            "EXPR_10_STARTTIME"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_6_START_TIME" :=
            
            "EXPR_10_STARTTIME"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_7_END_DATE"("EVENT_DIM_i") := 
            
            "EVXEVENT_10_ENDDATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_7_END_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_10_ENDDATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_7_END_DATE"("EVENT_DIM_i") :=
            
            "EVXEVENT_10_ENDDATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_7_END_DATE" :=
            
            "EVXEVENT_10_ENDDATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_8_END_TIME"("EVENT_DIM_i") := 
            
            "EXPR_14_ENDTIME"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_8_END_TIME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_14_ENDTIME"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_8_END_TIME"("EVENT_DIM_i") :=
            
            "EXPR_14_ENDTIME"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_8_END_TIME" :=
            
            "EXPR_14_ENDTIME"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_9_STATUS"("EVENT_DIM_i") := 
            
            "EVXEVENT_2_EVENTSTATUS"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_9_STATUS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_2_EVENTSTATUS"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_9_STATUS"("EVENT_DIM_i") :=
            
            "EVXEVENT_2_EVENTSTATUS"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_9_STATUS" :=
            
            "EVXEVENT_2_EVENTSTATUS"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_11_LOCATION_NAME"("EVENT_DIM_i") := 
            
            "EVXEVENT_15_FACILITYNAME"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_11_LOCATION_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_15_FACILITYNAME"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_11_LOCATION_NAME"("EVENT_DIM_i") :=
            
            "EVXEVENT_15_FACILITYNAME"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_11_LOCATION_NAME" :=
            
            "EVXEVENT_15_FACILITYNAME"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_12_ADDRESS1"("EVENT_DIM_i") := 
            
            "EVXEVENT_40_FACILITYADDRESS1"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_12_ADDRESS1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_40_FACILITYADDRESS1"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_12_ADDRESS1"("EVENT_DIM_i") :=
            
            "EVXEVENT_40_FACILITYADDRESS1"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_12_ADDRESS1" :=
            
            "EVXEVENT_40_FACILITYADDRESS1"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_13_ADDRESS2"("EVENT_DIM_i") := 
            
            "EVXEVENT_41_FACILITYADDRESS2"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_13_ADDRESS2"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_41_FACILITYADDRESS2"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_13_ADDRESS2"("EVENT_DIM_i") :=
            
            "EVXEVENT_41_FACILITYADDRESS2"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_13_ADDRESS2" :=
            
            "EVXEVENT_41_FACILITYADDRESS2"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_15_CITY"("EVENT_DIM_i") := 
            
            "EVXEVENT_13_FACILITYCITY"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_15_CITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_13_FACILITYCITY"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_15_CITY"("EVENT_DIM_i") :=
            
            "EVXEVENT_13_FACILITYCITY"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_15_CITY" :=
            
            "EVXEVENT_13_FACILITYCITY"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_16_STATE"("EVENT_DIM_i") := 
            
            "EXPR_8_STATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_16_STATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_8_STATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_16_STATE"("EVENT_DIM_i") :=
            
            "EXPR_8_STATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_16_STATE" :=
            
            "EXPR_8_STATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_17_ZIPCODE"("EVENT_DIM_i") := 
            
            "EVXEVENT_43_FACILITYPOSTAL"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_17_ZIPCODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_43_FACILITYPOSTAL"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_17_ZIPCODE"("EVENT_DIM_i") :=
            
            "EVXEVENT_43_FACILITYPOSTAL"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_17_ZIPCODE" :=
            
            "EVXEVENT_43_FACILITYPOSTAL"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_18_PROVINCE"("EVENT_DIM_i") := 
            
            "EXPR_9_PROVINCE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_18_PROVINCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_9_PROVINCE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_18_PROVINCE"("EVENT_DIM_i") :=
            
            "EXPR_9_PROVINCE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_18_PROVINCE" :=
            
            "EXPR_9_PROVINCE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_19_COUNTRY"("EVENT_DIM_i") := 
            
            "EXPR_11_COUNTRY"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_19_COUNTRY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_11_COUNTRY"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_19_COUNTRY"("EVENT_DIM_i") :=
            
            "EXPR_11_COUNTRY"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_19_COUNTRY" :=
            
            "EXPR_11_COUNTRY"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_21_INSTRUCTOR1"("EVENT_DIM_i") := 
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_21_INSTRUCTOR1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_1_INSTR_ID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_21_INSTRUCTOR1"("EVENT_DIM_i") :=
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_21_INSTRUCTOR1" :=
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_22_INSTRUCTOR2"("EVENT_DIM_i") := 
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_22_INSTRUCTOR2"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_2_INSTR_ID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_22_INSTRUCTOR2"("EVENT_DIM_i") :=
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_22_INSTRUCTOR2" :=
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_23_INSTRUCTOR3"("EVENT_DIM_i") := 
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_23_INSTRUCTOR3"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_3_INSTR_ID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_23_INSTRUCTOR3"("EVENT_DIM_i") :=
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_23_INSTRUCTOR3" :=
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_24_CANCEL_DATE"("EVENT_DIM_i") := 
            
            "EVXEVENT_65_CANCELDATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_24_CANCEL_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_65_CANCELDATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_24_CANCEL_DATE"("EVENT_DIM_i") :=
            
            "EVXEVENT_65_CANCELDATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_24_CANCEL_DATE" :=
            
            "EVXEVENT_65_CANCELDATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_26_OPPORTUNITY_ID"("EVENT_DIM_i") := 
            
            RTRIM("EXPR_15_OPPORTUNITY_ID"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_26_OPPORTUNITY_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EXPR_15_OPPORTUNITY_ID"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_26_OPPORTUNITY_ID"("EVENT_DIM_i") :=
            
            RTRIM("EXPR_15_OPPORTUNITY_ID"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_26_OPPORTUNITY_ID" :=
            
            RTRIM("EXPR_15_OPPORTUNITY_ID"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_28_CREATION_DATE"("EVENT_DIM_i") := 
            
            "EVXEVENT_68_CREATEDATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_28_CREATION_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_68_CREATEDATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_28_CREATION_DATE"("EVENT_DIM_i") :=
            
            "EVXEVENT_68_CREATEDATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_28_CREATION_DATE" :=
            
            "EVXEVENT_68_CREATEDATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_29_LAST_UPDATE_DATE"("EVENT_DIM_i") := 
            
            "EVXEVENT_70_MODIFYDATE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_29_LAST_UPDATE_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_70_MODIFYDATE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_29_LAST_UPDATE_DATE"("EVENT_DIM_i") :=
            
            "EVXEVENT_70_MODIFYDATE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_29_LAST_UPDATE_DA" :=
            
            "EVXEVENT_70_MODIFYDATE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_34_GKDW_SOURCE"("EVENT_DIM_i") := 
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_34_GKDW_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_EVENT_DIM"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_34_GKDW_SOURCE"("EVENT_DIM_i") :=
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_34_GKDW_SOURCE" :=
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_36_EVENT_CHANNEL"("EVENT_DIM_i") := 
            
            "COURSE_DIM_4_COURSE_CH"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_36_EVENT_CHANNEL"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_4_COURSE_CH"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_36_EVENT_CHANNEL"("EVENT_DIM_i") :=
            
            "COURSE_DIM_4_COURSE_CH"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_36_EVENT_CHANNEL" :=
            
            "COURSE_DIM_4_COURSE_CH"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_37_EVENT_MODALITY"("EVENT_DIM_i") := 
            
            "COURSE_DIM_5_COURSE_MOD"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_37_EVENT_MODALITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_5_COURSE_MOD"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_37_EVENT_MODALITY"("EVENT_DIM_i") :=
            
            "COURSE_DIM_5_COURSE_MOD"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_37_EVENT_MODALITY" :=
            
            "COURSE_DIM_5_COURSE_MOD"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_38_EVENT_PROD_LINE"("EVENT_DIM_i") := 
            
            "COURSE_DIM_6_COURSE_PL"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_38_EVENT_PROD_LINE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_6_COURSE_PL"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_38_EVENT_PROD_LINE"("EVENT_DIM_i") :=
            
            "COURSE_DIM_6_COURSE_PL"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_38_EVENT_PROD_LI" :=
            
            "COURSE_DIM_6_COURSE_PL"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_39_ORACLE_ITEM_ID"("EVENT_DIM_i") := 
            
            "COURSE_DIM_8_ORACLE_ITEM_ID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_39_ORACLE_ITEM_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_8_ORACLE_ITEM_ID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_39_ORACLE_ITEM_ID"("EVENT_DIM_i") :=
            
            "COURSE_DIM_8_ORACLE_ITEM_ID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_39_ORACLE_ITEM_ID" :=
            
            "COURSE_DIM_8_ORACLE_ITEM_ID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_40_ORACLE_ITEM_NUM"("EVENT_DIM_i") := 
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_40_ORACLE_ITEM_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_9_ORACLE_ITEM_NUM"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_40_ORACLE_ITEM_NUM"("EVENT_DIM_i") :=
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_40_ORACLE_ITEM_N" :=
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_41_COURSE_CODE"("EVENT_DIM_i") := 
            
            "EVXEVENT_6_COURSECODE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_41_COURSE_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_6_COURSECODE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_41_COURSE_CODE"("EVENT_DIM_i") :=
            
            "EVXEVENT_6_COURSECODE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_41_COURSE_CODE" :=
            
            "EVXEVENT_6_COURSECODE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_42_EVENT_TYPE"("EVENT_DIM_i") := 
            
            "EVXEVENT_3_EVENTTYPE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_42_EVENT_TYPE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_3_EVENTTYPE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_42_EVENT_TYPE"("EVENT_DIM_i") :=
            
            "EVXEVENT_3_EVENTTYPE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_42_EVENT_TYPE" :=
            
            "EVXEVENT_3_EVENTTYPE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_43_CANCEL_REASON"("EVENT_DIM_i") := 
            
            "EVXEVENT_66_CANCELREASON"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_43_CANCEL_REASON"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_66_CANCELREASON"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_43_CANCEL_REASON"("EVENT_DIM_i") :=
            
            "EVXEVENT_66_CANCELREASON"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_43_CANCEL_REASON" :=
            
            "EVXEVENT_66_CANCELREASON"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_44_CAPACITY"("EVENT_DIM_i") := 
            
            "EVXEVENT_18_MAXENROLLMENT"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_44_CAPACITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_18_MAXENROLLMENT"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_44_CAPACITY"("EVENT_DIM_i") :=
            
            "EVXEVENT_18_MAXENROLLMENT"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_44_CAPACITY" :=
            
            "EVXEVENT_18_MAXENROLLMENT"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_45_FACILITY_CODE"("EVENT_DIM_i") := 
            
            "EVXEVENT_46_FACILITYCODE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_45_FACILITY_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_46_FACILITYCODE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_45_FACILITY_CODE"("EVENT_DIM_i") :=
            
            "EVXEVENT_46_FACILITYCODE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_45_FACILITY_CODE" :=
            
            "EVXEVENT_46_FACILITYCODE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_46_FACILITY"("EVENT_DIM_i") := 
            
            "EVXEVENT_71_FACILITY"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_46_FACILITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_71_FACILITY"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_46_FACILITY"("EVENT_DIM_i") :=
            
            "EVXEVENT_71_FACILITY"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_46_FACILITY" :=
            
            "EVXEVENT_71_FACILITY"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_47_MEETING_"("EVENT_DIM_i") := 
            
            "EVXEVENT_72_MEETINGDESCRIPTION"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_47_MEETING_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_72_MEETINGDESCRIPTION"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_47_MEETING_"("EVENT_DIM_i") :=
            
            "EVXEVENT_72_MEETINGDESCRIPTION"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_47_MEETING_" :=
            
            "EVXEVENT_72_MEETINGDESCRIPTION"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_48_RESELLER_EVENT_ID"("EVENT_DIM_i") := 
            
            "QG_EVENT_12_RESELLEREVENTID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_48_RESELLER_EVENT_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_12_RESELLEREVENTID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_48_RESELLER_EVENT_ID"("EVENT_DIM_i") :=
            
            "QG_EVENT_12_RESELLEREVENTID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_48_RESELLER_EVEN" :=
            
            "QG_EVENT_12_RESELLEREVENTID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_49_CONF_ENROLLMENTS"("EVENT_DIM_i") := 
            
            "EVXEVENT_51_CONFIRME"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_49_CONF_ENROLLMENTS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_51_CONFIRME"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_49_CONF_ENROLLMENTS"("EVENT_DIM_i") :=
            
            "EVXEVENT_51_CONFIRME"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_49_CONF_ENROLLMEN" :=
            
            "EVXEVENT_51_CONFIRME"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_50_WAIT_ENROLLMENTS"("EVENT_DIM_i") := 
            
            "EVXEVENT_23_WAITENROLLMENT"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_50_WAIT_ENROLLMENTS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_23_WAITENROLLMENT"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_50_WAIT_ENROLLMENTS"("EVENT_DIM_i") :=
            
            "EVXEVENT_23_WAITENROLLMENT"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_50_WAIT_ENROLLMEN" :=
            
            "EVXEVENT_23_WAITENROLLMENT"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_51_ATTEND_E"("EVENT_DIM_i") := 
            
            "EVXEVENT_49_ATTENDEDENROLLMENT"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_51_ATTEND_E"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_49_ATTENDEDENROLLMENT"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_51_ATTEND_E"("EVENT_DIM_i") :=
            
            "EVXEVENT_49_ATTENDEDENROLLMENT"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_51_ATTEND_E" :=
            
            "EVXEVENT_49_ATTENDEDENROLLMENT"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_52_DID_NOT_"("EVENT_DIM_i") := 
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_52_DID_NOT_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_ENRO_2_ENROLL_C"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_52_DID_NOT_"("EVENT_DIM_i") :=
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_52_DID_NOT_" :=
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_53_EVENT_NAME"("EVENT_DIM_i") := 
            
            "EVXEVENT_1_EVENTNAME"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_53_EVENT_NAME"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_1_EVENTNAME"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_53_EVENT_NAME"("EVENT_DIM_i") :=
            
            "EVXEVENT_1_EVENTNAME"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_53_EVENT_NAME" :=
            
            "EVXEVENT_1_EVENTNAME"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_54_OPS_COUNTRY"("EVENT_DIM_i") := 
            
            "EXPR_13_OPS_COUNTRY"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_54_OPS_COUNTRY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_13_OPS_COUNTRY"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_54_OPS_COUNTRY"("EVENT_DIM_i") :=
            
            "EXPR_13_OPS_COUNTRY"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_54_OPS_COUNTRY" :=
            
            "EXPR_13_OPS_COUNTRY"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_55_INTERNALFACILITY"("EVENT_DIM_i") := 
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_55_INTERNALFACILITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("QG_EVENT_14_INTERNALFACILITY"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_55_INTERNALFACILITY"("EVENT_DIM_i") :=
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_55_INTERNALFACILI" :=
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_56_SPOKEN_LANGUAGE"("EVENT_DIM_i") := 
            
            "EVXEVENT_27_SPOKENLANGUAGE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_56_SPOKEN_LANGUAGE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_27_SPOKENLANGUAGE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_56_SPOKEN_LANGUAGE"("EVENT_DIM_i") :=
            
            "EVXEVENT_27_SPOKENLANGUAGE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_56_SPOKEN_LANGUA" :=
            
            "EVXEVENT_27_SPOKENLANGUAGE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_58_PLAN_TYPE"("EVENT_DIM_i") := 
            
            "QG_EVENT_15_PLANTYPE"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_58_PLAN_TYPE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_15_PLANTYPE"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_58_PLAN_TYPE"("EVENT_DIM_i") :=
            
            "QG_EVENT_15_PLANTYPE"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_58_PLAN_TYPE" :=
            
            "QG_EVENT_15_PLANTYPE"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_59_CREATE_USER"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_67_CREATEUSER"("EVXEVENT_i"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_59_CREATE_USER"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_67_CREATEUSER"("EVXEVENT_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_59_CREATE_USER"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_67_CREATEUSER"("EVXEVENT_i"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_59_CREATE_USER" :=
            
            RTRIM("EVXEVENT_67_CREATEUSER"("EVXEVENT_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_60_ONSITE_ATTENDED"("EVENT_DIM_i") := 
            
            "EVXEVENT_73_INSTOOLSTUDATTEND"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_60_ONSITE_ATTENDED"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_73_INSTOOLSTUDATTEND"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_60_ONSITE_ATTENDED"("EVENT_DIM_i") :=
            
            "EVXEVENT_73_INSTOOLSTUDATTEND"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_60_ONSITE_ATTEND" :=
            
            "EVXEVENT_73_INSTOOLSTUDATTEND"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_61_MEETING_DAYS"("EVENT_DIM_i") := 
            
            "EVXEVENT_19_MEETINGDAYS"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_61_MEETING_DAYS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_19_MEETINGDAYS"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_61_MEETING_DAYS"("EVENT_DIM_i") :=
            
            "EVXEVENT_19_MEETINGDAYS"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_61_MEETING_DAYS" :=
            
            "EVXEVENT_19_MEETINGDAYS"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_62_MANAGED_"("EVENT_DIM_i") := 
            
            "QG_EVENT_16_MANAGEDPROGRAMID"("EVXEVENT_i");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_62_MANAGED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_16_MANAGEDPROGRAMID"("EVXEVENT_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_62_MANAGED_"("EVENT_DIM_i") :=
            
            "QG_EVENT_16_MANAGEDPROGRAMID"("EVXEVENT_i");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_62_MANAGED_" :=
            
            "QG_EVENT_16_MANAGEDPROGRAMID"("EVXEVENT_i");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "EVENT_DIM_srk"("EVENT_DIM_i") := get_rowkey + "EVXEVENT_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_EVENT_DIM_srk" := get_rowkey + "EVXEVENT_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "EVENT_DIM_new" := TRUE;
                ELSE
                  "EVENT_DIM_i" := "EVENT_DIM_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "EVXEVENT_ER"('TRACE 117: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "EVXEVENT_i");
                  
                  "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
                  
                  IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("EVENT_DIM_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "EVENT_DIM_new" 
            AND (NOT "EVENT_DIM_nul") THEN
              "EVENT_DIM_ir"(dml_bsize) := "EVENT_DIM_i";
            	"EVENT_DIM_0_EVENT_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_0_EVENT_ID";
            	"EVENT_DIM_1_EVENT_DESC"("EVENT_DIM_i") := "SV_EVENT_DIM_1_EVENT_DESC";
            	"EVENT_DIM_2_COURSE_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_2_COURSE_ID";
            	"EVENT_DIM_3_LOCATION_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_3_LOCATION_ID";
            	"EVENT_DIM_5_START_DATE"("EVENT_DIM_i") := "SV_EVENT_DIM_5_START_DATE";
            	"EVENT_DIM_6_START_TIME"("EVENT_DIM_i") := "SV_EVENT_DIM_6_START_TIME";
            	"EVENT_DIM_7_END_DATE"("EVENT_DIM_i") := "SV_EVENT_DIM_7_END_DATE";
            	"EVENT_DIM_8_END_TIME"("EVENT_DIM_i") := "SV_EVENT_DIM_8_END_TIME";
            	"EVENT_DIM_9_STATUS"("EVENT_DIM_i") := "SV_EVENT_DIM_9_STATUS";
            	"EVENT_DIM_11_LOCATION_NAME"("EVENT_DIM_i") := "SV_EVENT_DIM_11_LOCATION_NAME";
            	"EVENT_DIM_12_ADDRESS1"("EVENT_DIM_i") := "SV_EVENT_DIM_12_ADDRESS1";
            	"EVENT_DIM_13_ADDRESS2"("EVENT_DIM_i") := "SV_EVENT_DIM_13_ADDRESS2";
            	"EVENT_DIM_15_CITY"("EVENT_DIM_i") := "SV_EVENT_DIM_15_CITY";
            	"EVENT_DIM_16_STATE"("EVENT_DIM_i") := "SV_EVENT_DIM_16_STATE";
            	"EVENT_DIM_17_ZIPCODE"("EVENT_DIM_i") := "SV_EVENT_DIM_17_ZIPCODE";
            	"EVENT_DIM_18_PROVINCE"("EVENT_DIM_i") := "SV_EVENT_DIM_18_PROVINCE";
            	"EVENT_DIM_19_COUNTRY"("EVENT_DIM_i") := "SV_EVENT_DIM_19_COUNTRY";
            	"EVENT_DIM_21_INSTRUCTOR1"("EVENT_DIM_i") := "SV_EVENT_DIM_21_INSTRUCTOR1";
            	"EVENT_DIM_22_INSTRUCTOR2"("EVENT_DIM_i") := "SV_EVENT_DIM_22_INSTRUCTOR2";
            	"EVENT_DIM_23_INSTRUCTOR3"("EVENT_DIM_i") := "SV_EVENT_DIM_23_INSTRUCTOR3";
            	"EVENT_DIM_24_CANCEL_DATE"("EVENT_DIM_i") := "SV_EVENT_DIM_24_CANCEL_DATE";
            	"EVENT_DIM_26_OPPORTUNITY_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_26_OPPORTUNITY_ID";
            	"EVENT_DIM_28_CREATION_DATE"("EVENT_DIM_i") := "SV_EVENT_DIM_28_CREATION_DATE";
            	"EVENT_DIM_29_LAST_UPDATE_DATE"("EVENT_DIM_i") := "SV_EVENT_DIM_29_LAST_UPDATE_DA";
            	"EVENT_DIM_34_GKDW_SOURCE"("EVENT_DIM_i") := "SV_EVENT_DIM_34_GKDW_SOURCE";
            	"EVENT_DIM_36_EVENT_CHANNEL"("EVENT_DIM_i") := "SV_EVENT_DIM_36_EVENT_CHANNEL";
            	"EVENT_DIM_37_EVENT_MODALITY"("EVENT_DIM_i") := "SV_EVENT_DIM_37_EVENT_MODALITY";
            	"EVENT_DIM_38_EVENT_PROD_LINE"("EVENT_DIM_i") := "SV_EVENT_DIM_38_EVENT_PROD_LI";
            	"EVENT_DIM_39_ORACLE_ITEM_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_39_ORACLE_ITEM_ID";
            	"EVENT_DIM_40_ORACLE_ITEM_NUM"("EVENT_DIM_i") := "SV_EVENT_DIM_40_ORACLE_ITEM_N";
            	"EVENT_DIM_41_COURSE_CODE"("EVENT_DIM_i") := "SV_EVENT_DIM_41_COURSE_CODE";
            	"EVENT_DIM_42_EVENT_TYPE"("EVENT_DIM_i") := "SV_EVENT_DIM_42_EVENT_TYPE";
            	"EVENT_DIM_43_CANCEL_REASON"("EVENT_DIM_i") := "SV_EVENT_DIM_43_CANCEL_REASON";
            	"EVENT_DIM_44_CAPACITY"("EVENT_DIM_i") := "SV_EVENT_DIM_44_CAPACITY";
            	"EVENT_DIM_45_FACILITY_CODE"("EVENT_DIM_i") := "SV_EVENT_DIM_45_FACILITY_CODE";
            	"EVENT_DI_46_FACILITY"("EVENT_DIM_i") := "SV_EVENT_DI_46_FACILITY";
            	"EVENT_DI_47_MEETING_"("EVENT_DIM_i") := "SV_EVENT_DI_47_MEETING_";
            	"EVENT_DIM_48_RESELLER_EVENT_ID"("EVENT_DIM_i") := "SV_EVENT_DIM_48_RESELLER_EVEN";
            	"EVENT_DIM_49_CONF_ENROLLMENTS"("EVENT_DIM_i") := "SV_EVENT_DIM_49_CONF_ENROLLMEN";
            	"EVENT_DIM_50_WAIT_ENROLLMENTS"("EVENT_DIM_i") := "SV_EVENT_DIM_50_WAIT_ENROLLMEN";
            	"EVENT_DI_51_ATTEND_E"("EVENT_DIM_i") := "SV_EVENT_DI_51_ATTEND_E";
            	"EVENT_DI_52_DID_NOT_"("EVENT_DIM_i") := "SV_EVENT_DI_52_DID_NOT_";
            	"EVENT_DIM_53_EVENT_NAME"("EVENT_DIM_i") := "SV_EVENT_DIM_53_EVENT_NAME";
            	"EVENT_DIM_54_OPS_COUNTRY"("EVENT_DIM_i") := "SV_EVENT_DIM_54_OPS_COUNTRY";
            	"EVENT_DIM_55_INTERNALFACILITY"("EVENT_DIM_i") := "SV_EVENT_DIM_55_INTERNALFACILI";
            	"EVENT_DIM_56_SPOKEN_LANGUAGE"("EVENT_DIM_i") := "SV_EVENT_DIM_56_SPOKEN_LANGUA";
            	"EVENT_DIM_58_PLAN_TYPE"("EVENT_DIM_i") := "SV_EVENT_DIM_58_PLAN_TYPE";
            	"EVENT_DIM_59_CREATE_USER"("EVENT_DIM_i") := "SV_EVENT_DIM_59_CREATE_USER";
            	"EVENT_DIM_60_ONSITE_ATTENDED"("EVENT_DIM_i") := "SV_EVENT_DIM_60_ONSITE_ATTEND";
            	"EVENT_DIM_61_MEETING_DAYS"("EVENT_DIM_i") := "SV_EVENT_DIM_61_MEETING_DAYS";
            	"EVENT_DI_62_MANAGED_"("EVENT_DIM_i") := "SV_EVENT_DI_62_MANAGED_";
              "EVENT_DIM_srk"("EVENT_DIM_i") := "SV_EVENT_DIM_srk";
              "EVENT_DIM_i" := "EVENT_DIM_i" + 1;
            ELSE
              "EVENT_DIM_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "EVXEVENT_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "EVXEVENT_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "EVXEVENT_ER"('TRACE 115: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "EVXEVENT_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "EVXEVENT_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "EVXEVENT_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "EVXEVENT_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "EVXEVENT_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "EVENT_DIM_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"EVENT_DIM_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"EVENT_DIM_ins",
        p_upd=>"EVENT_DIM_upd",
        p_del=>"EVENT_DIM_del",
        p_err=>"EVENT_DIM_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "EVENT_DIM_ins";
    get_updated  := get_updated  + "EVENT_DIM_upd";
    get_deleted  := get_deleted  + "EVENT_DIM_del";
    get_errors   := get_errors   + "EVENT_DIM_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "EVXEVENT_p";



-- Procedure "EVXEVENT_t" is the entry point for map "EVXEVENT_t"

PROCEDURE "EVXEVENT_t"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"EVXEVENT_t"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19A3A35678E040007F01006C7D,A41FFB19A3A05678E040007F01006C7D,A41FFB19A30A5678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"EVENT_DIM_id" NUMBER(22) := 0;
"EVENT_DIM_ins" NUMBER(22) := 0;
"EVENT_DIM_upd" NUMBER(22) := 0;
"EVENT_DIM_del" NUMBER(22) := 0;
"EVENT_DIM_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"EVENT_DIM_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"EVENT_DIM_ir"  index_redirect_array;
"SV_EVENT_DIM_srk" NUMBER;
"EVENT_DIM_new"  BOOLEAN;
"EVENT_DIM_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"EVXEVENT_si$1" NUMBER(22) := 0;

"EVXEVENT_i$1" NUMBER(22) := 0;


"EVENT_DIM_si" NUMBER(22) := 0;

"EVENT_DIM_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_EVXEVENT_0_EVXEVENTID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_EVXEVENT$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_9_DESCRIPTION$1" IS TABLE OF VARCHAR2(3000) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_24_EVXCOURSEID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_28_EVXFACILITYID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_21_STARTDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_10_STARTTIME$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_10_ENDDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_14_ENDTIME$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_2_EVENTSTATUS$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_15_FACILITYNAME$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_40_FACILITYADDRES" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_41_FACILITYADDRES" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_13_FACILITYCITY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_8_STATE$1" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_43_FACILITYPOSTAL$1" IS TABLE OF VARCHAR2(24) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_9_PROVINCE$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_11_COUNTRY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_1_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_2_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_GET_QG_I_3_INSTR_ID" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_65_CANCELDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_15_OPPORTUNITY_ID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_68_CREATEDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_70_MODIFYDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_4_COURSE_CH$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_5_COURSE_MOD$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_6_COURSE_PL$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_8_ORACLE_ITEM_" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_COURSE_DIM_9_ORACLE_ITEM_N" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_6_COURSECODE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_3_EVENTTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_66_CANCELREASON$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_18_MAXENROLLMENT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_46_FACILITYCODE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_71_FACILITY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_72_MEETINGDESCRIP" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_12_RESELLEREVENT" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_51_CONFIRME$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_23_WAITENROLLMENT$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_49_ATTENDEDENROLL" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_GET_ENRO_2_ENROLL_C" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_1_EVENTNAME$1" IS TABLE OF VARCHAR2(128) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_13_OPS_COUNTRY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_14_INTERNALFACILI" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_27_SPOKENLANGUAGE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_15_PLANTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_67_CREATEUSER$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_73_INSTOOLSTUDAT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVXEVENT_19_MEETINGDAYS$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_QG_EVENT_16_MANAGEDPROGRAM" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_0_EVENT_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_1_EVENT_DESC$1" IS TABLE OF VARCHAR2(3000) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_2_COURSE_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_3_LOCATION_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_5_START_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_6_START_TIME$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_7_END_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_8_END_TIME$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_9_STATUS$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_11_LOCATION_NAME$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_12_ADDRESS1$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_13_ADDRESS2$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_15_CITY$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_16_STATE$1" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_17_ZIPCODE$1" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_18_PROVINCE$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_19_COUNTRY$1" IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_21_INSTRUCTOR1$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_22_INSTRUCTOR2$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_23_INSTRUCTOR3$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_24_CANCEL_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_26_OPPORTUNITY_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_28_CREATION_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_29_LAST_UPDATE_" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_34_GKDW_SOURCE$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_36_EVENT_CHANNEL$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_37_EVENT_MODALI" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_38_EVENT_PROD_LI" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_39_ORACLE_ITEM_" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_40_ORACLE_ITEM_N" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_41_COURSE_CODE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_42_EVENT_TYPE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_43_CANCEL_REASON$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_44_CAPACITY$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_45_FACILITY_CODE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_46_FACILITY$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_47_MEETING_$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_48_RESELLER_EVEN" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_49_CONF_ENROLLM" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_50_WAIT_ENROLLM" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_51_ATTEND_E$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_52_DID_NOT_$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_53_EVENT_NAME$1" IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_54_OPS_COUNTRY$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_55_INTERNALFACI" IS TABLE OF CHAR(1) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_56_SPOKEN_LANGUA" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_58_PLAN_TYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_59_CREATE_USER$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_60_ONSITE_ATTEND" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DIM_61_MEETING_DAYS$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_EVENT_DI_62_MANAGED_$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_EVXEVENT_0_EVXEVENTID$1"  CHAR(12);
"SV_ROWKEY_EVXEVENT$1"  VARCHAR2(18);
"SV_EVXEVENT_9_DESCRIPTION$1"  VARCHAR2(3000);
"SV_EVXEVENT_24_EVXCOURSEID$1"  CHAR(12);
"SV_EVXEVENT_28_EVXFACILITYID$1"  CHAR(12);
"SV_EVXEVENT_21_STARTDATE$1"  DATE;
"SV_EXPR_10_STARTTIME$1"  VARCHAR2(20);
"SV_EVXEVENT_10_ENDDATE$1"  DATE;
"SV_EXPR_14_ENDTIME$1"  VARCHAR2(20);
"SV_EVXEVENT_2_EVENTSTATUS$1"  VARCHAR2(32);
"SV_EVXEVENT_15_FACILITYNAME$1"  VARCHAR2(64);
"SV_EVXEVENT_40_FACILITYADDR"  VARCHAR2(64);
"SV_EVXEVENT_41_FACILITYADDR"  VARCHAR2(64);
"SV_EVXEVENT_13_FACILITYCITY$1"  VARCHAR2(32);
"SV_EXPR_8_STATE$1"  VARCHAR2(60);
"SV_EVXEVENT_43_FACILITYPOST"  VARCHAR2(24);
"SV_EXPR_9_PROVINCE$1"  VARCHAR2(100);
"SV_EXPR_11_COUNTRY$1"  VARCHAR2(32);
"SV_GET_QG_I_1_INSTR_ID"  VARCHAR2(32767);
"SV_GET_QG_I_2_INSTR_ID"  VARCHAR2(32767);
"SV_GET_QG_I_3_INSTR_ID"  VARCHAR2(32767);
"SV_EVXEVENT_65_CANCELDATE$1"  DATE;
"SV_EXPR_15_OPPORTUNITY_ID$1"  CHAR(12);
"SV_EVXEVENT_68_CREATEDATE$1"  DATE;
"SV_EVXEVENT_70_MODIFYDATE$1"  DATE;
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_COURSE_DIM_4_COURSE_CH$1"  VARCHAR2(50);
"SV_COURSE_DIM_5_COURSE_MOD$1"  VARCHAR2(50);
"SV_COURSE_DIM_6_COURSE_PL$1"  VARCHAR2(50);
"SV_COURSE_DIM_8_ORACLE_ITEM_"  NUMBER;
"SV_COURSE_DIM_9_ORACLE_ITEM"  VARCHAR2(50);
"SV_EVXEVENT_6_COURSECODE$1"  VARCHAR2(32);
"SV_EVXEVENT_3_EVENTTYPE$1"  VARCHAR2(32);
"SV_EVXEVENT_66_CANCELREASON$1"  VARCHAR2(32);
"SV_EVXEVENT_18_MAXENROLLMENT$1"  NUMBER;
"SV_EVXEVENT_46_FACILITYCODE$1"  VARCHAR2(32);
"SV_EVXEVENT_71_FACILITY$1"  VARCHAR2(32);
"SV_EVXEVENT_72_MEETINGDESCR"  VARCHAR2(32);
"SV_QG_EVENT_12_RESELLEREVENT"  VARCHAR2(64);
"SV_EVXEVENT_51_CONFIRME$1"  NUMBER;
"SV_EVXEVENT_23_WAITENROLLME"  NUMBER;
"SV_EVXEVENT_49_ATTENDEDENRO"  NUMBER;
"SV_GET_ENRO_2_ENROLL_C"  NUMBER;
"SV_EVXEVENT_1_EVENTNAME$1"  VARCHAR2(128);
"SV_EXPR_13_OPS_COUNTRY$1"  VARCHAR2(32);
"SV_QG_EVENT_14_INTERNALFACI"  CHAR(1);
"SV_EVXEVENT_27_SPOKENLANGUA"  VARCHAR2(32);
"SV_QG_EVENT_15_PLANTYPE$1"  VARCHAR2(32);
"SV_EVXEVENT_67_CREATEUSER$1"  CHAR(12);
"SV_EVXEVENT_73_INSTOOLSTUDAT"  NUMBER;
"SV_EVXEVENT_19_MEETINGDAYS$1"  NUMBER;
"SV_QG_EVENT_16_MANAGEDPROGR"  VARCHAR2(32);
"SV_EVENT_DIM_0_EVENT_ID$1"  VARCHAR2(50);
"SV_EVENT_DIM_1_EVENT_DESC$1"  VARCHAR2(3000);
"SV_EVENT_DIM_2_COURSE_ID$1"  VARCHAR2(50);
"SV_EVENT_DIM_3_LOCATION_ID$1"  VARCHAR2(50);
"SV_EVENT_DIM_5_START_DATE$1"  DATE;
"SV_EVENT_DIM_6_START_TIME$1"  VARCHAR2(20);
"SV_EVENT_DIM_7_END_DATE$1"  DATE;
"SV_EVENT_DIM_8_END_TIME$1"  VARCHAR2(20);
"SV_EVENT_DIM_9_STATUS$1"  VARCHAR2(50);
"SV_EVENT_DIM_11_LOCATION_NA"  VARCHAR2(250);
"SV_EVENT_DIM_12_ADDRESS1$1"  VARCHAR2(250);
"SV_EVENT_DIM_13_ADDRESS2$1"  VARCHAR2(250);
"SV_EVENT_DIM_15_CITY$1"  VARCHAR2(250);
"SV_EVENT_DIM_16_STATE$1"  VARCHAR2(60);
"SV_EVENT_DIM_17_ZIPCODE$1"  VARCHAR2(60);
"SV_EVENT_DIM_18_PROVINCE$1"  VARCHAR2(100);
"SV_EVENT_DIM_19_COUNTRY$1"  VARCHAR2(60);
"SV_EVENT_DIM_21_INSTRUCTOR1$1"  VARCHAR2(250);
"SV_EVENT_DIM_22_INSTRUCTOR2$1"  VARCHAR2(250);
"SV_EVENT_DIM_23_INSTRUCTOR3$1"  VARCHAR2(250);
"SV_EVENT_DIM_24_CANCEL_DATE$1"  DATE;
"SV_EVENT_DIM_26_OPPORTUNITY_"  VARCHAR2(50);
"SV_EVENT_DIM_28_CREATION_DA"  DATE;
"SV_EVENT_DIM_29_LAST_UPDATE_"  DATE;
"SV_EVENT_DIM_34_GKDW_SOURCE$1"  VARCHAR2(20);
"SV_EVENT_DIM_36_EVENT_CHANN"  VARCHAR2(100);
"SV_EVENT_DIM_37_EVENT_MODALI"  VARCHAR2(100);
"SV_EVENT_DIM_38_EVENT_PROD_"  VARCHAR2(100);
"SV_EVENT_DIM_39_ORACLE_ITEM_"  NUMBER;
"SV_EVENT_DIM_40_ORACLE_ITEM"  VARCHAR2(100);
"SV_EVENT_DIM_41_COURSE_CODE$1"  VARCHAR2(50);
"SV_EVENT_DIM_42_EVENT_TYPE$1"  VARCHAR2(50);
"SV_EVENT_DIM_43_CANCEL_REAS"  VARCHAR2(50);
"SV_EVENT_DIM_44_CAPACITY$1"  NUMBER;
"SV_EVENT_DIM_45_FACILITY_CO"  VARCHAR2(50);
"SV_EVENT_DI_46_FACILITY$1"  VARCHAR2(50);
"SV_EVENT_DI_47_MEETING_$1"  VARCHAR2(50);
"SV_EVENT_DIM_48_RESELLER_EV"  VARCHAR2(100);
"SV_EVENT_DIM_49_CONF_ENROLLM"  NUMBER;
"SV_EVENT_DIM_50_WAIT_ENROLLM"  NUMBER;
"SV_EVENT_DI_51_ATTEND_E$1"  NUMBER;
"SV_EVENT_DI_52_DID_NOT_$1"  NUMBER;
"SV_EVENT_DIM_53_EVENT_NAME$1"  VARCHAR2(255);
"SV_EVENT_DIM_54_OPS_COUNTRY$1"  VARCHAR2(100);
"SV_EVENT_DIM_55_INTERNALFACI"  CHAR(1);
"SV_EVENT_DIM_56_SPOKEN_LANG"  VARCHAR2(50);
"SV_EVENT_DIM_58_PLAN_TYPE$1"  VARCHAR2(32);
"SV_EVENT_DIM_59_CREATE_USER$1"  VARCHAR2(20);
"SV_EVENT_DIM_60_ONSITE_ATTE"  NUMBER;
"SV_EVENT_DIM_61_MEETING_DAYS$1"  NUMBER;
"SV_EVENT_DI_62_MANAGED_$1"  VARCHAR2(50);

-- Bulk: intermediate collection variables
"EVXEVENT_0_EVXEVENTID$1" "T_EVXEVENT_0_EVXEVENTID$1";
"ROWKEY_EVXEVENT$1" "T_ROWKEY_EVXEVENT$1";
"EVXEVENT_9_DESCRIPTION$1" "T_EVXEVENT_9_DESCRIPTION$1";
"EVXEVENT_24_EVXCOURSEID$1" "T_EVXEVENT_24_EVXCOURSEID$1";
"EVXEVENT_28_EVXFACILITYID$1" "T_EVXEVENT_28_EVXFACILITYID$1";
"EVXEVENT_21_STARTDATE$1" "T_EVXEVENT_21_STARTDATE$1";
"EXPR_10_STARTTIME$1" "T_EXPR_10_STARTTIME$1";
"EVXEVENT_10_ENDDATE$1" "T_EVXEVENT_10_ENDDATE$1";
"EXPR_14_ENDTIME$1" "T_EXPR_14_ENDTIME$1";
"EVXEVENT_2_EVENTSTATUS$1" "T_EVXEVENT_2_EVENTSTATUS$1";
"EVXEVENT_15_FACILITYNAME$1" "T_EVXEVENT_15_FACILITYNAME$1";
"EVXEVENT_40_FACILITYADDRESS1$1" "T_EVXEVENT_40_FACILITYADDRES";
"EVXEVENT_41_FACILITYADDRESS2$1" "T_EVXEVENT_41_FACILITYADDRES";
"EVXEVENT_13_FACILITYCITY$1" "T_EVXEVENT_13_FACILITYCITY$1";
"EXPR_8_STATE$1" "T_EXPR_8_STATE$1";
"EVXEVENT_43_FACILITYPOSTAL$1" "T_EVXEVENT_43_FACILITYPOSTAL$1";
"EXPR_9_PROVINCE$1" "T_EXPR_9_PROVINCE$1";
"EXPR_11_COUNTRY$1" "T_EXPR_11_COUNTRY$1";
"GET_QG_I_1_INSTR_ID" "T_GET_QG_I_1_INSTR_ID";
"GET_QG_I_2_INSTR_ID" "T_GET_QG_I_2_INSTR_ID";
"GET_QG_I_3_INSTR_ID" "T_GET_QG_I_3_INSTR_ID";
"EVXEVENT_65_CANCELDATE$1" "T_EVXEVENT_65_CANCELDATE$1";
"EXPR_15_OPPORTUNITY_ID$1" "T_EXPR_15_OPPORTUNITY_ID$1";
"EVXEVENT_68_CREATEDATE$1" "T_EVXEVENT_68_CREATEDATE$1";
"EVXEVENT_70_MODIFYDATE$1" "T_EVXEVENT_70_MODIFYDATE$1";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"COURSE_DIM_4_COURSE_CH$1" "T_COURSE_DIM_4_COURSE_CH$1";
"COURSE_DIM_5_COURSE_MOD$1" "T_COURSE_DIM_5_COURSE_MOD$1";
"COURSE_DIM_6_COURSE_PL$1" "T_COURSE_DIM_6_COURSE_PL$1";
"COURSE_DIM_8_ORACLE_ITEM_ID$1" "T_COURSE_DIM_8_ORACLE_ITEM_";
"COURSE_DIM_9_ORACLE_ITEM_NUM$1" "T_COURSE_DIM_9_ORACLE_ITEM_N";
"EVXEVENT_6_COURSECODE$1" "T_EVXEVENT_6_COURSECODE$1";
"EVXEVENT_3_EVENTTYPE$1" "T_EVXEVENT_3_EVENTTYPE$1";
"EVXEVENT_66_CANCELREASON$1" "T_EVXEVENT_66_CANCELREASON$1";
"EVXEVENT_18_MAXENROLLMENT$1" "T_EVXEVENT_18_MAXENROLLMENT$1";
"EVXEVENT_46_FACILITYCODE$1" "T_EVXEVENT_46_FACILITYCODE$1";
"EVXEVENT_71_FACILITY$1" "T_EVXEVENT_71_FACILITY$1";
"EVXEVENT_72_MEETINGDESCRIPTI" "T_EVXEVENT_72_MEETINGDESCRIP";
"QG_EVENT_12_RESELLEREVENTID$1" "T_QG_EVENT_12_RESELLEREVENT";
"EVXEVENT_51_CONFIRME$1" "T_EVXEVENT_51_CONFIRME$1";
"EVXEVENT_23_WAITENROLLMENT$1" "T_EVXEVENT_23_WAITENROLLMENT$1";
"EVXEVENT_49_ATTENDEDENROLLME" "T_EVXEVENT_49_ATTENDEDENROLL";
"GET_ENRO_2_ENROLL_C" "T_GET_ENRO_2_ENROLL_C";
"EVXEVENT_1_EVENTNAME$1" "T_EVXEVENT_1_EVENTNAME$1";
"EXPR_13_OPS_COUNTRY$1" "T_EXPR_13_OPS_COUNTRY$1";
"QG_EVENT_14_INTERNALFACILITY$1" "T_QG_EVENT_14_INTERNALFACILI";
"EVXEVENT_27_SPOKENLANGUAGE$1" "T_EVXEVENT_27_SPOKENLANGUAGE$1";
"QG_EVENT_15_PLANTYPE$1" "T_QG_EVENT_15_PLANTYPE$1";
"EVXEVENT_67_CREATEUSER$1" "T_EVXEVENT_67_CREATEUSER$1";
"EVXEVENT_73_INSTOOLSTUDATTE" "T_EVXEVENT_73_INSTOOLSTUDAT";
"EVXEVENT_19_MEETINGDAYS$1" "T_EVXEVENT_19_MEETINGDAYS$1";
"QG_EVENT_16_MANAGEDPROGRAMID$1" "T_QG_EVENT_16_MANAGEDPROGRAM";
"EVENT_DIM_0_EVENT_ID$1" "T_EVENT_DIM_0_EVENT_ID$1";
"EVENT_DIM_1_EVENT_DESC$1" "T_EVENT_DIM_1_EVENT_DESC$1";
"EVENT_DIM_2_COURSE_ID$1" "T_EVENT_DIM_2_COURSE_ID$1";
"EVENT_DIM_3_LOCATION_ID$1" "T_EVENT_DIM_3_LOCATION_ID$1";
"EVENT_DIM_5_START_DATE$1" "T_EVENT_DIM_5_START_DATE$1";
"EVENT_DIM_6_START_TIME$1" "T_EVENT_DIM_6_START_TIME$1";
"EVENT_DIM_7_END_DATE$1" "T_EVENT_DIM_7_END_DATE$1";
"EVENT_DIM_8_END_TIME$1" "T_EVENT_DIM_8_END_TIME$1";
"EVENT_DIM_9_STATUS$1" "T_EVENT_DIM_9_STATUS$1";
"EVENT_DIM_11_LOCATION_NAME$1" "T_EVENT_DIM_11_LOCATION_NAME$1";
"EVENT_DIM_12_ADDRESS1$1" "T_EVENT_DIM_12_ADDRESS1$1";
"EVENT_DIM_13_ADDRESS2$1" "T_EVENT_DIM_13_ADDRESS2$1";
"EVENT_DIM_15_CITY$1" "T_EVENT_DIM_15_CITY$1";
"EVENT_DIM_16_STATE$1" "T_EVENT_DIM_16_STATE$1";
"EVENT_DIM_17_ZIPCODE$1" "T_EVENT_DIM_17_ZIPCODE$1";
"EVENT_DIM_18_PROVINCE$1" "T_EVENT_DIM_18_PROVINCE$1";
"EVENT_DIM_19_COUNTRY$1" "T_EVENT_DIM_19_COUNTRY$1";
"EVENT_DIM_21_INSTRUCTOR1$1" "T_EVENT_DIM_21_INSTRUCTOR1$1";
"EVENT_DIM_22_INSTRUCTOR2$1" "T_EVENT_DIM_22_INSTRUCTOR2$1";
"EVENT_DIM_23_INSTRUCTOR3$1" "T_EVENT_DIM_23_INSTRUCTOR3$1";
"EVENT_DIM_24_CANCEL_DATE$1" "T_EVENT_DIM_24_CANCEL_DATE$1";
"EVENT_DIM_26_OPPORTUNITY_ID$1" "T_EVENT_DIM_26_OPPORTUNITY_";
"EVENT_DIM_28_CREATION_DATE$1" "T_EVENT_DIM_28_CREATION_DATE$1";
"EVENT_DIM_29_LAST_UPDATE_DA" "T_EVENT_DIM_29_LAST_UPDATE_";
"EVENT_DIM_34_GKDW_SOURCE$1" "T_EVENT_DIM_34_GKDW_SOURCE$1";
"EVENT_DIM_36_EVENT_CHANNEL$1" "T_EVENT_DIM_36_EVENT_CHANNEL$1";
"EVENT_DIM_37_EVENT_MODALITY$1" "T_EVENT_DIM_37_EVENT_MODALI";
"EVENT_DIM_38_EVENT_PROD_LINE$1" "T_EVENT_DIM_38_EVENT_PROD_LI";
"EVENT_DIM_39_ORACLE_ITEM_ID$1" "T_EVENT_DIM_39_ORACLE_ITEM_";
"EVENT_DIM_40_ORACLE_ITEM_NUM$1" "T_EVENT_DIM_40_ORACLE_ITEM_N";
"EVENT_DIM_41_COURSE_CODE$1" "T_EVENT_DIM_41_COURSE_CODE$1";
"EVENT_DIM_42_EVENT_TYPE$1" "T_EVENT_DIM_42_EVENT_TYPE$1";
"EVENT_DIM_43_CANCEL_REASON$1" "T_EVENT_DIM_43_CANCEL_REASON$1";
"EVENT_DIM_44_CAPACITY$1" "T_EVENT_DIM_44_CAPACITY$1";
"EVENT_DIM_45_FACILITY_CODE$1" "T_EVENT_DIM_45_FACILITY_CODE$1";
"EVENT_DI_46_FACILITY$1" "T_EVENT_DI_46_FACILITY$1";
"EVENT_DI_47_MEETING_$1" "T_EVENT_DI_47_MEETING_$1";
"EVENT_DIM_48_RESELLER_EVENT_" "T_EVENT_DIM_48_RESELLER_EVEN";
"EVENT_DIM_49_CONF_ENROLLMEN" "T_EVENT_DIM_49_CONF_ENROLLM";
"EVENT_DIM_50_WAIT_ENROLLMEN" "T_EVENT_DIM_50_WAIT_ENROLLM";
"EVENT_DI_51_ATTEND_E$1" "T_EVENT_DI_51_ATTEND_E$1";
"EVENT_DI_52_DID_NOT_$1" "T_EVENT_DI_52_DID_NOT_$1";
"EVENT_DIM_53_EVENT_NAME$1" "T_EVENT_DIM_53_EVENT_NAME$1";
"EVENT_DIM_54_OPS_COUNTRY$1" "T_EVENT_DIM_54_OPS_COUNTRY$1";
"EVENT_DIM_55_INTERNALFACILI" "T_EVENT_DIM_55_INTERNALFACI";
"EVENT_DIM_56_SPOKEN_LANGUAGE$1" "T_EVENT_DIM_56_SPOKEN_LANGUA";
"EVENT_DIM_58_PLAN_TYPE$1" "T_EVENT_DIM_58_PLAN_TYPE$1";
"EVENT_DIM_59_CREATE_USER$1" "T_EVENT_DIM_59_CREATE_USER$1";
"EVENT_DIM_60_ONSITE_ATTENDED$1" "T_EVENT_DIM_60_ONSITE_ATTEND";
"EVENT_DIM_61_MEETING_DAYS$1" "T_EVENT_DIM_61_MEETING_DAYS$1";
"EVENT_DI_62_MANAGED_$1" "T_EVENT_DI_62_MANAGED_$1";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_ES$1"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_0_EVXEVENTID',0,80),
    p_value=>SUBSTRB("EVXEVENT_0_EVXEVENTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_9_DESCRIPTION',0,80),
    p_value=>SUBSTRB("EVXEVENT_9_DESCRIPTION$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_24_EVXCOURSEID',0,80),
    p_value=>SUBSTRB("EVXEVENT_24_EVXCOURSEID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_28_EVXFACILITYID',0,80),
    p_value=>SUBSTRB("EVXEVENT_28_EVXFACILITYID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_21_STARTDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_21_STARTDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_10_STARTTIME',0,80),
    p_value=>SUBSTRB("EXPR_10_STARTTIME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_10_ENDDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_10_ENDDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_14_ENDTIME',0,80),
    p_value=>SUBSTRB("EXPR_14_ENDTIME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_2_EVENTSTATUS',0,80),
    p_value=>SUBSTRB("EVXEVENT_2_EVENTSTATUS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_15_FACILITYNAME',0,80),
    p_value=>SUBSTRB("EVXEVENT_15_FACILITYNAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_40_FACILITYADDRESS1',0,80),
    p_value=>SUBSTRB("EVXEVENT_40_FACILITYADDRESS1$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_41_FACILITYADDRESS2',0,80),
    p_value=>SUBSTRB("EVXEVENT_41_FACILITYADDRESS2$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_13_FACILITYCITY',0,80),
    p_value=>SUBSTRB("EVXEVENT_13_FACILITYCITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_8_STATE',0,80),
    p_value=>SUBSTRB("EXPR_8_STATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_43_FACILITYPOSTAL',0,80),
    p_value=>SUBSTRB("EVXEVENT_43_FACILITYPOSTAL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_9_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_9_PROVINCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_11_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_11_COUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_65_CANCELDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_65_CANCELDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_15_OPPORTUNITY_ID',0,80),
    p_value=>SUBSTRB("EXPR_15_OPPORTUNITY_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_68_CREATEDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_68_CREATEDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_70_MODIFYDATE',0,80),
    p_value=>SUBSTRB("EVXEVENT_70_MODIFYDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_4_COURSE_CH',0,80),
    p_value=>SUBSTRB("COURSE_DIM_4_COURSE_CH$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_5_COURSE_MOD',0,80),
    p_value=>SUBSTRB("COURSE_DIM_5_COURSE_MOD$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_6_COURSE_PL',0,80),
    p_value=>SUBSTRB("COURSE_DIM_6_COURSE_PL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_8_ORACLE_ITEM_ID',0,80),
    p_value=>SUBSTRB("COURSE_DIM_8_ORACLE_ITEM_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('COURSE_DIM_9_ORACLE_ITEM_NUM',0,80),
    p_value=>SUBSTRB("COURSE_DIM_9_ORACLE_ITEM_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_6_COURSECODE',0,80),
    p_value=>SUBSTRB("EVXEVENT_6_COURSECODE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_3_EVENTTYPE',0,80),
    p_value=>SUBSTRB("EVXEVENT_3_EVENTTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_66_CANCELREASON',0,80),
    p_value=>SUBSTRB("EVXEVENT_66_CANCELREASON$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_18_MAXENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_18_MAXENROLLMENT$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_46_FACILITYCODE',0,80),
    p_value=>SUBSTRB("EVXEVENT_46_FACILITYCODE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_71_FACILITY',0,80),
    p_value=>SUBSTRB("EVXEVENT_71_FACILITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_72_MEETINGDESCRIPTION',0,80),
    p_value=>SUBSTRB("EVXEVENT_72_MEETINGDESCRIPTI"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_12_RESELLEREVENTID',0,80),
    p_value=>SUBSTRB("QG_EVENT_12_RESELLEREVENTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_51_CONFIRME',0,80),
    p_value=>SUBSTRB("EVXEVENT_51_CONFIRME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_23_WAITENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_23_WAITENROLLMENT$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_49_ATTENDEDENROLLMENT',0,80),
    p_value=>SUBSTRB("EVXEVENT_49_ATTENDEDENROLLME"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_1_EVENTNAME',0,80),
    p_value=>SUBSTRB("EVXEVENT_1_EVENTNAME$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EXPR_13_OPS_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_13_OPS_COUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_14_INTERNALFACILITY',0,80),
    p_value=>SUBSTRB("QG_EVENT_14_INTERNALFACILITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_27_SPOKENLANGUAGE',0,80),
    p_value=>SUBSTRB("EVXEVENT_27_SPOKENLANGUAGE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_15_PLANTYPE',0,80),
    p_value=>SUBSTRB("QG_EVENT_15_PLANTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_67_CREATEUSER',0,80),
    p_value=>SUBSTRB("EVXEVENT_67_CREATEUSER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_73_INSTOOLSTUDATTEND',0,80),
    p_value=>SUBSTRB("EVXEVENT_73_INSTOOLSTUDATTE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('EVXEVENT_19_MEETINGDAYS',0,80),
    p_value=>SUBSTRB("EVXEVENT_19_MEETINGDAYS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',0,80),
    p_column=>SUBSTR('QG_EVENT_16_MANAGEDPROGRAMID',0,80),
    p_value=>SUBSTRB("QG_EVENT_16_MANAGEDPROGRAMID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "EVXEVENT_ES$1";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 118: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "EVXEVENT_ES$1"(p_error_index);
  END IF;
END "EVXEVENT_ER$1";



---------------------------------------------------------------------------
-- Procedure "EVXEVENT_SU$1" opens and initializes data source
-- for map "EVXEVENT_t"
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "EVXEVENT_c$1"%ISOPEN) THEN
    OPEN "EVXEVENT_c$1";
  END IF;
  get_read_success := TRUE;
END "EVXEVENT_SU$1";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_RD$1" fetches a bulk of rows from
--   the data source for map "EVXEVENT_t"
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "EVXEVENT_0_EVXEVENTID$1".DELETE;
    "EVXEVENT_9_DESCRIPTION$1".DELETE;
    "EVXEVENT_24_EVXCOURSEID$1".DELETE;
    "EVXEVENT_28_EVXFACILITYID$1".DELETE;
    "EVXEVENT_21_STARTDATE$1".DELETE;
    "EXPR_10_STARTTIME$1".DELETE;
    "EVXEVENT_10_ENDDATE$1".DELETE;
    "EXPR_14_ENDTIME$1".DELETE;
    "EVXEVENT_2_EVENTSTATUS$1".DELETE;
    "EVXEVENT_15_FACILITYNAME$1".DELETE;
    "EVXEVENT_40_FACILITYADDRESS1$1".DELETE;
    "EVXEVENT_41_FACILITYADDRESS2$1".DELETE;
    "EVXEVENT_13_FACILITYCITY$1".DELETE;
    "EXPR_8_STATE$1".DELETE;
    "EVXEVENT_43_FACILITYPOSTAL$1".DELETE;
    "EXPR_9_PROVINCE$1".DELETE;
    "EXPR_11_COUNTRY$1".DELETE;
    "EVXEVENT_65_CANCELDATE$1".DELETE;
    "EXPR_15_OPPORTUNITY_ID$1".DELETE;
    "EVXEVENT_68_CREATEDATE$1".DELETE;
    "EVXEVENT_70_MODIFYDATE$1".DELETE;
    "COURSE_DIM_4_COURSE_CH$1".DELETE;
    "COURSE_DIM_5_COURSE_MOD$1".DELETE;
    "COURSE_DIM_6_COURSE_PL$1".DELETE;
    "COURSE_DIM_8_ORACLE_ITEM_ID$1".DELETE;
    "COURSE_DIM_9_ORACLE_ITEM_NUM$1".DELETE;
    "EVXEVENT_6_COURSECODE$1".DELETE;
    "EVXEVENT_3_EVENTTYPE$1".DELETE;
    "EVXEVENT_66_CANCELREASON$1".DELETE;
    "EVXEVENT_18_MAXENROLLMENT$1".DELETE;
    "EVXEVENT_46_FACILITYCODE$1".DELETE;
    "EVXEVENT_71_FACILITY$1".DELETE;
    "EVXEVENT_72_MEETINGDESCRIPTI".DELETE;
    "QG_EVENT_12_RESELLEREVENTID$1".DELETE;
    "EVXEVENT_51_CONFIRME$1".DELETE;
    "EVXEVENT_23_WAITENROLLMENT$1".DELETE;
    "EVXEVENT_49_ATTENDEDENROLLME".DELETE;
    "EVXEVENT_1_EVENTNAME$1".DELETE;
    "EXPR_13_OPS_COUNTRY$1".DELETE;
    "QG_EVENT_14_INTERNALFACILITY$1".DELETE;
    "EVXEVENT_27_SPOKENLANGUAGE$1".DELETE;
    "QG_EVENT_15_PLANTYPE$1".DELETE;
    "EVXEVENT_67_CREATEUSER$1".DELETE;
    "EVXEVENT_73_INSTOOLSTUDATTE".DELETE;
    "EVXEVENT_19_MEETINGDAYS$1".DELETE;
    "QG_EVENT_16_MANAGEDPROGRAMID$1".DELETE;

    FETCH
      "EVXEVENT_c$1"
    BULK COLLECT INTO
      "EVXEVENT_0_EVXEVENTID$1",
      "EVXEVENT_9_DESCRIPTION$1",
      "EVXEVENT_24_EVXCOURSEID$1",
      "EVXEVENT_28_EVXFACILITYID$1",
      "EVXEVENT_21_STARTDATE$1",
      "EXPR_10_STARTTIME$1",
      "EVXEVENT_10_ENDDATE$1",
      "EXPR_14_ENDTIME$1",
      "EVXEVENT_2_EVENTSTATUS$1",
      "EVXEVENT_15_FACILITYNAME$1",
      "EVXEVENT_40_FACILITYADDRESS1$1",
      "EVXEVENT_41_FACILITYADDRESS2$1",
      "EVXEVENT_13_FACILITYCITY$1",
      "EXPR_8_STATE$1",
      "EVXEVENT_43_FACILITYPOSTAL$1",
      "EXPR_9_PROVINCE$1",
      "EXPR_11_COUNTRY$1",
      "EVXEVENT_65_CANCELDATE$1",
      "EXPR_15_OPPORTUNITY_ID$1",
      "EVXEVENT_68_CREATEDATE$1",
      "EVXEVENT_70_MODIFYDATE$1",
      "COURSE_DIM_4_COURSE_CH$1",
      "COURSE_DIM_5_COURSE_MOD$1",
      "COURSE_DIM_6_COURSE_PL$1",
      "COURSE_DIM_8_ORACLE_ITEM_ID$1",
      "COURSE_DIM_9_ORACLE_ITEM_NUM$1",
      "EVXEVENT_6_COURSECODE$1",
      "EVXEVENT_3_EVENTTYPE$1",
      "EVXEVENT_66_CANCELREASON$1",
      "EVXEVENT_18_MAXENROLLMENT$1",
      "EVXEVENT_46_FACILITYCODE$1",
      "EVXEVENT_71_FACILITY$1",
      "EVXEVENT_72_MEETINGDESCRIPTI",
      "QG_EVENT_12_RESELLEREVENTID$1",
      "EVXEVENT_51_CONFIRME$1",
      "EVXEVENT_23_WAITENROLLMENT$1",
      "EVXEVENT_49_ATTENDEDENROLLME",
      "EVXEVENT_1_EVENTNAME$1",
      "EXPR_13_OPS_COUNTRY$1",
      "QG_EVENT_14_INTERNALFACILITY$1",
      "EVXEVENT_27_SPOKENLANGUAGE$1",
      "QG_EVENT_15_PLANTYPE$1",
      "EVXEVENT_67_CREATEUSER$1",
      "EVXEVENT_73_INSTOOLSTUDATTE",
      "EVXEVENT_19_MEETINGDAYS$1",
      "QG_EVENT_16_MANAGEDPROGRAMID$1"
    LIMIT get_bulk_size;

    IF "EVXEVENT_c$1"%NOTFOUND AND "EVXEVENT_0_EVXEVENTID$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "EVXEVENT_0_EVXEVENTID$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "EVXEVENT_0_EVXEVENTID$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 119: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "EVXEVENT_RD$1";

---------------------------------------------------------------------------
-- Procedure "EVXEVENT_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "EVXEVENT_DML$1"(si NUMBER, firstround BOOLEAN) IS
  "EVENT_DIM_ins0" NUMBER := "EVENT_DIM_ins";
  "EVENT_DIM_upd0" NUMBER := "EVENT_DIM_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "EVENT_DIM_St" THEN
  -- Update/Insert DML for "EVENT_DIM"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"EVENT_DIM"';
    get_audit_detail_id := "EVENT_DIM_id";
    "EVENT_DIM_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "EVENT_DIM_i" > get_bulk_size 
   OR "EVXEVENT_c$1"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "EVENT_DIM_si".."EVENT_DIM_i" - 1 
            UPDATE
              "EVENT_DIM"
            SET
  
  						"EVENT_DIM"."EVENT_DESC" = "EVENT_DIM_1_EVENT_DESC$1"
  (i),						"EVENT_DIM"."COURSE_ID" = "EVENT_DIM_2_COURSE_ID$1"
  (i),						"EVENT_DIM"."LOCATION_ID" = "EVENT_DIM_3_LOCATION_ID$1"
  (i),						"EVENT_DIM"."START_DATE" = "EVENT_DIM_5_START_DATE$1"
  (i),						"EVENT_DIM"."START_TIME" = "EVENT_DIM_6_START_TIME$1"
  (i),						"EVENT_DIM"."END_DATE" = "EVENT_DIM_7_END_DATE$1"
  (i),						"EVENT_DIM"."END_TIME" = "EVENT_DIM_8_END_TIME$1"
  (i),						"EVENT_DIM"."STATUS" = "EVENT_DIM_9_STATUS$1"
  (i),						"EVENT_DIM"."LOCATION_NAME" = "EVENT_DIM_11_LOCATION_NAME$1"
  (i),						"EVENT_DIM"."ADDRESS1" = "EVENT_DIM_12_ADDRESS1$1"
  (i),						"EVENT_DIM"."ADDRESS2" = "EVENT_DIM_13_ADDRESS2$1"
  (i),						"EVENT_DIM"."CITY" = "EVENT_DIM_15_CITY$1"
  (i),						"EVENT_DIM"."STATE" = "EVENT_DIM_16_STATE$1"
  (i),						"EVENT_DIM"."ZIPCODE" = "EVENT_DIM_17_ZIPCODE$1"
  (i),						"EVENT_DIM"."PROVINCE" = "EVENT_DIM_18_PROVINCE$1"
  (i),						"EVENT_DIM"."COUNTRY" = "EVENT_DIM_19_COUNTRY$1"
  (i),						"EVENT_DIM"."INSTRUCTOR1" = "EVENT_DIM_21_INSTRUCTOR1$1"
  (i),						"EVENT_DIM"."INSTRUCTOR2" = "EVENT_DIM_22_INSTRUCTOR2$1"
  (i),						"EVENT_DIM"."INSTRUCTOR3" = "EVENT_DIM_23_INSTRUCTOR3$1"
  (i),						"EVENT_DIM"."CANCEL_DATE" = "EVENT_DIM_24_CANCEL_DATE$1"
  (i),						"EVENT_DIM"."OPPORTUNITY_ID" = "EVENT_DIM_26_OPPORTUNITY_ID$1"
  (i),						"EVENT_DIM"."CREATION_DATE" = "EVENT_DIM_28_CREATION_DATE$1"
  (i),						"EVENT_DIM"."LAST_UPDATE_DATE" = "EVENT_DIM_29_LAST_UPDATE_DA"
  (i),						"EVENT_DIM"."GKDW_SOURCE" = "EVENT_DIM_34_GKDW_SOURCE$1"
  (i),						"EVENT_DIM"."EVENT_CHANNEL" = "EVENT_DIM_36_EVENT_CHANNEL$1"
  (i),						"EVENT_DIM"."EVENT_MODALITY" = "EVENT_DIM_37_EVENT_MODALITY$1"
  (i),						"EVENT_DIM"."EVENT_PROD_LINE" = "EVENT_DIM_38_EVENT_PROD_LINE$1"
  (i),						"EVENT_DIM"."ORACLE_ITEM_ID" = "EVENT_DIM_39_ORACLE_ITEM_ID$1"
  (i),						"EVENT_DIM"."ORACLE_ITEM_NUM" = "EVENT_DIM_40_ORACLE_ITEM_NUM$1"
  (i),						"EVENT_DIM"."COURSE_CODE" = "EVENT_DIM_41_COURSE_CODE$1"
  (i),						"EVENT_DIM"."EVENT_TYPE" = "EVENT_DIM_42_EVENT_TYPE$1"
  (i),						"EVENT_DIM"."CANCEL_REASON" = "EVENT_DIM_43_CANCEL_REASON$1"
  (i),						"EVENT_DIM"."CAPACITY" = "EVENT_DIM_44_CAPACITY$1"
  (i),						"EVENT_DIM"."FACILITY_CODE" = "EVENT_DIM_45_FACILITY_CODE$1"
  (i),						"EVENT_DIM"."FACILITY_REGION_METRO" = "EVENT_DI_46_FACILITY$1"
  (i),						"EVENT_DIM"."MEETING_DESCRIPTION" = "EVENT_DI_47_MEETING_$1"
  (i),						"EVENT_DIM"."RESELLER_EVENT_ID" = "EVENT_DIM_48_RESELLER_EVENT_"
  (i),						"EVENT_DIM"."CONF_ENROLLMENTS" = "EVENT_DIM_49_CONF_ENROLLMEN"
  (i),						"EVENT_DIM"."WAIT_ENROLLMENTS" = "EVENT_DIM_50_WAIT_ENROLLMEN"
  (i),						"EVENT_DIM"."ATTEND_ENROLLMENTS" = "EVENT_DI_51_ATTEND_E$1"
  (i),						"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS" = "EVENT_DI_52_DID_NOT_$1"
  (i),						"EVENT_DIM"."EVENT_NAME" = "EVENT_DIM_53_EVENT_NAME$1"
  (i),						"EVENT_DIM"."OPS_COUNTRY" = "EVENT_DIM_54_OPS_COUNTRY$1"
  (i),						"EVENT_DIM"."INTERNALFACILITY" = "EVENT_DIM_55_INTERNALFACILI"
  (i),						"EVENT_DIM"."SPOKEN_LANGUAGE" = "EVENT_DIM_56_SPOKEN_LANGUAGE$1"
  (i),						"EVENT_DIM"."PLAN_TYPE" = "EVENT_DIM_58_PLAN_TYPE$1"
  (i),						"EVENT_DIM"."CREATE_USER" = "EVENT_DIM_59_CREATE_USER$1"
  (i),						"EVENT_DIM"."ONSITE_ATTENDED" = "EVENT_DIM_60_ONSITE_ATTENDED$1"
  (i),						"EVENT_DIM"."MEETING_DAYS" = "EVENT_DIM_61_MEETING_DAYS$1"
  (i),						"EVENT_DIM"."MANAGED_PROGRAM_ID" = "EVENT_DI_62_MANAGED_$1"
  (i)
    
            WHERE
  
  						"EVENT_DIM"."EVENT_ID" = "EVENT_DIM_0_EVENT_ID$1"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "EVENT_DIM_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "EVENT_DIM_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "EVENT_DIM_upd" := "EVENT_DIM_upd" + get_rowid.COUNT;
          "EVENT_DIM_si" := "EVENT_DIM_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "EVENT_DIM_si".."EVENT_DIM_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "EVENT_DIM_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "EVENT_DIM_upd" := "EVENT_DIM_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "EVENT_DIM_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "EVENT_DIM"
                SET
  
  								"EVENT_DIM"."EVENT_DESC" = "EVENT_DIM_1_EVENT_DESC$1"
  (last_successful_index),								"EVENT_DIM"."COURSE_ID" = "EVENT_DIM_2_COURSE_ID$1"
  (last_successful_index),								"EVENT_DIM"."LOCATION_ID" = "EVENT_DIM_3_LOCATION_ID$1"
  (last_successful_index),								"EVENT_DIM"."START_DATE" = "EVENT_DIM_5_START_DATE$1"
  (last_successful_index),								"EVENT_DIM"."START_TIME" = "EVENT_DIM_6_START_TIME$1"
  (last_successful_index),								"EVENT_DIM"."END_DATE" = "EVENT_DIM_7_END_DATE$1"
  (last_successful_index),								"EVENT_DIM"."END_TIME" = "EVENT_DIM_8_END_TIME$1"
  (last_successful_index),								"EVENT_DIM"."STATUS" = "EVENT_DIM_9_STATUS$1"
  (last_successful_index),								"EVENT_DIM"."LOCATION_NAME" = "EVENT_DIM_11_LOCATION_NAME$1"
  (last_successful_index),								"EVENT_DIM"."ADDRESS1" = "EVENT_DIM_12_ADDRESS1$1"
  (last_successful_index),								"EVENT_DIM"."ADDRESS2" = "EVENT_DIM_13_ADDRESS2$1"
  (last_successful_index),								"EVENT_DIM"."CITY" = "EVENT_DIM_15_CITY$1"
  (last_successful_index),								"EVENT_DIM"."STATE" = "EVENT_DIM_16_STATE$1"
  (last_successful_index),								"EVENT_DIM"."ZIPCODE" = "EVENT_DIM_17_ZIPCODE$1"
  (last_successful_index),								"EVENT_DIM"."PROVINCE" = "EVENT_DIM_18_PROVINCE$1"
  (last_successful_index),								"EVENT_DIM"."COUNTRY" = "EVENT_DIM_19_COUNTRY$1"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR1" = "EVENT_DIM_21_INSTRUCTOR1$1"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR2" = "EVENT_DIM_22_INSTRUCTOR2$1"
  (last_successful_index),								"EVENT_DIM"."INSTRUCTOR3" = "EVENT_DIM_23_INSTRUCTOR3$1"
  (last_successful_index),								"EVENT_DIM"."CANCEL_DATE" = "EVENT_DIM_24_CANCEL_DATE$1"
  (last_successful_index),								"EVENT_DIM"."OPPORTUNITY_ID" = "EVENT_DIM_26_OPPORTUNITY_ID$1"
  (last_successful_index),								"EVENT_DIM"."CREATION_DATE" = "EVENT_DIM_28_CREATION_DATE$1"
  (last_successful_index),								"EVENT_DIM"."LAST_UPDATE_DATE" = "EVENT_DIM_29_LAST_UPDATE_DA"
  (last_successful_index),								"EVENT_DIM"."GKDW_SOURCE" = "EVENT_DIM_34_GKDW_SOURCE$1"
  (last_successful_index),								"EVENT_DIM"."EVENT_CHANNEL" = "EVENT_DIM_36_EVENT_CHANNEL$1"
  (last_successful_index),								"EVENT_DIM"."EVENT_MODALITY" = "EVENT_DIM_37_EVENT_MODALITY$1"
  (last_successful_index),								"EVENT_DIM"."EVENT_PROD_LINE" = "EVENT_DIM_38_EVENT_PROD_LINE$1"
  (last_successful_index),								"EVENT_DIM"."ORACLE_ITEM_ID" = "EVENT_DIM_39_ORACLE_ITEM_ID$1"
  (last_successful_index),								"EVENT_DIM"."ORACLE_ITEM_NUM" = "EVENT_DIM_40_ORACLE_ITEM_NUM$1"
  (last_successful_index),								"EVENT_DIM"."COURSE_CODE" = "EVENT_DIM_41_COURSE_CODE$1"
  (last_successful_index),								"EVENT_DIM"."EVENT_TYPE" = "EVENT_DIM_42_EVENT_TYPE$1"
  (last_successful_index),								"EVENT_DIM"."CANCEL_REASON" = "EVENT_DIM_43_CANCEL_REASON$1"
  (last_successful_index),								"EVENT_DIM"."CAPACITY" = "EVENT_DIM_44_CAPACITY$1"
  (last_successful_index),								"EVENT_DIM"."FACILITY_CODE" = "EVENT_DIM_45_FACILITY_CODE$1"
  (last_successful_index),								"EVENT_DIM"."FACILITY_REGION_METRO" = "EVENT_DI_46_FACILITY$1"
  (last_successful_index),								"EVENT_DIM"."MEETING_DESCRIPTION" = "EVENT_DI_47_MEETING_$1"
  (last_successful_index),								"EVENT_DIM"."RESELLER_EVENT_ID" = "EVENT_DIM_48_RESELLER_EVENT_"
  (last_successful_index),								"EVENT_DIM"."CONF_ENROLLMENTS" = "EVENT_DIM_49_CONF_ENROLLMEN"
  (last_successful_index),								"EVENT_DIM"."WAIT_ENROLLMENTS" = "EVENT_DIM_50_WAIT_ENROLLMEN"
  (last_successful_index),								"EVENT_DIM"."ATTEND_ENROLLMENTS" = "EVENT_DI_51_ATTEND_E$1"
  (last_successful_index),								"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS" = "EVENT_DI_52_DID_NOT_$1"
  (last_successful_index),								"EVENT_DIM"."EVENT_NAME" = "EVENT_DIM_53_EVENT_NAME$1"
  (last_successful_index),								"EVENT_DIM"."OPS_COUNTRY" = "EVENT_DIM_54_OPS_COUNTRY$1"
  (last_successful_index),								"EVENT_DIM"."INTERNALFACILITY" = "EVENT_DIM_55_INTERNALFACILI"
  (last_successful_index),								"EVENT_DIM"."SPOKEN_LANGUAGE" = "EVENT_DIM_56_SPOKEN_LANGUAGE$1"
  (last_successful_index),								"EVENT_DIM"."PLAN_TYPE" = "EVENT_DIM_58_PLAN_TYPE$1"
  (last_successful_index),								"EVENT_DIM"."CREATE_USER" = "EVENT_DIM_59_CREATE_USER$1"
  (last_successful_index),								"EVENT_DIM"."ONSITE_ATTENDED" = "EVENT_DIM_60_ONSITE_ATTENDED$1"
  (last_successful_index),								"EVENT_DIM"."MEETING_DAYS" = "EVENT_DIM_61_MEETING_DAYS$1"
  (last_successful_index),								"EVENT_DIM"."MANAGED_PROGRAM_ID" = "EVENT_DI_62_MANAGED_$1"
  (last_successful_index)
  
                WHERE
  
  								"EVENT_DIM"."EVENT_ID" = "EVENT_DIM_0_EVENT_ID$1"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "EVENT_DIM_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_DESC"',0,80),SUBSTRB("EVENT_DIM_1_EVENT_DESC$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_ID"',0,80),SUBSTRB("EVENT_DIM_2_COURSE_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_ID"',0,80),SUBSTRB("EVENT_DIM_3_LOCATION_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_DATE"',0,80),SUBSTRB("EVENT_DIM_5_START_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_TIME"',0,80),SUBSTRB("EVENT_DIM_6_START_TIME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_DATE"',0,80),SUBSTRB("EVENT_DIM_7_END_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_TIME"',0,80),SUBSTRB("EVENT_DIM_8_END_TIME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATUS"',0,80),SUBSTRB("EVENT_DIM_9_STATUS$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_NAME"',0,80),SUBSTRB("EVENT_DIM_11_LOCATION_NAME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS1"',0,80),SUBSTRB("EVENT_DIM_12_ADDRESS1$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS2"',0,80),SUBSTRB("EVENT_DIM_13_ADDRESS2$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CITY"',0,80),SUBSTRB("EVENT_DIM_15_CITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATE"',0,80),SUBSTRB("EVENT_DIM_16_STATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ZIPCODE"',0,80),SUBSTRB("EVENT_DIM_17_ZIPCODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PROVINCE"',0,80),SUBSTRB("EVENT_DIM_18_PROVINCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COUNTRY"',0,80),SUBSTRB("EVENT_DIM_19_COUNTRY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR1"',0,80),SUBSTRB("EVENT_DIM_21_INSTRUCTOR1$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR2"',0,80),SUBSTRB("EVENT_DIM_22_INSTRUCTOR2$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR3"',0,80),SUBSTRB("EVENT_DIM_23_INSTRUCTOR3$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_DATE"',0,80),SUBSTRB("EVENT_DIM_24_CANCEL_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("EVENT_DIM_26_OPPORTUNITY_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATION_DATE"',0,80),SUBSTRB("EVENT_DIM_28_CREATION_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("EVENT_DIM_29_LAST_UPDATE_DA"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("EVENT_DIM_34_GKDW_SOURCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_CHANNEL"',0,80),SUBSTRB("EVENT_DIM_36_EVENT_CHANNEL$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_MODALITY"',0,80),SUBSTRB("EVENT_DIM_37_EVENT_MODALITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_PROD_LINE"',0,80),SUBSTRB("EVENT_DIM_38_EVENT_PROD_LINE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_ID"',0,80),SUBSTRB("EVENT_DIM_39_ORACLE_ITEM_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_NUM"',0,80),SUBSTRB("EVENT_DIM_40_ORACLE_ITEM_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_CODE"',0,80),SUBSTRB("EVENT_DIM_41_COURSE_CODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_TYPE"',0,80),SUBSTRB("EVENT_DIM_42_EVENT_TYPE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_REASON"',0,80),SUBSTRB("EVENT_DIM_43_CANCEL_REASON$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CAPACITY"',0,80),SUBSTRB("EVENT_DIM_44_CAPACITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_CODE"',0,80),SUBSTRB("EVENT_DIM_45_FACILITY_CODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_REGION_METRO"',0,80),SUBSTRB("EVENT_DI_46_FACILITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DESCRIPTION"',0,80),SUBSTRB("EVENT_DI_47_MEETING_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."RESELLER_EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_48_RESELLER_EVENT_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CONF_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_49_CONF_ENROLLMEN"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."WAIT_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_50_WAIT_ENROLLMEN"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_51_ATTEND_E$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_52_DID_NOT_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_NAME"',0,80),SUBSTRB("EVENT_DIM_53_EVENT_NAME$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPS_COUNTRY"',0,80),SUBSTRB("EVENT_DIM_54_OPS_COUNTRY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INTERNALFACILITY"',0,80),SUBSTRB("EVENT_DIM_55_INTERNALFACILI"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."SPOKEN_LANGUAGE"',0,80),SUBSTRB("EVENT_DIM_56_SPOKEN_LANGUAGE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PLAN_TYPE"',0,80),SUBSTRB("EVENT_DIM_58_PLAN_TYPE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATE_USER"',0,80),SUBSTRB("EVENT_DIM_59_CREATE_USER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ONSITE_ATTENDED"',0,80),SUBSTRB("EVENT_DIM_60_ONSITE_ATTENDED$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DAYS"',0,80),SUBSTRB("EVENT_DIM_61_MEETING_DAYS$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MANAGED_PROGRAM_ID"',0,80),SUBSTRB("EVENT_DI_62_MANAGED_$1"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
                
                IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "EVENT_DIM_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "EVENT_DIM_si" >= "EVENT_DIM_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "EVENT_DIM_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"EVENT_DIM_0_EVENT_ID$1"(insert_bulk_index) := "EVENT_DIM_0_EVENT_ID$1"(update_bulk(j));
  		"EVENT_DIM_1_EVENT_DESC$1"(insert_bulk_index) := "EVENT_DIM_1_EVENT_DESC$1"(update_bulk(j));
  		"EVENT_DIM_2_COURSE_ID$1"(insert_bulk_index) := "EVENT_DIM_2_COURSE_ID$1"(update_bulk(j));
  		"EVENT_DIM_3_LOCATION_ID$1"(insert_bulk_index) := "EVENT_DIM_3_LOCATION_ID$1"(update_bulk(j));
  		"EVENT_DIM_5_START_DATE$1"(insert_bulk_index) := "EVENT_DIM_5_START_DATE$1"(update_bulk(j));
  		"EVENT_DIM_6_START_TIME$1"(insert_bulk_index) := "EVENT_DIM_6_START_TIME$1"(update_bulk(j));
  		"EVENT_DIM_7_END_DATE$1"(insert_bulk_index) := "EVENT_DIM_7_END_DATE$1"(update_bulk(j));
  		"EVENT_DIM_8_END_TIME$1"(insert_bulk_index) := "EVENT_DIM_8_END_TIME$1"(update_bulk(j));
  		"EVENT_DIM_9_STATUS$1"(insert_bulk_index) := "EVENT_DIM_9_STATUS$1"(update_bulk(j));
  		"EVENT_DIM_11_LOCATION_NAME$1"(insert_bulk_index) := "EVENT_DIM_11_LOCATION_NAME$1"(update_bulk(j));
  		"EVENT_DIM_12_ADDRESS1$1"(insert_bulk_index) := "EVENT_DIM_12_ADDRESS1$1"(update_bulk(j));
  		"EVENT_DIM_13_ADDRESS2$1"(insert_bulk_index) := "EVENT_DIM_13_ADDRESS2$1"(update_bulk(j));
  		"EVENT_DIM_15_CITY$1"(insert_bulk_index) := "EVENT_DIM_15_CITY$1"(update_bulk(j));
  		"EVENT_DIM_16_STATE$1"(insert_bulk_index) := "EVENT_DIM_16_STATE$1"(update_bulk(j));
  		"EVENT_DIM_17_ZIPCODE$1"(insert_bulk_index) := "EVENT_DIM_17_ZIPCODE$1"(update_bulk(j));
  		"EVENT_DIM_18_PROVINCE$1"(insert_bulk_index) := "EVENT_DIM_18_PROVINCE$1"(update_bulk(j));
  		"EVENT_DIM_19_COUNTRY$1"(insert_bulk_index) := "EVENT_DIM_19_COUNTRY$1"(update_bulk(j));
  		"EVENT_DIM_21_INSTRUCTOR1$1"(insert_bulk_index) := "EVENT_DIM_21_INSTRUCTOR1$1"(update_bulk(j));
  		"EVENT_DIM_22_INSTRUCTOR2$1"(insert_bulk_index) := "EVENT_DIM_22_INSTRUCTOR2$1"(update_bulk(j));
  		"EVENT_DIM_23_INSTRUCTOR3$1"(insert_bulk_index) := "EVENT_DIM_23_INSTRUCTOR3$1"(update_bulk(j));
  		"EVENT_DIM_24_CANCEL_DATE$1"(insert_bulk_index) := "EVENT_DIM_24_CANCEL_DATE$1"(update_bulk(j));
  		"EVENT_DIM_26_OPPORTUNITY_ID$1"(insert_bulk_index) := "EVENT_DIM_26_OPPORTUNITY_ID$1"(update_bulk(j));
  		"EVENT_DIM_28_CREATION_DATE$1"(insert_bulk_index) := "EVENT_DIM_28_CREATION_DATE$1"(update_bulk(j));
  		"EVENT_DIM_29_LAST_UPDATE_DA"(insert_bulk_index) := "EVENT_DIM_29_LAST_UPDATE_DA"(update_bulk(j));
  		"EVENT_DIM_34_GKDW_SOURCE$1"(insert_bulk_index) := "EVENT_DIM_34_GKDW_SOURCE$1"(update_bulk(j));
  		"EVENT_DIM_36_EVENT_CHANNEL$1"(insert_bulk_index) := "EVENT_DIM_36_EVENT_CHANNEL$1"(update_bulk(j));
  		"EVENT_DIM_37_EVENT_MODALITY$1"(insert_bulk_index) := "EVENT_DIM_37_EVENT_MODALITY$1"(update_bulk(j));
  		"EVENT_DIM_38_EVENT_PROD_LINE$1"(insert_bulk_index) := "EVENT_DIM_38_EVENT_PROD_LINE$1"(update_bulk(j));
  		"EVENT_DIM_39_ORACLE_ITEM_ID$1"(insert_bulk_index) := "EVENT_DIM_39_ORACLE_ITEM_ID$1"(update_bulk(j));
  		"EVENT_DIM_40_ORACLE_ITEM_NUM$1"(insert_bulk_index) := "EVENT_DIM_40_ORACLE_ITEM_NUM$1"(update_bulk(j));
  		"EVENT_DIM_41_COURSE_CODE$1"(insert_bulk_index) := "EVENT_DIM_41_COURSE_CODE$1"(update_bulk(j));
  		"EVENT_DIM_42_EVENT_TYPE$1"(insert_bulk_index) := "EVENT_DIM_42_EVENT_TYPE$1"(update_bulk(j));
  		"EVENT_DIM_43_CANCEL_REASON$1"(insert_bulk_index) := "EVENT_DIM_43_CANCEL_REASON$1"(update_bulk(j));
  		"EVENT_DIM_44_CAPACITY$1"(insert_bulk_index) := "EVENT_DIM_44_CAPACITY$1"(update_bulk(j));
  		"EVENT_DIM_45_FACILITY_CODE$1"(insert_bulk_index) := "EVENT_DIM_45_FACILITY_CODE$1"(update_bulk(j));
  		"EVENT_DI_46_FACILITY$1"(insert_bulk_index) := "EVENT_DI_46_FACILITY$1"(update_bulk(j));
  		"EVENT_DI_47_MEETING_$1"(insert_bulk_index) := "EVENT_DI_47_MEETING_$1"(update_bulk(j));
  		"EVENT_DIM_48_RESELLER_EVENT_"(insert_bulk_index) := "EVENT_DIM_48_RESELLER_EVENT_"(update_bulk(j));
  		"EVENT_DIM_49_CONF_ENROLLMEN"(insert_bulk_index) := "EVENT_DIM_49_CONF_ENROLLMEN"(update_bulk(j));
  		"EVENT_DIM_50_WAIT_ENROLLMEN"(insert_bulk_index) := "EVENT_DIM_50_WAIT_ENROLLMEN"(update_bulk(j));
  		"EVENT_DI_51_ATTEND_E$1"(insert_bulk_index) := "EVENT_DI_51_ATTEND_E$1"(update_bulk(j));
  		"EVENT_DI_52_DID_NOT_$1"(insert_bulk_index) := "EVENT_DI_52_DID_NOT_$1"(update_bulk(j));
  		"EVENT_DIM_53_EVENT_NAME$1"(insert_bulk_index) := "EVENT_DIM_53_EVENT_NAME$1"(update_bulk(j));
  		"EVENT_DIM_54_OPS_COUNTRY$1"(insert_bulk_index) := "EVENT_DIM_54_OPS_COUNTRY$1"(update_bulk(j));
  		"EVENT_DIM_55_INTERNALFACILI"(insert_bulk_index) := "EVENT_DIM_55_INTERNALFACILI"(update_bulk(j));
  		"EVENT_DIM_56_SPOKEN_LANGUAGE$1"(insert_bulk_index) := "EVENT_DIM_56_SPOKEN_LANGUAGE$1"(update_bulk(j));
  		"EVENT_DIM_58_PLAN_TYPE$1"(insert_bulk_index) := "EVENT_DIM_58_PLAN_TYPE$1"(update_bulk(j));
  		"EVENT_DIM_59_CREATE_USER$1"(insert_bulk_index) := "EVENT_DIM_59_CREATE_USER$1"(update_bulk(j));
  		"EVENT_DIM_60_ONSITE_ATTENDED$1"(insert_bulk_index) := "EVENT_DIM_60_ONSITE_ATTENDED$1"(update_bulk(j));
  		"EVENT_DIM_61_MEETING_DAYS$1"(insert_bulk_index) := "EVENT_DIM_61_MEETING_DAYS$1"(update_bulk(j));
  		"EVENT_DI_62_MANAGED_$1"(insert_bulk_index) := "EVENT_DI_62_MANAGED_$1"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "EVENT_DIM_srk"(insert_bulk_index) := "EVENT_DIM_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "EVENT_DIM_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "EVENT_DIM_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "EVENT_DIM_si"..insert_bulk_index
          INSERT INTO
            "EVENT_DIM"
            ("EVENT_DIM"."EVENT_ID",
            "EVENT_DIM"."EVENT_DESC",
            "EVENT_DIM"."COURSE_ID",
            "EVENT_DIM"."LOCATION_ID",
            "EVENT_DIM"."START_DATE",
            "EVENT_DIM"."START_TIME",
            "EVENT_DIM"."END_DATE",
            "EVENT_DIM"."END_TIME",
            "EVENT_DIM"."STATUS",
            "EVENT_DIM"."LOCATION_NAME",
            "EVENT_DIM"."ADDRESS1",
            "EVENT_DIM"."ADDRESS2",
            "EVENT_DIM"."CITY",
            "EVENT_DIM"."STATE",
            "EVENT_DIM"."ZIPCODE",
            "EVENT_DIM"."PROVINCE",
            "EVENT_DIM"."COUNTRY",
            "EVENT_DIM"."INSTRUCTOR1",
            "EVENT_DIM"."INSTRUCTOR2",
            "EVENT_DIM"."INSTRUCTOR3",
            "EVENT_DIM"."CANCEL_DATE",
            "EVENT_DIM"."OPPORTUNITY_ID",
            "EVENT_DIM"."CREATION_DATE",
            "EVENT_DIM"."LAST_UPDATE_DATE",
            "EVENT_DIM"."GKDW_SOURCE",
            "EVENT_DIM"."EVENT_CHANNEL",
            "EVENT_DIM"."EVENT_MODALITY",
            "EVENT_DIM"."EVENT_PROD_LINE",
            "EVENT_DIM"."ORACLE_ITEM_ID",
            "EVENT_DIM"."ORACLE_ITEM_NUM",
            "EVENT_DIM"."COURSE_CODE",
            "EVENT_DIM"."EVENT_TYPE",
            "EVENT_DIM"."CANCEL_REASON",
            "EVENT_DIM"."CAPACITY",
            "EVENT_DIM"."FACILITY_CODE",
            "EVENT_DIM"."FACILITY_REGION_METRO",
            "EVENT_DIM"."MEETING_DESCRIPTION",
            "EVENT_DIM"."RESELLER_EVENT_ID",
            "EVENT_DIM"."CONF_ENROLLMENTS",
            "EVENT_DIM"."WAIT_ENROLLMENTS",
            "EVENT_DIM"."ATTEND_ENROLLMENTS",
            "EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS",
            "EVENT_DIM"."EVENT_NAME",
            "EVENT_DIM"."OPS_COUNTRY",
            "EVENT_DIM"."INTERNALFACILITY",
            "EVENT_DIM"."SPOKEN_LANGUAGE",
            "EVENT_DIM"."PLAN_TYPE",
            "EVENT_DIM"."CREATE_USER",
            "EVENT_DIM"."ONSITE_ATTENDED",
            "EVENT_DIM"."MEETING_DAYS",
            "EVENT_DIM"."MANAGED_PROGRAM_ID")
          VALUES
            ("EVENT_DIM_0_EVENT_ID$1"(i),
            "EVENT_DIM_1_EVENT_DESC$1"(i),
            "EVENT_DIM_2_COURSE_ID$1"(i),
            "EVENT_DIM_3_LOCATION_ID$1"(i),
            "EVENT_DIM_5_START_DATE$1"(i),
            "EVENT_DIM_6_START_TIME$1"(i),
            "EVENT_DIM_7_END_DATE$1"(i),
            "EVENT_DIM_8_END_TIME$1"(i),
            "EVENT_DIM_9_STATUS$1"(i),
            "EVENT_DIM_11_LOCATION_NAME$1"(i),
            "EVENT_DIM_12_ADDRESS1$1"(i),
            "EVENT_DIM_13_ADDRESS2$1"(i),
            "EVENT_DIM_15_CITY$1"(i),
            "EVENT_DIM_16_STATE$1"(i),
            "EVENT_DIM_17_ZIPCODE$1"(i),
            "EVENT_DIM_18_PROVINCE$1"(i),
            "EVENT_DIM_19_COUNTRY$1"(i),
            "EVENT_DIM_21_INSTRUCTOR1$1"(i),
            "EVENT_DIM_22_INSTRUCTOR2$1"(i),
            "EVENT_DIM_23_INSTRUCTOR3$1"(i),
            "EVENT_DIM_24_CANCEL_DATE$1"(i),
            "EVENT_DIM_26_OPPORTUNITY_ID$1"(i),
            "EVENT_DIM_28_CREATION_DATE$1"(i),
            "EVENT_DIM_29_LAST_UPDATE_DA"(i),
            "EVENT_DIM_34_GKDW_SOURCE$1"(i),
            "EVENT_DIM_36_EVENT_CHANNEL$1"(i),
            "EVENT_DIM_37_EVENT_MODALITY$1"(i),
            "EVENT_DIM_38_EVENT_PROD_LINE$1"(i),
            "EVENT_DIM_39_ORACLE_ITEM_ID$1"(i),
            "EVENT_DIM_40_ORACLE_ITEM_NUM$1"(i),
            "EVENT_DIM_41_COURSE_CODE$1"(i),
            "EVENT_DIM_42_EVENT_TYPE$1"(i),
            "EVENT_DIM_43_CANCEL_REASON$1"(i),
            "EVENT_DIM_44_CAPACITY$1"(i),
            "EVENT_DIM_45_FACILITY_CODE$1"(i),
            "EVENT_DI_46_FACILITY$1"(i),
            "EVENT_DI_47_MEETING_$1"(i),
            "EVENT_DIM_48_RESELLER_EVENT_"(i),
            "EVENT_DIM_49_CONF_ENROLLMEN"(i),
            "EVENT_DIM_50_WAIT_ENROLLMEN"(i),
            "EVENT_DI_51_ATTEND_E$1"(i),
            "EVENT_DI_52_DID_NOT_$1"(i),
            "EVENT_DIM_53_EVENT_NAME$1"(i),
            "EVENT_DIM_54_OPS_COUNTRY$1"(i),
            "EVENT_DIM_55_INTERNALFACILI"(i),
            "EVENT_DIM_56_SPOKEN_LANGUAGE$1"(i),
            "EVENT_DIM_58_PLAN_TYPE$1"(i),
            "EVENT_DIM_59_CREATE_USER$1"(i),
            "EVENT_DIM_60_ONSITE_ATTENDED$1"(i),
            "EVENT_DIM_61_MEETING_DAYS$1"(i),
            "EVENT_DI_62_MANAGED_$1"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "EVENT_DIM_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "EVENT_DIM_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "EVENT_DIM_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 120: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_0_EVENT_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_DESC"',0,80),SUBSTRB("EVENT_DIM_1_EVENT_DESC$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_ID"',0,80),SUBSTRB("EVENT_DIM_2_COURSE_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_ID"',0,80),SUBSTRB("EVENT_DIM_3_LOCATION_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_DATE"',0,80),SUBSTRB("EVENT_DIM_5_START_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."START_TIME"',0,80),SUBSTRB("EVENT_DIM_6_START_TIME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_DATE"',0,80),SUBSTRB("EVENT_DIM_7_END_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."END_TIME"',0,80),SUBSTRB("EVENT_DIM_8_END_TIME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATUS"',0,80),SUBSTRB("EVENT_DIM_9_STATUS$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LOCATION_NAME"',0,80),SUBSTRB("EVENT_DIM_11_LOCATION_NAME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS1"',0,80),SUBSTRB("EVENT_DIM_12_ADDRESS1$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ADDRESS2"',0,80),SUBSTRB("EVENT_DIM_13_ADDRESS2$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CITY"',0,80),SUBSTRB("EVENT_DIM_15_CITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."STATE"',0,80),SUBSTRB("EVENT_DIM_16_STATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ZIPCODE"',0,80),SUBSTRB("EVENT_DIM_17_ZIPCODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PROVINCE"',0,80),SUBSTRB("EVENT_DIM_18_PROVINCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COUNTRY"',0,80),SUBSTRB("EVENT_DIM_19_COUNTRY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR1"',0,80),SUBSTRB("EVENT_DIM_21_INSTRUCTOR1$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR2"',0,80),SUBSTRB("EVENT_DIM_22_INSTRUCTOR2$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INSTRUCTOR3"',0,80),SUBSTRB("EVENT_DIM_23_INSTRUCTOR3$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_DATE"',0,80),SUBSTRB("EVENT_DIM_24_CANCEL_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPPORTUNITY_ID"',0,80),SUBSTRB("EVENT_DIM_26_OPPORTUNITY_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATION_DATE"',0,80),SUBSTRB("EVENT_DIM_28_CREATION_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."LAST_UPDATE_DATE"',0,80),SUBSTRB("EVENT_DIM_29_LAST_UPDATE_DA"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."GKDW_SOURCE"',0,80),SUBSTRB("EVENT_DIM_34_GKDW_SOURCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_CHANNEL"',0,80),SUBSTRB("EVENT_DIM_36_EVENT_CHANNEL$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_MODALITY"',0,80),SUBSTRB("EVENT_DIM_37_EVENT_MODALITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_PROD_LINE"',0,80),SUBSTRB("EVENT_DIM_38_EVENT_PROD_LINE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_ID"',0,80),SUBSTRB("EVENT_DIM_39_ORACLE_ITEM_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ORACLE_ITEM_NUM"',0,80),SUBSTRB("EVENT_DIM_40_ORACLE_ITEM_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."COURSE_CODE"',0,80),SUBSTRB("EVENT_DIM_41_COURSE_CODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_TYPE"',0,80),SUBSTRB("EVENT_DIM_42_EVENT_TYPE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CANCEL_REASON"',0,80),SUBSTRB("EVENT_DIM_43_CANCEL_REASON$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CAPACITY"',0,80),SUBSTRB("EVENT_DIM_44_CAPACITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_CODE"',0,80),SUBSTRB("EVENT_DIM_45_FACILITY_CODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."FACILITY_REGION_METRO"',0,80),SUBSTRB("EVENT_DI_46_FACILITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DESCRIPTION"',0,80),SUBSTRB("EVENT_DI_47_MEETING_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."RESELLER_EVENT_ID"',0,80),SUBSTRB("EVENT_DIM_48_RESELLER_EVENT_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CONF_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_49_CONF_ENROLLMEN"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."WAIT_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DIM_50_WAIT_ENROLLMEN"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_51_ATTEND_E$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."DID_NOT_ATTEND_ENROLLMENTS"',0,80),SUBSTRB("EVENT_DI_52_DID_NOT_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."EVENT_NAME"',0,80),SUBSTRB("EVENT_DIM_53_EVENT_NAME$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."OPS_COUNTRY"',0,80),SUBSTRB("EVENT_DIM_54_OPS_COUNTRY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."INTERNALFACILITY"',0,80),SUBSTRB("EVENT_DIM_55_INTERNALFACILI"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."SPOKEN_LANGUAGE"',0,80),SUBSTRB("EVENT_DIM_56_SPOKEN_LANGUAGE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."PLAN_TYPE"',0,80),SUBSTRB("EVENT_DIM_58_PLAN_TYPE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."CREATE_USER"',0,80),SUBSTRB("EVENT_DIM_59_CREATE_USER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."ONSITE_ATTENDED"',0,80),SUBSTRB("EVENT_DIM_60_ONSITE_ATTENDED$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MEETING_DAYS"',0,80),SUBSTRB("EVENT_DIM_61_MEETING_DAYS$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"EVENT_DIM"."MANAGED_PROGRAM_ID"',0,80),SUBSTRB("EVENT_DI_62_MANAGED_$1"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
          
          IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "EVENT_DIM_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "EVENT_DIM_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "EVENT_DIM_ins" := "EVENT_DIM_ins" + get_rowid.COUNT;
      "EVENT_DIM_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "EVENT_DIM_ins" := "EVENT_DIM_ins0"; 
    "EVENT_DIM_upd" := "EVENT_DIM_upd0";
  END IF;

END "EVXEVENT_DML$1";

---------------------------------------------------------------------------
-- "EVXEVENT_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "EVENT_DIM_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "EVXEVENT_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "EVENT_DIM_St" THEN
          "EVENT_DIM_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"EVENT_DIM"',
              p_target_uoid=>'A41FFB19A39D5678E040007F01006C7D',
              p_stm=>'TRACE 122',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "EVENT_DIM_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A30A5678E040007F01006C7D', -- Operator COURSE_DIM
              p_parent_object_name=>'COURSE_DIM',
              p_parent_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'COURSE_DIM',
              p_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A39D5678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A18D5678E040007F01006C7D', -- Operator COURSE_DIM
              p_parent_object_name=>'COURSE_DIM',
              p_parent_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'COURSE_DIM',
              p_object_uoid=>'A41FFB1911E85678E040007F01006C7D', -- Table COURSE_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A3A35678E040007F01006C7D', -- Operator EVXEVENT
              p_parent_object_name=>'EVXEVENT',
              p_parent_object_uoid=>'A41FFB1910475678E040007F01006C7D', -- Table EVXEVENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXEVENT',
              p_object_uoid=>'A41FFB1910475678E040007F01006C7D', -- Table EVXEVENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A5295678E040007F01006C7D', -- Operator EVENT_DIM
              p_parent_object_name=>'EVENT_DIM',
              p_parent_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'EVENT_DIM',
              p_object_uoid=>'A41FA16DAF57655CE040007F01006B9E', -- Table EVENT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19A3A05678E040007F01006C7D', -- Operator QG_EVENT
              p_parent_object_name=>'QG_EVENT',
              p_parent_object_uoid=>'A41FFB190CE65678E040007F01006C7D', -- Table QG_EVENT
              p_parent_object_type=>'Table',
              p_object_name=>'QG_EVENT',
              p_object_uoid=>'A41FFB190CE65678E040007F01006C7D', -- Table QG_EVENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "EVXEVENT_si$1" := 0;
    "EVENT_DIM_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "EVXEVENT_SU$1";

      LOOP
        IF "EVXEVENT_si$1" = 0 THEN
          "EVXEVENT_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "EVXEVENT_0_EVXEVENTID$1".COUNT - 1;
          ELSE
            bulk_count := "EVXEVENT_0_EVXEVENTID$1".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "EVENT_DIM_ir".DELETE;
"EVENT_DIM_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "EVXEVENT_i$1" := "EVXEVENT_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "EVENT_DIM_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "EVXEVENT_i$1" := "EVXEVENT_i$1" + 1;
            "EVXEVENT_si$1" := "EVXEVENT_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "EVENT_DIM_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("EVXEVENT_c$1"%NOTFOUND AND
               "EVXEVENT_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "EVXEVENT_i$1" > bulk_count THEN
            
              "EVXEVENT_si$1" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_QG_INSTRUCTOR_ID"((RTRIM("EVXEVENT_0_EVXEVENTID$1"
            ("EVXEVENT_i$1"))),"GET_QG_I_1_INSTR_ID"
            ("EVXEVENT_i$1"),"GET_QG_I_2_INSTR_ID"
            ("EVXEVENT_i$1"),"GET_QG_I_3_INSTR_ID"
            ("EVXEVENT_i$1"));
            
            ',0,2000);
            
                
                "GET_QG_INSTRUCTOR_ID"((RTRIM("EVXEVENT_0_EVXEVENTID$1"
            ("EVXEVENT_i$1"))),"GET_QG_I_1_INSTR_ID"
            ("EVXEVENT_i$1"),"GET_QG_I_2_INSTR_ID"
            ("EVXEVENT_i$1"),"GET_QG_I_3_INSTR_ID"
            ("EVXEVENT_i$1"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_ENROLL_STATUS_COUNT"((RTRIM("EVXEVENT_0_EVXEVENTID$1"
            ("EVXEVENT_i$1"))),"OWB_EVENT_DIM"."GET_CONST_2_ENROLL_STATUS","GET_ENRO_2_ENROLL_C"
            ("EVXEVENT_i$1"));
            
            ',0,2000);
            
                
                "GET_ENROLL_STATUS_COUNT"((RTRIM("EVXEVENT_0_EVXEVENTID$1"
            ("EVXEVENT_i$1"))),"OWB_EVENT_DIM"."GET_CONST_2_ENROLL_STATUS","GET_ENRO_2_ENROLL_C"
            ("EVXEVENT_i$1"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"EVENT_DIM"';
            get_audit_detail_id := "EVENT_DIM_id";
            IF NOT "EVENT_DIM_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"EVENT_DIM_0_EVENT_ID$1"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_0_EVXEVENTID$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_0_EVENT_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_0_EVXEVENTID$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_0_EVENT_ID$1"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_0_EVXEVENTID$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_0_EVENT_ID$1" :=
            
            RTRIM("EVXEVENT_0_EVXEVENTID$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_1_EVENT_DESC$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_9_DESCRIPTION$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_1_EVENT_DESC$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_9_DESCRIPTION$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_1_EVENT_DESC$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_9_DESCRIPTION$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_1_EVENT_DESC$1" :=
            
            "EVXEVENT_9_DESCRIPTION$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_2_COURSE_ID$1"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_24_EVXCOURSEID$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_2_COURSE_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_24_EVXCOURSEID$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_2_COURSE_ID$1"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_24_EVXCOURSEID$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_2_COURSE_ID$1" :=
            
            RTRIM("EVXEVENT_24_EVXCOURSEID$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_3_LOCATION_ID$1"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_28_EVXFACILITYID$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_3_LOCATION_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_28_EVXFACILITYID$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_3_LOCATION_ID$1"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_28_EVXFACILITYID$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_3_LOCATION_ID$1" :=
            
            RTRIM("EVXEVENT_28_EVXFACILITYID$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_5_START_DATE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_21_STARTDATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_5_START_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_21_STARTDATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_5_START_DATE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_21_STARTDATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_5_START_DATE$1" :=
            
            "EVXEVENT_21_STARTDATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_6_START_TIME$1"("EVENT_DIM_i") := 
            
            "EXPR_10_STARTTIME$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_6_START_TIME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_10_STARTTIME$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_6_START_TIME$1"("EVENT_DIM_i") :=
            
            "EXPR_10_STARTTIME$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_6_START_TIME$1" :=
            
            "EXPR_10_STARTTIME$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_7_END_DATE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_10_ENDDATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_7_END_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_10_ENDDATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_7_END_DATE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_10_ENDDATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_7_END_DATE$1" :=
            
            "EVXEVENT_10_ENDDATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_8_END_TIME$1"("EVENT_DIM_i") := 
            
            "EXPR_14_ENDTIME$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_8_END_TIME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_14_ENDTIME$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_8_END_TIME$1"("EVENT_DIM_i") :=
            
            "EXPR_14_ENDTIME$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_8_END_TIME$1" :=
            
            "EXPR_14_ENDTIME$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_9_STATUS$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_2_EVENTSTATUS$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_9_STATUS$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_2_EVENTSTATUS$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_9_STATUS$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_2_EVENTSTATUS$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_9_STATUS$1" :=
            
            "EVXEVENT_2_EVENTSTATUS$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_11_LOCATION_NAME$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_15_FACILITYNAME$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_11_LOCATION_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_15_FACILITYNAME$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_11_LOCATION_NAME$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_15_FACILITYNAME$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_11_LOCATION_NA" :=
            
            "EVXEVENT_15_FACILITYNAME$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_12_ADDRESS1$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_40_FACILITYADDRESS1$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_12_ADDRESS1$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_40_FACILITYADDRESS1$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_12_ADDRESS1$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_40_FACILITYADDRESS1$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_12_ADDRESS1$1" :=
            
            "EVXEVENT_40_FACILITYADDRESS1$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_13_ADDRESS2$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_41_FACILITYADDRESS2$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_13_ADDRESS2$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_41_FACILITYADDRESS2$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_13_ADDRESS2$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_41_FACILITYADDRESS2$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_13_ADDRESS2$1" :=
            
            "EVXEVENT_41_FACILITYADDRESS2$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_15_CITY$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_13_FACILITYCITY$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_15_CITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_13_FACILITYCITY$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_15_CITY$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_13_FACILITYCITY$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_15_CITY$1" :=
            
            "EVXEVENT_13_FACILITYCITY$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_16_STATE$1"("EVENT_DIM_i") := 
            
            "EXPR_8_STATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_16_STATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_8_STATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_16_STATE$1"("EVENT_DIM_i") :=
            
            "EXPR_8_STATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_16_STATE$1" :=
            
            "EXPR_8_STATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_17_ZIPCODE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_43_FACILITYPOSTAL$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_17_ZIPCODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_43_FACILITYPOSTAL$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_17_ZIPCODE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_43_FACILITYPOSTAL$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_17_ZIPCODE$1" :=
            
            "EVXEVENT_43_FACILITYPOSTAL$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_18_PROVINCE$1"("EVENT_DIM_i") := 
            
            "EXPR_9_PROVINCE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_18_PROVINCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_9_PROVINCE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_18_PROVINCE$1"("EVENT_DIM_i") :=
            
            "EXPR_9_PROVINCE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_18_PROVINCE$1" :=
            
            "EXPR_9_PROVINCE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_19_COUNTRY$1"("EVENT_DIM_i") := 
            
            "EXPR_11_COUNTRY$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_19_COUNTRY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_11_COUNTRY$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_19_COUNTRY$1"("EVENT_DIM_i") :=
            
            "EXPR_11_COUNTRY$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_19_COUNTRY$1" :=
            
            "EXPR_11_COUNTRY$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_21_INSTRUCTOR1$1"("EVENT_DIM_i") := 
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_21_INSTRUCTOR1$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_1_INSTR_ID"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_21_INSTRUCTOR1$1"("EVENT_DIM_i") :=
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_21_INSTRUCTOR1$1" :=
            
            "GET_QG_I_1_INSTR_ID"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_22_INSTRUCTOR2$1"("EVENT_DIM_i") := 
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_22_INSTRUCTOR2$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_2_INSTR_ID"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_22_INSTRUCTOR2$1"("EVENT_DIM_i") :=
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_22_INSTRUCTOR2$1" :=
            
            "GET_QG_I_2_INSTR_ID"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_23_INSTRUCTOR3$1"("EVENT_DIM_i") := 
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_23_INSTRUCTOR3$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_QG_I_3_INSTR_ID"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_23_INSTRUCTOR3$1"("EVENT_DIM_i") :=
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_23_INSTRUCTOR3$1" :=
            
            "GET_QG_I_3_INSTR_ID"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_24_CANCEL_DATE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_65_CANCELDATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_24_CANCEL_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_65_CANCELDATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_24_CANCEL_DATE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_65_CANCELDATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_24_CANCEL_DATE$1" :=
            
            "EVXEVENT_65_CANCELDATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_26_OPPORTUNITY_ID$1"("EVENT_DIM_i") := 
            
            RTRIM("EXPR_15_OPPORTUNITY_ID$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_26_OPPORTUNITY_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EXPR_15_OPPORTUNITY_ID$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_26_OPPORTUNITY_ID$1"("EVENT_DIM_i") :=
            
            RTRIM("EXPR_15_OPPORTUNITY_ID$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_26_OPPORTUNITY_" :=
            
            RTRIM("EXPR_15_OPPORTUNITY_ID$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_28_CREATION_DATE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_68_CREATEDATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_28_CREATION_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_68_CREATEDATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_28_CREATION_DATE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_68_CREATEDATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_28_CREATION_DA" :=
            
            "EVXEVENT_68_CREATEDATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_29_LAST_UPDATE_DA"("EVENT_DIM_i") := 
            
            "EVXEVENT_70_MODIFYDATE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_29_LAST_UPDATE_DA"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_70_MODIFYDATE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_29_LAST_UPDATE_DA"("EVENT_DIM_i") :=
            
            "EVXEVENT_70_MODIFYDATE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_29_LAST_UPDATE_" :=
            
            "EVXEVENT_70_MODIFYDATE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_34_GKDW_SOURCE$1"("EVENT_DIM_i") := 
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_34_GKDW_SOURCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_EVENT_DIM"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_34_GKDW_SOURCE$1"("EVENT_DIM_i") :=
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_34_GKDW_SOURCE$1" :=
            
            "OWB_EVENT_DIM"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_36_EVENT_CHANNEL$1"("EVENT_DIM_i") := 
            
            "COURSE_DIM_4_COURSE_CH$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_36_EVENT_CHANNEL$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_4_COURSE_CH$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_36_EVENT_CHANNEL$1"("EVENT_DIM_i") :=
            
            "COURSE_DIM_4_COURSE_CH$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_36_EVENT_CHANN" :=
            
            "COURSE_DIM_4_COURSE_CH$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_37_EVENT_MODALITY$1"("EVENT_DIM_i") := 
            
            "COURSE_DIM_5_COURSE_MOD$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_37_EVENT_MODALITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_5_COURSE_MOD$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_37_EVENT_MODALITY$1"("EVENT_DIM_i") :=
            
            "COURSE_DIM_5_COURSE_MOD$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_37_EVENT_MODALI" :=
            
            "COURSE_DIM_5_COURSE_MOD$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_38_EVENT_PROD_LINE$1"("EVENT_DIM_i") := 
            
            "COURSE_DIM_6_COURSE_PL$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_38_EVENT_PROD_LINE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_6_COURSE_PL$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_38_EVENT_PROD_LINE$1"("EVENT_DIM_i") :=
            
            "COURSE_DIM_6_COURSE_PL$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_38_EVENT_PROD_" :=
            
            "COURSE_DIM_6_COURSE_PL$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_39_ORACLE_ITEM_ID$1"("EVENT_DIM_i") := 
            
            "COURSE_DIM_8_ORACLE_ITEM_ID$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_39_ORACLE_ITEM_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_8_ORACLE_ITEM_ID$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_39_ORACLE_ITEM_ID$1"("EVENT_DIM_i") :=
            
            "COURSE_DIM_8_ORACLE_ITEM_ID$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_39_ORACLE_ITEM_" :=
            
            "COURSE_DIM_8_ORACLE_ITEM_ID$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_40_ORACLE_ITEM_NUM$1"("EVENT_DIM_i") := 
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_40_ORACLE_ITEM_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("COURSE_DIM_9_ORACLE_ITEM_NUM$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_40_ORACLE_ITEM_NUM$1"("EVENT_DIM_i") :=
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_40_ORACLE_ITEM" :=
            
            "COURSE_DIM_9_ORACLE_ITEM_NUM$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_41_COURSE_CODE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_6_COURSECODE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_41_COURSE_CODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_6_COURSECODE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_41_COURSE_CODE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_6_COURSECODE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_41_COURSE_CODE$1" :=
            
            "EVXEVENT_6_COURSECODE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_42_EVENT_TYPE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_3_EVENTTYPE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_42_EVENT_TYPE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_3_EVENTTYPE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_42_EVENT_TYPE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_3_EVENTTYPE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_42_EVENT_TYPE$1" :=
            
            "EVXEVENT_3_EVENTTYPE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_43_CANCEL_REASON$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_66_CANCELREASON$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_43_CANCEL_REASON$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_66_CANCELREASON$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_43_CANCEL_REASON$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_66_CANCELREASON$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_43_CANCEL_REAS" :=
            
            "EVXEVENT_66_CANCELREASON$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_44_CAPACITY$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_18_MAXENROLLMENT$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_44_CAPACITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_18_MAXENROLLMENT$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_44_CAPACITY$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_18_MAXENROLLMENT$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_44_CAPACITY$1" :=
            
            "EVXEVENT_18_MAXENROLLMENT$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_45_FACILITY_CODE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_46_FACILITYCODE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_45_FACILITY_CODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_46_FACILITYCODE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_45_FACILITY_CODE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_46_FACILITYCODE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_45_FACILITY_CO" :=
            
            "EVXEVENT_46_FACILITYCODE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_46_FACILITY$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_71_FACILITY$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_46_FACILITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_71_FACILITY$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_46_FACILITY$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_71_FACILITY$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_46_FACILITY$1" :=
            
            "EVXEVENT_71_FACILITY$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_47_MEETING_$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_72_MEETINGDESCRIPTI"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_47_MEETING_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_72_MEETINGDESCRIPTI"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_47_MEETING_$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_72_MEETINGDESCRIPTI"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_47_MEETING_$1" :=
            
            "EVXEVENT_72_MEETINGDESCRIPTI"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_48_RESELLER_EVENT_"("EVENT_DIM_i") := 
            
            "QG_EVENT_12_RESELLEREVENTID$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_48_RESELLER_EVENT_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_12_RESELLEREVENTID$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_48_RESELLER_EVENT_"("EVENT_DIM_i") :=
            
            "QG_EVENT_12_RESELLEREVENTID$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_48_RESELLER_EV" :=
            
            "QG_EVENT_12_RESELLEREVENTID$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_49_CONF_ENROLLMEN"("EVENT_DIM_i") := 
            
            "EVXEVENT_51_CONFIRME$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_49_CONF_ENROLLMEN"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_51_CONFIRME$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_49_CONF_ENROLLMEN"("EVENT_DIM_i") :=
            
            "EVXEVENT_51_CONFIRME$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_49_CONF_ENROLLM" :=
            
            "EVXEVENT_51_CONFIRME$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_50_WAIT_ENROLLMEN"("EVENT_DIM_i") := 
            
            "EVXEVENT_23_WAITENROLLMENT$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_50_WAIT_ENROLLMEN"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_23_WAITENROLLMENT$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_50_WAIT_ENROLLMEN"("EVENT_DIM_i") :=
            
            "EVXEVENT_23_WAITENROLLMENT$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_50_WAIT_ENROLLM" :=
            
            "EVXEVENT_23_WAITENROLLMENT$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_51_ATTEND_E$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_49_ATTENDEDENROLLME"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_51_ATTEND_E$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_49_ATTENDEDENROLLME"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_51_ATTEND_E$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_49_ATTENDEDENROLLME"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_51_ATTEND_E$1" :=
            
            "EVXEVENT_49_ATTENDEDENROLLME"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_52_DID_NOT_$1"("EVENT_DIM_i") := 
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_52_DID_NOT_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_ENRO_2_ENROLL_C"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_52_DID_NOT_$1"("EVENT_DIM_i") :=
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_52_DID_NOT_$1" :=
            
            "GET_ENRO_2_ENROLL_C"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_53_EVENT_NAME$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_1_EVENTNAME$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_53_EVENT_NAME$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_1_EVENTNAME$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_53_EVENT_NAME$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_1_EVENTNAME$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_53_EVENT_NAME$1" :=
            
            "EVXEVENT_1_EVENTNAME$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_54_OPS_COUNTRY$1"("EVENT_DIM_i") := 
            
            "EXPR_13_OPS_COUNTRY$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_54_OPS_COUNTRY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_13_OPS_COUNTRY$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_54_OPS_COUNTRY$1"("EVENT_DIM_i") :=
            
            "EXPR_13_OPS_COUNTRY$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_54_OPS_COUNTRY$1" :=
            
            "EXPR_13_OPS_COUNTRY$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_55_INTERNALFACILI"("EVENT_DIM_i") := 
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_55_INTERNALFACILI"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("QG_EVENT_14_INTERNALFACILITY$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_55_INTERNALFACILI"("EVENT_DIM_i") :=
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_55_INTERNALFACI" :=
            
            RTRIM("QG_EVENT_14_INTERNALFACILITY$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_56_SPOKEN_LANGUAGE$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_27_SPOKENLANGUAGE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_56_SPOKEN_LANGUAGE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_27_SPOKENLANGUAGE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_56_SPOKEN_LANGUAGE$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_27_SPOKENLANGUAGE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_56_SPOKEN_LANG" :=
            
            "EVXEVENT_27_SPOKENLANGUAGE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_58_PLAN_TYPE$1"("EVENT_DIM_i") := 
            
            "QG_EVENT_15_PLANTYPE$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_58_PLAN_TYPE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_15_PLANTYPE$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_58_PLAN_TYPE$1"("EVENT_DIM_i") :=
            
            "QG_EVENT_15_PLANTYPE$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_58_PLAN_TYPE$1" :=
            
            "QG_EVENT_15_PLANTYPE$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_59_CREATE_USER$1"("EVENT_DIM_i") := 
            
            RTRIM("EVXEVENT_67_CREATEUSER$1"("EVXEVENT_i$1"));',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_59_CREATE_USER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXEVENT_67_CREATEUSER$1"("EVXEVENT_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_59_CREATE_USER$1"("EVENT_DIM_i") :=
            
            RTRIM("EVXEVENT_67_CREATEUSER$1"("EVXEVENT_i$1"));
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_59_CREATE_USER$1" :=
            
            RTRIM("EVXEVENT_67_CREATEUSER$1"("EVXEVENT_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_60_ONSITE_ATTENDED$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_73_INSTOOLSTUDATTE"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_60_ONSITE_ATTENDED$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_73_INSTOOLSTUDATTE"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_60_ONSITE_ATTENDED$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_73_INSTOOLSTUDATTE"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_60_ONSITE_ATTE" :=
            
            "EVXEVENT_73_INSTOOLSTUDATTE"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DIM_61_MEETING_DAYS$1"("EVENT_DIM_i") := 
            
            "EVXEVENT_19_MEETINGDAYS$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DIM_61_MEETING_DAYS$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXEVENT_19_MEETINGDAYS$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DIM_61_MEETING_DAYS$1"("EVENT_DIM_i") :=
            
            "EVXEVENT_19_MEETINGDAYS$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DIM_61_MEETING_DAYS$1" :=
            
            "EVXEVENT_19_MEETINGDAYS$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"EVENT_DI_62_MANAGED_$1"("EVENT_DIM_i") := 
            
            "QG_EVENT_16_MANAGEDPROGRAMID$1"("EVXEVENT_i$1");',0,2000);
            error_column := SUBSTRB('"EVENT_DI_62_MANAGED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("QG_EVENT_16_MANAGEDPROGRAMID$1"("EVXEVENT_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "EVENT_DI_62_MANAGED_$1"("EVENT_DIM_i") :=
            
            "QG_EVENT_16_MANAGEDPROGRAMID$1"("EVXEVENT_i$1");
            
            ELSIF get_row_status THEN
              "SV_EVENT_DI_62_MANAGED_$1" :=
            
            "QG_EVENT_16_MANAGEDPROGRAMID$1"("EVXEVENT_i$1");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "EVENT_DIM_srk"("EVENT_DIM_i") := get_rowkey + "EVXEVENT_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_EVENT_DIM_srk" := get_rowkey + "EVXEVENT_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "EVENT_DIM_new" := TRUE;
                ELSE
                  "EVENT_DIM_i" := "EVENT_DIM_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "EVXEVENT_ER$1"('TRACE 123: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "EVXEVENT_i$1");
                  
                  "EVENT_DIM_err" := "EVENT_DIM_err" + 1;
                  
                  IF get_errors + "EVENT_DIM_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("EVENT_DIM_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "EVENT_DIM_new" 
            AND (NOT "EVENT_DIM_nul") THEN
              "EVENT_DIM_ir"(dml_bsize) := "EVENT_DIM_i";
            	"EVENT_DIM_0_EVENT_ID$1"("EVENT_DIM_i") := "SV_EVENT_DIM_0_EVENT_ID$1";
            	"EVENT_DIM_1_EVENT_DESC$1"("EVENT_DIM_i") := "SV_EVENT_DIM_1_EVENT_DESC$1";
            	"EVENT_DIM_2_COURSE_ID$1"("EVENT_DIM_i") := "SV_EVENT_DIM_2_COURSE_ID$1";
            	"EVENT_DIM_3_LOCATION_ID$1"("EVENT_DIM_i") := "SV_EVENT_DIM_3_LOCATION_ID$1";
            	"EVENT_DIM_5_START_DATE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_5_START_DATE$1";
            	"EVENT_DIM_6_START_TIME$1"("EVENT_DIM_i") := "SV_EVENT_DIM_6_START_TIME$1";
            	"EVENT_DIM_7_END_DATE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_7_END_DATE$1";
            	"EVENT_DIM_8_END_TIME$1"("EVENT_DIM_i") := "SV_EVENT_DIM_8_END_TIME$1";
            	"EVENT_DIM_9_STATUS$1"("EVENT_DIM_i") := "SV_EVENT_DIM_9_STATUS$1";
            	"EVENT_DIM_11_LOCATION_NAME$1"("EVENT_DIM_i") := "SV_EVENT_DIM_11_LOCATION_NA";
            	"EVENT_DIM_12_ADDRESS1$1"("EVENT_DIM_i") := "SV_EVENT_DIM_12_ADDRESS1$1";
            	"EVENT_DIM_13_ADDRESS2$1"("EVENT_DIM_i") := "SV_EVENT_DIM_13_ADDRESS2$1";
            	"EVENT_DIM_15_CITY$1"("EVENT_DIM_i") := "SV_EVENT_DIM_15_CITY$1";
            	"EVENT_DIM_16_STATE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_16_STATE$1";
            	"EVENT_DIM_17_ZIPCODE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_17_ZIPCODE$1";
            	"EVENT_DIM_18_PROVINCE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_18_PROVINCE$1";
            	"EVENT_DIM_19_COUNTRY$1"("EVENT_DIM_i") := "SV_EVENT_DIM_19_COUNTRY$1";
            	"EVENT_DIM_21_INSTRUCTOR1$1"("EVENT_DIM_i") := "SV_EVENT_DIM_21_INSTRUCTOR1$1";
            	"EVENT_DIM_22_INSTRUCTOR2$1"("EVENT_DIM_i") := "SV_EVENT_DIM_22_INSTRUCTOR2$1";
            	"EVENT_DIM_23_INSTRUCTOR3$1"("EVENT_DIM_i") := "SV_EVENT_DIM_23_INSTRUCTOR3$1";
            	"EVENT_DIM_24_CANCEL_DATE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_24_CANCEL_DATE$1";
            	"EVENT_DIM_26_OPPORTUNITY_ID$1"("EVENT_DIM_i") := "SV_EVENT_DIM_26_OPPORTUNITY_";
            	"EVENT_DIM_28_CREATION_DATE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_28_CREATION_DA";
            	"EVENT_DIM_29_LAST_UPDATE_DA"("EVENT_DIM_i") := "SV_EVENT_DIM_29_LAST_UPDATE_";
            	"EVENT_DIM_34_GKDW_SOURCE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_34_GKDW_SOURCE$1";
            	"EVENT_DIM_36_EVENT_CHANNEL$1"("EVENT_DIM_i") := "SV_EVENT_DIM_36_EVENT_CHANN";
            	"EVENT_DIM_37_EVENT_MODALITY$1"("EVENT_DIM_i") := "SV_EVENT_DIM_37_EVENT_MODALI";
            	"EVENT_DIM_38_EVENT_PROD_LINE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_38_EVENT_PROD_";
            	"EVENT_DIM_39_ORACLE_ITEM_ID$1"("EVENT_DIM_i") := "SV_EVENT_DIM_39_ORACLE_ITEM_";
            	"EVENT_DIM_40_ORACLE_ITEM_NUM$1"("EVENT_DIM_i") := "SV_EVENT_DIM_40_ORACLE_ITEM";
            	"EVENT_DIM_41_COURSE_CODE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_41_COURSE_CODE$1";
            	"EVENT_DIM_42_EVENT_TYPE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_42_EVENT_TYPE$1";
            	"EVENT_DIM_43_CANCEL_REASON$1"("EVENT_DIM_i") := "SV_EVENT_DIM_43_CANCEL_REAS";
            	"EVENT_DIM_44_CAPACITY$1"("EVENT_DIM_i") := "SV_EVENT_DIM_44_CAPACITY$1";
            	"EVENT_DIM_45_FACILITY_CODE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_45_FACILITY_CO";
            	"EVENT_DI_46_FACILITY$1"("EVENT_DIM_i") := "SV_EVENT_DI_46_FACILITY$1";
            	"EVENT_DI_47_MEETING_$1"("EVENT_DIM_i") := "SV_EVENT_DI_47_MEETING_$1";
            	"EVENT_DIM_48_RESELLER_EVENT_"("EVENT_DIM_i") := "SV_EVENT_DIM_48_RESELLER_EV";
            	"EVENT_DIM_49_CONF_ENROLLMEN"("EVENT_DIM_i") := "SV_EVENT_DIM_49_CONF_ENROLLM";
            	"EVENT_DIM_50_WAIT_ENROLLMEN"("EVENT_DIM_i") := "SV_EVENT_DIM_50_WAIT_ENROLLM";
            	"EVENT_DI_51_ATTEND_E$1"("EVENT_DIM_i") := "SV_EVENT_DI_51_ATTEND_E$1";
            	"EVENT_DI_52_DID_NOT_$1"("EVENT_DIM_i") := "SV_EVENT_DI_52_DID_NOT_$1";
            	"EVENT_DIM_53_EVENT_NAME$1"("EVENT_DIM_i") := "SV_EVENT_DIM_53_EVENT_NAME$1";
            	"EVENT_DIM_54_OPS_COUNTRY$1"("EVENT_DIM_i") := "SV_EVENT_DIM_54_OPS_COUNTRY$1";
            	"EVENT_DIM_55_INTERNALFACILI"("EVENT_DIM_i") := "SV_EVENT_DIM_55_INTERNALFACI";
            	"EVENT_DIM_56_SPOKEN_LANGUAGE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_56_SPOKEN_LANG";
            	"EVENT_DIM_58_PLAN_TYPE$1"("EVENT_DIM_i") := "SV_EVENT_DIM_58_PLAN_TYPE$1";
            	"EVENT_DIM_59_CREATE_USER$1"("EVENT_DIM_i") := "SV_EVENT_DIM_59_CREATE_USER$1";
            	"EVENT_DIM_60_ONSITE_ATTENDED$1"("EVENT_DIM_i") := "SV_EVENT_DIM_60_ONSITE_ATTE";
            	"EVENT_DIM_61_MEETING_DAYS$1"("EVENT_DIM_i") := "SV_EVENT_DIM_61_MEETING_DAYS$1";
            	"EVENT_DI_62_MANAGED_$1"("EVENT_DIM_i") := "SV_EVENT_DI_62_MANAGED_$1";
              "EVENT_DIM_srk"("EVENT_DIM_i") := "SV_EVENT_DIM_srk";
              "EVENT_DIM_i" := "EVENT_DIM_i" + 1;
            ELSE
              "EVENT_DIM_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "EVXEVENT_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "EVXEVENT_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "EVXEVENT_ER$1"('TRACE 121: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "EVXEVENT_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "EVXEVENT_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "EVXEVENT_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "EVXEVENT_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "EVXEVENT_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "EVENT_DIM_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"EVENT_DIM_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"EVENT_DIM_ins",
        p_upd=>"EVENT_DIM_upd",
        p_del=>"EVENT_DIM_del",
        p_err=>"EVENT_DIM_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "EVENT_DIM_ins";
    get_updated  := get_updated  + "EVENT_DIM_upd";
    get_deleted  := get_deleted  + "EVENT_DIM_del";
    get_errors   := get_errors   + "EVENT_DIM_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "EVXEVENT_t";







PROCEDURE Initialize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  get_selected := 0;
  get_inserted := 0;
  get_updated  := 0;
  get_deleted  := 0;
  get_merged   := 0;
  get_errors   := 0;
  get_logical_errors := 0;
  get_abort    := FALSE;
  get_abort_procedure  := FALSE;

  FOR i IN 1..p_env.COUNT LOOP
    IF p_env(i).param_value IS NOT NULL THEN
      IF p_env(i).param_name = 'MAX_NO_OF_ERRORS' THEN
        get_max_errors := p_env(i).param_value;

      ELSIF p_env(i).param_name = 'COMMIT_FREQUENCY' THEN
        get_commit_frequency := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OPERATING_MODE' THEN
        get_operating_mode := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'BULK_SIZE' THEN
        get_bulk_size := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_LEVEL' THEN
        get_audit_level := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_ID' THEN
        get_audit_id := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'PURGE_GROUP' THEN
        get_purge_group := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OBJECT_ID' THEN
        OWB$MAP_OBJECT_ID := p_env(i).param_value;
      END IF;
    END IF;
  END LOOP;




  IF NOT (get_audit_level = AUDIT_NONE) THEN
    get_runtime_audit_id := WB_RT_MAPAUDIT.audit_begin(  -- Template AuditBegin
      p_auditid=>get_audit_id,
      p_lob_uoid=>get_lob_uoid,
      p_lob_name=>get_model_name,
      p_purge_group=>get_purge_group,
      p_parent=>NULL,
      p_source=>'"SLXDW"."EVXEVENT","SLXDW"."QG_EVENT","COURSE_DIM"',
      p_source_uoid=>'A41FFB19A3A35678E040007F01006C7D,A41FFB19A3A05678E040007F01006C7D,A41FFB19A30A5678E040007F01006C7D',
      p_target=>'"EVENT_DIM"',
      p_target_uoid=>'A41FFB19A39D5678E040007F01006C7D',      p_info=>NULL,
      
            p_type=>'PLSQLMap',
      
      p_date=>get_cycle_date
    );
  END IF;



  IF NOT get_no_commit THEN
    COMMIT; -- commit no.1
  END IF;
END Initialize;

PROCEDURE Analyze_Targets IS
BEGIN
  FOR i IN 1..tables_to_analyze.COUNT LOOP
    WB_RT_MAPAUDIT_UTIL_INVOKER.gather_table_stats(
      p_ownname          => tables_to_analyze(i).ownname,
      p_tabname          => tables_to_analyze(i).tabname,
      p_estimate_percent => tables_to_analyze(i).estimate_percent,
      p_granularity      => tables_to_analyze(i).granularity,
      p_cascade          => tables_to_analyze(i).cascade,
      p_degree           => tables_to_analyze(i).degree);
  END LOOP;
END Analyze_Targets;


PROCEDURE Finalize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.13
  END IF;


  IF get_abort THEN
    get_status := 1;
  ELSIF get_errors > 0 THEN
    get_status := 2;
  ELSE
    get_status := 0;
  END IF;
  get_processed := get_inserted + get_deleted + get_updated + get_merged; 
  IF (get_errors = 0) THEN
    get_error_ratio := 0;
  ELSE
    get_error_ratio := (get_errors /(get_errors + get_processed)) * 100;
  END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
  IF get_status = 0 THEN
    WB_RT_MAPAUDIT.audit_end(
      p_rta=>get_runtime_audit_id,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  ELSE
    WB_RT_MAPAUDIT.audit_fail(
      p_rta=>get_runtime_audit_id,
      p_status=>get_status,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  END IF;
END IF;


  Analyze_Targets;
END Finalize;



FUNCTION Main(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN

  IF WB_RT_MAPAUDIT_UTIL.supportsDesignClient(p_designVersion=>'10.2.0.1.31', p_minRuntimeVersion=>'10.2.0.1.0') < 1 THEN
    raise_application_error(-20103, 'Incompatible runtime and design client versions.');
  END IF;
  Initialize(p_env);
  
  
  
  
  
  -- Initialize all batch status variables
  "EVENT_DIM_St" := FALSE;

  --  Processing for different operating modes
  IF get_operating_mode = MODE_SET THEN
    RAISE_APPLICATION_ERROR(-20101, 'Set based mode not supported');
  END IF;
  IF get_operating_mode = MODE_ROW THEN
		"EVXEVENT_p";
  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW THEN
    IF get_use_hc THEN
      IF NOT get_batch_status AND get_use_hc THEN
        get_inserted := 0;
        get_updated  := 0;
        get_deleted  := 0;
        get_merged   := 0;
        get_logical_errors := 0;
"EVENT_DIM_St" := FALSE;

      END IF;
    END IF;

"EVXEVENT_p";

  END IF;
  IF get_operating_mode = MODE_ROW_TARGET THEN
"EVXEVENT_t";

  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW_TARGET THEN
    IF NOT get_batch_status AND get_use_hc THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
"EVENT_DIM_St" := FALSE;

    END IF;
"EVXEVENT_t";

  END IF;

  Finalize(p_env);
  RETURN get_status;
  END;

FUNCTION encode_operating_mode(p_operating_mode IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_operating_mode IS NULL THEN
    RETURN get_operating_mode;
  END IF;
  IF p_operating_mode = 'SET_BASED' THEN
    RETURN MODE_SET;
  ELSIF p_operating_mode = 'ROW_BASED' THEN
    RETURN MODE_ROW;
  ELSIF p_operating_mode = 'ROW_BASED_TARGET_ONLY' THEN
    RETURN MODE_ROW_TARGET;
  ELSIF p_operating_mode = 'SET_BASED_FAIL_OVER_TO_ROW_BASED' THEN
    RETURN MODE_SET_FAILOVER_ROW;
  ELSE
    RETURN MODE_SET_FAILOVER_ROW_TARGET;
  END IF;
END encode_operating_mode;

FUNCTION encode_audit_level(p_audit_level IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_audit_level IS NULL THEN
    RETURN get_audit_level;
  END IF;
  IF p_audit_level = 'NONE' THEN
    RETURN AUDIT_NONE;
  ELSIF p_audit_level = 'STATISTICS' THEN
    RETURN AUDIT_STATISTICS;
  ELSIF p_audit_level = 'ERROR_DETAILS' THEN
    RETURN AUDIT_ERROR_DETAILS;
  ELSE
    RETURN AUDIT_COMPLETE;
  END IF;
END encode_audit_level;


PROCEDURE Main(p_status OUT VARCHAR2,
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL) IS

  x_schema      VARCHAR2(30);

  x_audit_id    NUMBER;
  x_object_id   NUMBER;

  x_env         wb_rt_mapaudit.wb_rt_name_values;
  x_param       wb_rt_mapaudit.wb_rt_name_value;

  x_result      NUMBER;
  x_return_code NUMBER;

BEGIN
  -- validate parameters

  IF NOT wb_rt_mapaudit_util.validate_runtime_parameter('MAX_NO_OF_ERRORS',
                                                        p_max_no_of_errors) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('COMMIT_FREQUENCY',
                                                        p_commit_frequency) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('OPERATING_MODE',
                                                        p_operating_mode)   OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('BULK_SIZE',
                                                        p_bulk_size)        OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('AUDIT_LEVEL',
                                                        p_audit_level) THEN
    p_status := 'FAILURE';
    RETURN;
  END IF;

  -- perform pre-run setup

  SELECT ao.owner INTO x_schema
  FROM   user_objects uo, all_objects ao
  WHERE  uo.object_type = 'PACKAGE'
  AND    uo.object_name = 'OWB_EVENT_DIM'
  AND    uo.object_id = ao.object_id;

  wb_rt_mapaudit_util.premap('OWB_EVENT_DIM', x_schema, x_audit_id, x_object_id);

  -- prepare parameters for Main:

  x_param.param_name := 'AUDIT_ID';
  x_param.param_value := x_audit_id;
  x_env(1) := x_param;

  x_param.param_name := 'OBJECT_ID';
  x_param.param_value := x_object_id;
  x_env(2) := x_param;

  x_param.param_name := 'MAX_NO_OF_ERRORS';
  x_param.param_value := p_max_no_of_errors;
  x_env(3) := x_param;

  x_param.param_name := 'COMMIT_FREQUENCY';
  x_param.param_value := p_commit_frequency;
  x_env(4) := x_param;

  x_param.param_name := 'OPERATING_MODE';
  x_param.param_value := encode_operating_mode(p_operating_mode);
  x_env(5) := x_param;

  x_param.param_name := 'BULK_SIZE';
  x_param.param_value := p_bulk_size;
  x_env(6) := x_param;

  x_param.param_name := 'AUDIT_LEVEL';
  x_param.param_value := encode_audit_level(p_audit_level);
  x_env(7) := x_param;

  x_param.param_name := 'PURGE_GROUP';
  x_param.param_value := p_purge_group;
  x_env(8) := x_param;

  -- register "system" parameters:
  FOR i IN 3..8 LOOP
    IF x_env(i).param_value IS NOT NULL THEN
      wb_rt_mapaudit_util.register_sys_param(x_audit_id,
                                             x_env(i).param_name,
                                             x_env(i).param_value);
    END IF;
  END LOOP;

  -- really run it:
  -- return code from mapping is
  --   0 - success
  --   1 - failure
  --   2 - completed (with errors/warnings)
  x_return_code := NULL;
  BEGIN
    x_result := Main(x_env);
  EXCEPTION
    WHEN OTHERS THEN
      x_result := 1;
      x_return_code := SQLCODE;
  END;

  -- perform post map cleanup

  wb_rt_mapaudit_util.postmap(x_audit_id, x_result, x_return_code);

  -- show results:
  wb_rt_mapaudit_util.show_run_results(x_audit_id);

  -- set return status
  IF x_result = 0 THEN
    p_status := 'OK';
  ELSIF x_result = 1 THEN
    p_status := 'FAILURE';
  ELSE
    p_status := 'OK_WITH_WARNINGS';
  END IF;

END Main;

PROCEDURE Close_Cursors IS
BEGIN
BEGIN
  IF "EVXEVENT_c"%ISOPEN THEN
    CLOSE "EVXEVENT_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "EVXEVENT_c$1"%ISOPEN THEN
    CLOSE "EVXEVENT_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;

END Close_Cursors;



END "OWB_EVENT_DIM";
/


GRANT EXECUTE, DEBUG ON GKDW.OWB_EVENT_DIM TO DWHREAD;

