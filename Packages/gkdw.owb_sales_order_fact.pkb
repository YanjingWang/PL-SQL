DROP PACKAGE BODY GKDW.OWB_SALES_ORDER_FACT;

CREATE OR REPLACE PACKAGE BODY GKDW."OWB_SALES_ORDER_FACT" AS

-- Define cursors here so that they have global scope within the package (for debugger)

---------------------------------------------------------------------------
--
-- "FLTR_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "FLTR_c" IS
  SELECT
  "EVXSO"."EVXSOID" "EVXSOID",
  "PRODUCT_DIM"."PROD_NUM" "PROD_NUM",
  "EVXSO"."SHIPTOADDRESS1" "SHIPTOADDRESS1",
  "EVXSO"."SHIPTOADDRESS2" "SHIPTOADDRESS2",
  "EVXSO"."SHIPTOADDRESS3" "SHIPTOADDRESS3",
  "EVXSO"."SHIPTOCITY" "SHIPTOCITY",
  case upper(trim( "EVXSO"."SHIPTOCOUNTRY"  )) when 'CANADA'  then null  when 'CAN'  then null  else   "EVXSO"."SHIPTOSTATE"  end/* EXPR.OUTGRP1.SHIP_TO_STATE */ "SHIP_TO_STATE",
  case upper(trim( "EVXSO"."SHIPTOCOUNTRY"   )) when 'CANADA'  then  "EVXSO"."SHIPTOSTATE"   when 'CAN'  then  "EVXSO"."SHIPTOSTATE"   else  null end/* EXPR.OUTGRP1.SHIP_TO_PROVINCE */ "SHIP_TO_PROVINCE",
  "EVXSO"."SHIPTOCOUNTRY" "SHIPTOCOUNTRY",
  "EVXSO"."SHIPTOCOUNTY" "SHIPTOCOUNTY",
  "EVXSO"."SHIPTOPOSTAL" "SHIPTOPOSTAL",
  "EVXSO"."BILLTOADDRESS1" "BILLTOADDRESS1",
  "EVXSO"."BILLTOADDRESS2" "BILLTOADDRESS2",
  "EVXSO"."BILLTOADDRESS3" "BILLTOADDRESS3",
  "EVXSO"."BILLTOCITY" "BILLTOCITY",
  case upper(trim( "EVXSO"."BILLTOCOUNTRY"  )) 
when 'CANADA'  
then null  
when 'CAN'  
then null  
else  "EVXSO"."BILLTOSTATE"  
end/* EXPR.OUTGRP1.BILL_TO_STATE */ "BILL_TO_STATE",
  case upper(trim( "EVXSO"."BILLTOCOUNTRY"  )) 
when 'CANADA'  
then "EVXSO"."BILLTOSTATE"    
when 'CAN'  
then "EVXSO"."BILLTOSTATE"    
else  null
end/* EXPR.OUTGRP1.BILL_TO_PROVINCE */ "BILL_TO_PROVINCE",
  "EVXSO"."BILLTOCOUNTRY" "BILLTOCOUNTRY",
  "EVXSO"."BILLTOCOUNTY" "BILLTOCOUNTY",
  "EVXSO"."BILLTOPOSTAL" "BILLTOPOSTAL",
  case "EVXSO"."SOSTATUS" 
when 'Cancelled'
then "EVXSO"."MODIFYDATE" 
else null
end/* EXPR.OUTGRP1.CANCEL_DATE */ "CANCEL_DATE",
  "EVXSO"."SHIPPEDDATE" "SHIPPEDDATE",
  "EVXSO"."CREATEDATE" "CREATEDATE",
  "EVXSO"."MODIFYDATE" "MODIFYDATE",
  case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then upper(trim("EVXSO"."SHIPTOCOUNTRY"))
when '2' then upper(trim("EVXSO"."BILLTOCOUNTRY"))   
end/* EXPR.OUTGRP1.COUNTRY */ "COUNTRY",
  "MARKET_DIM"."TERRITORY" "TERRITORY",
  "MARKET_DIM"."REGION" "REGION",
  "MARKET_DIM"."SALES_REP" "SALES_REP",
  "MARKET_DIM"."REGION_MGR" "REGION_MGR",
  case  "EVXSO"."RECORDTYPECODE"  
when '1' 
then  trunc("EVXSO"."SHIPPEDDATE") 
else trunc( "EVXSO"."CREATEDATE" ) 
end/* EXPR.OUTGRP1.BOOK_DATE */ "BOOK_DATE",
  case  "EVXSO"."RECORDTYPECODE"  
when '1' 
then  trunc("EVXSO"."SHIPPEDDATE") 
else null 
end/* EXPR.OUTGRP1.REV_DATE */ "REV_DATE",
  "EVXSODETAIL"."ACTUALQUANTITYORDERED" "ACTUALQUANTITYORDERED",
  "EVXSO"."TOTALNOTAX" "TOTALNOTAX",
  "EVXSO"."CURRENCYTYPE" "CURRENCYTYPE",
  "EVXSODETAIL"."SOLDBYUSER" "SOLDBYUSER",
  "EVXSO"."OPPORTUNITYID" "OPPORTUNITYID",
  case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then  "EVXSO"."SHIPTOCONTACTID"  
when '2' then  "EVXSO"."BILLTOCONTACTID"  
end/* EXPR.OUTGRP1.CUST_ID */ "CUST_ID",
  "EVXSODETAIL"."PRODUCTID" "PRODUCTID",
  "ORACLETX_HISTORY"."CREATEDATE" "CREATEDATE",
  "EVXSO"."RECORDTYPE" "RECORDTYPE",
  "EVXSO"."RECORDTYPECODE" "RECORDTYPECODE",
  "EVXSO"."SOSTATUS" "SOSTATUS",
  "EVXPPCARD"."EVXPPCARDID" "EVXPPCARDID",
  case upper(trim(  "EVXSO"."ORDEREDBYCOUNTRY"   )) 
when 'CANADA'  
then null  
when 'CAN'  
then null  
else    "EVXSO"."ORDEREDBYSTATE" 
end/* EXPR.OUTGRP1.ORDERED_BY_STATE */ "ORDERED_BY_STATE",
  case upper(trim("EVXSO"."ORDEREDBYCOUNTRY" )) 
when 'CANADA'  
then   "EVXSO"."ORDEREDBYSTATE"  
when 'CAN'  
then   "EVXSO"."ORDEREDBYSTATE"  
else  null 
end/* EXPR.OUTGRP1.ORDERED_BY_PROVINCE */ "ORDERED_BY_PROVINCE",
  "EVXSO"."ORDEREDBYPOSTAL" "ORDEREDBYPOSTAL",
  "EVXSO"."ORDEREDBYCOUNTRY" "ORDEREDBYCOUNTRY",
  "EVXSO"."ORDEREDBYCONTACTID" "ORDEREDBYCONTACTID",
  case upper(trim("CUST_DIM"."COUNTRY" )) 
when 'USA'  
then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  
else  "CUST_DIM"."ZIPCODE"  
end/* EXPR_1.OUTGRP1.ZIP_CODE */ "ZIP_CODE",
  "EVXBILLPAYMENT"."METHOD" "METHOD",
  "EVXSO"."PURCHASEORDER" "PURCHASEORDER",
  "EVXSO"."SOURCE" "SOURCE",
  "EVXSO"."CHANNEL" "CHANNEL"
FROM
    "SLXDW"."EVXSO"  "EVXSO"   
 LEFT OUTER JOIN   "SLXDW"."EVXSODETAIL"  "EVXSODETAIL" ON ( ( "EVXSODETAIL"."EVXSOID" = "EVXSO"."EVXSOID" ) )
 LEFT OUTER JOIN   "PRODUCT_DIM"  "PRODUCT_DIM" ON ( ( "PRODUCT_DIM"."PRODUCT_ID" = "EVXSODETAIL"."PRODUCTID" ) )
 LEFT OUTER JOIN   "CUST_DIM"  "CUST_DIM" ON ( ( "CUST_DIM"."CUST_ID" = (case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then  "EVXSO"."SHIPTOCONTACTID"  
when '2' then  "EVXSO"."BILLTOCONTACTID"  
end/* EXPR.OUTGRP1.CUST_ID */) ) )
 LEFT OUTER JOIN   "MARKET_DIM"  "MARKET_DIM" ON ( ( "MARKET_DIM"."ZIPCODE" = (case upper(trim("CUST_DIM"."COUNTRY" )) 
when 'USA'  
then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  
else  "CUST_DIM"."ZIPCODE"  
end/* EXPR_1.OUTGRP1.ZIP_CODE */) ) )
 LEFT OUTER JOIN   "SLXDW"."ORACLETX_HISTORY"  "ORACLETX_HISTORY" ON ( ( ( "ORACLETX_HISTORY"."TRANSACTIONTYPE" = "OWB_SALES_ORDER_FACT"."GET_CONST_2_TRANSACTION_TYPE" ) ) AND ( ( "ORACLETX_HISTORY"."EVXEVENTID" = "EVXSO"."EVXSOID" ) ) )
 LEFT OUTER JOIN   "SLXDW"."EVXPPCARD"  "EVXPPCARD" ON ( ( "EVXPPCARD"."EVXSOID" = "EVXSO"."EVXSOID" ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLPAYMENT"  "EVXBILLPAYMENT" ON ( ( "EVXBILLPAYMENT"."EVXSOID" = "EVXSO"."EVXSOID" ) )
  WHERE  
  ( "EVXSO"."CREATEDATE" >= "OWB_SALES_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" or "EVXSO"."MODIFYDATE" >= "OWB_SALES_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" ); 

---------------------------------------------------------------------------
--
-- "FLTR_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "FLTR_c$1" IS
  SELECT
  "EVXSO"."EVXSOID" "EVXSOID$1",
  "PRODUCT_DIM"."PROD_NUM" "PROD_NUM",
  "EVXSO"."SHIPTOADDRESS1" "SHIPTOADDRESS1$1",
  "EVXSO"."SHIPTOADDRESS2" "SHIPTOADDRESS2$1",
  "EVXSO"."SHIPTOADDRESS3" "SHIPTOADDRESS3$1",
  "EVXSO"."SHIPTOCITY" "SHIPTOCITY$1",
  case upper(trim( "EVXSO"."SHIPTOCOUNTRY"  )) when 'CANADA'  then null  when 'CAN'  then null  else   "EVXSO"."SHIPTOSTATE"  end/* EXPR.OUTGRP1.SHIP_TO_STATE */ "SHIP_TO_STATE",
  case upper(trim( "EVXSO"."SHIPTOCOUNTRY"   )) when 'CANADA'  then  "EVXSO"."SHIPTOSTATE"   when 'CAN'  then  "EVXSO"."SHIPTOSTATE"   else  null end/* EXPR.OUTGRP1.SHIP_TO_PROVINCE */ "SHIP_TO_PROVINCE",
  "EVXSO"."SHIPTOCOUNTRY" "SHIPTOCOUNTRY$1",
  "EVXSO"."SHIPTOCOUNTY" "SHIPTOCOUNTY$1",
  "EVXSO"."SHIPTOPOSTAL" "SHIPTOPOSTAL$1",
  "EVXSO"."BILLTOADDRESS1" "BILLTOADDRESS1$1",
  "EVXSO"."BILLTOADDRESS2" "BILLTOADDRESS2$1",
  "EVXSO"."BILLTOADDRESS3" "BILLTOADDRESS3$1",
  "EVXSO"."BILLTOCITY" "BILLTOCITY$1",
  case upper(trim( "EVXSO"."BILLTOCOUNTRY"  )) 
when 'CANADA'  
then null  
when 'CAN'  
then null  
else  "EVXSO"."BILLTOSTATE"  
end/* EXPR.OUTGRP1.BILL_TO_STATE */ "BILL_TO_STATE",
  case upper(trim( "EVXSO"."BILLTOCOUNTRY"  )) 
when 'CANADA'  
then "EVXSO"."BILLTOSTATE"    
when 'CAN'  
then "EVXSO"."BILLTOSTATE"    
else  null
end/* EXPR.OUTGRP1.BILL_TO_PROVINCE */ "BILL_TO_PROVINCE",
  "EVXSO"."BILLTOCOUNTRY" "BILLTOCOUNTRY$1",
  "EVXSO"."BILLTOCOUNTY" "BILLTOCOUNTY$1",
  "EVXSO"."BILLTOPOSTAL" "BILLTOPOSTAL$1",
  case "EVXSO"."SOSTATUS" 
when 'Cancelled'
then "EVXSO"."MODIFYDATE" 
else null
end/* EXPR.OUTGRP1.CANCEL_DATE */ "CANCEL_DATE",
  "EVXSO"."SHIPPEDDATE" "SHIPPEDDATE$1",
  "EVXSO"."CREATEDATE" "CREATEDATE$1",
  "EVXSO"."MODIFYDATE" "MODIFYDATE$1",
  case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then upper(trim("EVXSO"."SHIPTOCOUNTRY"))
when '2' then upper(trim("EVXSO"."BILLTOCOUNTRY"))   
end/* EXPR.OUTGRP1.COUNTRY */ "COUNTRY",
  "MARKET_DIM"."TERRITORY" "TERRITORY",
  "MARKET_DIM"."REGION" "REGION",
  "MARKET_DIM"."SALES_REP" "SALES_REP",
  "MARKET_DIM"."REGION_MGR" "REGION_MGR",
  case  "EVXSO"."RECORDTYPECODE"  
when '1' 
then  trunc("EVXSO"."SHIPPEDDATE") 
else trunc( "EVXSO"."CREATEDATE" ) 
end/* EXPR.OUTGRP1.BOOK_DATE */ "BOOK_DATE",
  case  "EVXSO"."RECORDTYPECODE"  
when '1' 
then  trunc("EVXSO"."SHIPPEDDATE") 
else null 
end/* EXPR.OUTGRP1.REV_DATE */ "REV_DATE",
  "EVXSODETAIL"."ACTUALQUANTITYORDERED" "ACTUALQUANTITYORDERED",
  "EVXSO"."TOTALNOTAX" "TOTALNOTAX$1",
  "EVXSO"."CURRENCYTYPE" "CURRENCYTYPE$1",
  "EVXSODETAIL"."SOLDBYUSER" "SOLDBYUSER",
  "EVXSO"."OPPORTUNITYID" "OPPORTUNITYID$1",
  case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then  "EVXSO"."SHIPTOCONTACTID"  
when '2' then  "EVXSO"."BILLTOCONTACTID"  
end/* EXPR.OUTGRP1.CUST_ID */ "CUST_ID",
  "EVXSODETAIL"."PRODUCTID" "PRODUCTID",
  "ORACLETX_HISTORY"."CREATEDATE" "CREATEDATE",
  "EVXSO"."RECORDTYPE" "RECORDTYPE$1",
  "EVXSO"."RECORDTYPECODE" "RECORDTYPECODE$1",
  "EVXSO"."SOSTATUS" "SOSTATUS$1",
  "EVXPPCARD"."EVXPPCARDID" "EVXPPCARDID",
  case upper(trim(  "EVXSO"."ORDEREDBYCOUNTRY"   )) 
when 'CANADA'  
then null  
when 'CAN'  
then null  
else    "EVXSO"."ORDEREDBYSTATE" 
end/* EXPR.OUTGRP1.ORDERED_BY_STATE */ "ORDERED_BY_STATE",
  case upper(trim("EVXSO"."ORDEREDBYCOUNTRY" )) 
when 'CANADA'  
then   "EVXSO"."ORDEREDBYSTATE"  
when 'CAN'  
then   "EVXSO"."ORDEREDBYSTATE"  
else  null 
end/* EXPR.OUTGRP1.ORDERED_BY_PROVINCE */ "ORDERED_BY_PROVINCE",
  "EVXSO"."ORDEREDBYPOSTAL" "ORDEREDBYPOSTAL$1",
  "EVXSO"."ORDEREDBYCOUNTRY" "ORDEREDBYCOUNTRY$1",
  "EVXSO"."ORDEREDBYCONTACTID" "ORDEREDBYCONTACTID$1",
  case upper(trim("CUST_DIM"."COUNTRY" )) 
when 'USA'  
then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  
else  "CUST_DIM"."ZIPCODE"  
end/* EXPR_1.OUTGRP1.ZIP_CODE */ "ZIP_CODE",
  "EVXBILLPAYMENT"."METHOD" "METHOD",
  "EVXSO"."PURCHASEORDER" "PURCHASEORDER$1",
  "EVXSO"."SOURCE" "SOURCE$1",
  "EVXSO"."CHANNEL" "CHANNEL$1"
FROM
    "SLXDW"."EVXSO"  "EVXSO"   
 LEFT OUTER JOIN   "SLXDW"."EVXSODETAIL"  "EVXSODETAIL" ON ( ( "EVXSODETAIL"."EVXSOID" = "EVXSO"."EVXSOID" ) )
 LEFT OUTER JOIN   "PRODUCT_DIM"  "PRODUCT_DIM" ON ( ( "PRODUCT_DIM"."PRODUCT_ID" = "EVXSODETAIL"."PRODUCTID" ) )
 LEFT OUTER JOIN   "CUST_DIM"  "CUST_DIM" ON ( ( "CUST_DIM"."CUST_ID" = (case  trim("EVXSO"."RECORDTYPECODE" ) when '1' 
then  "EVXSO"."SHIPTOCONTACTID"  
when '2' then  "EVXSO"."BILLTOCONTACTID"  
end/* EXPR.OUTGRP1.CUST_ID */) ) )
 LEFT OUTER JOIN   "MARKET_DIM"  "MARKET_DIM" ON ( ( "MARKET_DIM"."ZIPCODE" = (case upper(trim("CUST_DIM"."COUNTRY" )) 
when 'USA'  
then  SUBSTR( "CUST_DIM"."ZIPCODE",1, 5)  
else  "CUST_DIM"."ZIPCODE"  
end/* EXPR_1.OUTGRP1.ZIP_CODE */) ) )
 LEFT OUTER JOIN   "SLXDW"."ORACLETX_HISTORY"  "ORACLETX_HISTORY" ON ( ( ( "ORACLETX_HISTORY"."TRANSACTIONTYPE" = "OWB_SALES_ORDER_FACT"."GET_CONST_2_TRANSACTION_TYPE" ) ) AND ( ( "ORACLETX_HISTORY"."EVXEVENTID" = "EVXSO"."EVXSOID" ) ) )
 LEFT OUTER JOIN   "SLXDW"."EVXPPCARD"  "EVXPPCARD" ON ( ( "EVXPPCARD"."EVXSOID" = "EVXSO"."EVXSOID" ) )
 LEFT OUTER JOIN   "SLXDW"."EVXBILLPAYMENT"  "EVXBILLPAYMENT" ON ( ( "EVXBILLPAYMENT"."EVXSOID" = "EVXSO"."EVXSOID" ) )
  WHERE 
  ( "EVXSO"."CREATEDATE" >= "OWB_SALES_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" or "EVXSO"."MODIFYDATE" >= "OWB_SALES_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" ); 


a_table_to_analyze a_table_to_analyze_type;


PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
FUNCTION "GET_CONST_0_TABLE_NAME" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_0_TABLE_NAME";
END "GET_CONST_0_TABLE_NAME";
FUNCTION "GET_CONST_1_SOURCE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_1_SOURCE";
END "GET_CONST_1_SOURCE";
FUNCTION "GET_CONST_2_TRANSACTION_TYPE" RETURN VARCHAR2 IS
BEGIN
  RETURN "CONST_2_TRANSACTION_TYPE";
END "GET_CONST_2_TRANSACTION_TYPE";
FUNCTION "get_PREMAPPING_1_CREATE_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_1_CREATE_DATE_OUT";
END "get_PREMAPPING_1_CREATE_DATE_O";
FUNCTION "get_PREMAPPING_2_MODIFY_DATE_O" RETURN DATE IS
BEGIN
  RETURN "PREMAPPING_2_MODIFY_DATE_OUT";
END "get_PREMAPPING_2_MODIFY_DATE_O";





-- Procedure "FLTR_p" is the entry point for map "FLTR_p"

PROCEDURE "FLTR_p"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"FLTR_p"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19BA065678E040007F01006C7D,A41FFB19B9B25678E040007F01006C7D,A41FFB19B9805678E040007F01006C7D,A41FFB19BA045678E040007F01006C7D,A41FFB19B9B15678E040007F01006C7D,A41FFB19B9815678E040007F01006C7D,A41FFB19BA075678E040007F01006C7D,A41FFB19B9825678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"SALES_ORDER_FACT_id" NUMBER(22) := 0;
"SALES_ORDER_FACT_ins" NUMBER(22) := 0;
"SALES_ORDER_FACT_upd" NUMBER(22) := 0;
"SALES_ORDER_FACT_del" NUMBER(22) := 0;
"SALES_ORDER_FACT_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"SALES_ORDER_FACT_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"SALES_ORDER_FACT_ir"  index_redirect_array;
"SV_SALES_ORDER_FACT_srk" NUMBER;
"SALES_ORDER_FACT_new"  BOOLEAN;
"SALES_ORDER_FACT_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"FLTR_si" NUMBER(22) := 0;

"FLTR_i" NUMBER(22) := 0;


"SALES_ORDER_FACT_si" NUMBER(22) := 0;

"SALES_ORDER_FACT_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_FLTR_2_EVXSOID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_FLTR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_PRODUCT_DIM_2_PROD_NUM" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_GET_LEAD_1_LEADSOUR" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_60_SHIPTOADDRESS1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_61_SHIPTOADDRESS2" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_62_SHIPTOADDRESS3" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_64_SHIPTOCITY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_15_SHIP_TO_STATE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_16_SHIP_TO_PROVINCE" IS TABLE OF VARCHAR2(49) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_68_SHIPTOCOUNTRY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_69_SHIPTOCOUNTY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_70_SHIPTOPOSTAL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_11_BILLTOADDRESS1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_12_BILLTOADDRESS2" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_13_BILLTOADDRESS3" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_16_BILLTOCITY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_17_BILL_TO_STATE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_18_BILL_TO_PROVINCE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_19_BILLTOCOUNTRY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_20_BILLTOCOUNTY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_21_BILLTOPOSTAL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_22_CANCEL_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_57_SHIPPEDDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_4_CREATEDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_6_MODIFYDATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_21_COUNTRY" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_3_TERRITORY" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_4_REGION" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_5_SALES_REP" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_6_REGION_MGR" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_26_BOOK_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_23_REV_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODET_11_ACTUALQU" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_90_TOTALNOTAX" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_23_CURRENCYTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODETAIL_57_SOLDBYUSER" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_34_OPPORTUNITYID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_19_CUST_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODETAIL_32_PRODUCTID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORACLETX_HISTORY_4_CREATEDA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_52_RECORDTYPE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_53_RECORDTYPECODE" IS TABLE OF VARCHAR2(3) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_80_SOSTATUS" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXPPCARD_1_EVXPPCARDID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_PP_S_1_PP_SALES" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_24_ORDERED_BY_STATE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_25_ORDERED_BY_PROVINCE" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_47_ORDEREDBYPOSTAL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_46_ORDEREDBYCOUNTRY" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_45_ORDEREDBYCONTACTID" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_1_2_ZIP_CODE" IS TABLE OF VARCHAR(35) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_31_METHOD" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_51_PURCHASEORDER" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_95_SOURCE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_96_CHANNEL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_0_SALES_OR" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_1_PROD_NUM" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_3_KEYCODE" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_4_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_5_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_6_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_7_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_8_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_9_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_10_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_11_SHIP_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_12_SHIP_TO_" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_13_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_14_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_15_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_16_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_17_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_18_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_19_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_20_BILL_TO_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_21_BILL_TO_" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_22_CANCEL_D" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_23_SHIP_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_24_CREATION" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_25_LAST_UPD" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_30_GKDW_SOU" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_33_COUNTRY" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_35_TERRITO" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_36_REGION" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_37_SALES_R" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_38_REGION_R" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_39_BOOK_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_40_REV_DATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_41_QUANTITY" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_42_BOOK_AMT" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_43_CURR_CO" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_45_SALESPER" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_47_OPPORTUN" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_51_CUST_ID" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_52_PRODUCT_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_53_BILL_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_54_RECORD_T" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_55_RECORD_T" IS TABLE OF VARCHAR2(3) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_56_SO_STAT" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_57_PPCARD_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_59_PP_SALES" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_60_ORDERED_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_61_ORDERED_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_62_ORDERED_" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_63_ORDERED_" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_64_ORDERED_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_65_CUST_ID_" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_66_PAYMENT_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_67_PO_NUMB" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_70_SOURCE" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_71_CHANNEL" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_FLTR_2_EVXSOID"  CHAR(12);
"SV_ROWKEY_FLTR"  VARCHAR2(18);
"SV_PRODUCT_DIM_2_PROD_NUM"  VARCHAR2(100);
"SV_GET_LEAD_1_LEADSOUR"  VARCHAR2(32767);
"SV_FLTR_60_SHIPTOADDRESS1"  VARCHAR2(64);
"SV_FLTR_61_SHIPTOADDRESS2"  VARCHAR2(64);
"SV_FLTR_62_SHIPTOADDRESS3"  VARCHAR2(64);
"SV_FLTR_64_SHIPTOCITY"  VARCHAR2(32);
"SV_EXPR_15_SHIP_TO_STATE"  VARCHAR2(50);
"SV_EXPR_16_SHIP_TO_PROVINCE"  VARCHAR2(49);
"SV_FLTR_68_SHIPTOCOUNTRY"  VARCHAR2(32);
"SV_FLTR_69_SHIPTOCOUNTY"  VARCHAR2(32);
"SV_FLTR_70_SHIPTOPOSTAL"  VARCHAR2(32);
"SV_FLTR_11_BILLTOADDRESS1"  VARCHAR2(64);
"SV_FLTR_12_BILLTOADDRESS2"  VARCHAR2(64);
"SV_FLTR_13_BILLTOADDRESS3"  VARCHAR2(64);
"SV_FLTR_16_BILLTOCITY"  VARCHAR2(32);
"SV_EXPR_17_BILL_TO_STATE"  VARCHAR2(50);
"SV_EXPR_18_BILL_TO_PROVINCE"  VARCHAR2(50);
"SV_FLTR_19_BILLTOCOUNTRY"  VARCHAR2(32);
"SV_FLTR_20_BILLTOCOUNTY"  VARCHAR2(32);
"SV_FLTR_21_BILLTOPOSTAL"  VARCHAR2(32);
"SV_EXPR_22_CANCEL_DATE"  DATE;
"SV_FLTR_57_SHIPPEDDATE"  DATE;
"SV_FLTR_4_CREATEDATE"  DATE;
"SV_FLTR_6_MODIFYDATE"  DATE;
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_EXPR_21_COUNTRY"  VARCHAR2(50);
"SV_MARKET_DIM_3_TERRITORY"  VARCHAR2(25);
"SV_MARKET_DIM_4_REGION"  VARCHAR2(50);
"SV_MARKET_DIM_5_SALES_REP"  VARCHAR2(100);
"SV_MARKET_DIM_6_REGION_MGR"  VARCHAR2(100);
"SV_EXPR_26_BOOK_DATE"  DATE;
"SV_EXPR_23_REV_DATE"  DATE;
"SV_EVXSODET_11_ACTUALQU"  NUMBER;
"SV_FLTR_90_TOTALNOTAX"  NUMBER;
"SV_FLTR_23_CURRENCYTYPE"  VARCHAR2(32);
"SV_EVXSODETAIL_57_SOLDBYUSER"  VARCHAR2(32);
"SV_FLTR_34_OPPORTUNITYID"  CHAR(12);
"SV_EXPR_19_CUST_ID"  VARCHAR2(50);
"SV_EVXSODETAIL_32_PRODUCTID"  CHAR(12);
"SV_ORACLETX_HISTORY_4_CREATEDA"  DATE;
"SV_FLTR_52_RECORDTYPE"  VARCHAR2(32);
"SV_FLTR_53_RECORDTYPECODE"  VARCHAR2(3);
"SV_FLTR_80_SOSTATUS"  VARCHAR2(32);
"SV_EVXPPCARD_1_EVXPPCARDID"  CHAR(12);
"SV_GET_PP_S_1_PP_SALES"  VARCHAR2(32767);
"SV_EXPR_24_ORDERED_BY_STATE"  VARCHAR2(50);
"SV_EXPR_25_ORDERED_BY_PROVINCE"  VARCHAR2(50);
"SV_FLTR_47_ORDEREDBYPOSTAL"  VARCHAR2(32);
"SV_FLTR_46_ORDEREDBYCOUNTRY"  VARCHAR2(32);
"SV_FLTR_45_ORDEREDBYCONTACTID"  CHAR(12);
"SV_EXPR_1_2_ZIP_CODE"  VARCHAR(35);
"SV_EVXBILLPAYMENT_31_METHOD"  VARCHAR2(32);
"SV_FLTR_51_PURCHASEORDER"  VARCHAR2(32);
"SV_FLTR_95_SOURCE"  VARCHAR2(32);
"SV_FLTR_96_CHANNEL"  VARCHAR2(32);
"SV_SALES_OR_0_SALES_OR"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_1_PROD_NUM"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_3_KEYCODE"  VARCHAR2(25);
"SV_SALES_OR_4_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_5_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_6_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_7_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_8_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_9_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_10_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_11_SHIP_TO_"  VARCHAR2(250);
"SV_SALES_OR_12_SHIP_TO_"  VARCHAR2(35);
"SV_SALES_OR_13_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_14_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_15_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_16_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_17_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_18_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_19_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_20_BILL_TO_"  VARCHAR2(250);
"SV_SALES_OR_21_BILL_TO_"  VARCHAR2(35);
"SV_SALES_OR_22_CANCEL_D"  DATE;
"SV_SALES_ORDER_FACT_23_SHIP_DA"  DATE;
"SV_SALES_OR_24_CREATION"  DATE;
"SV_SALES_OR_25_LAST_UPD"  DATE;
"SV_SALES_OR_30_GKDW_SOU"  VARCHAR2(20);
"SV_SALES_ORDER_FACT_33_COUNTRY"  VARCHAR2(250);
"SV_SALES_ORDER_FACT_35_TERRITO"  VARCHAR2(25);
"SV_SALES_ORDER_FACT_36_REGION"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_37_SALES_R"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_38_REGION"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_39_BOOK_DA"  DATE;
"SV_SALES_ORDER_FACT_40_REV_DA"  DATE;
"SV_SALES_ORDER_FACT_41_QUANTI"  NUMBER;
"SV_SALES_ORDER_FACT_42_BOOK_A"  NUMBER;
"SV_SALES_ORDER_FACT_43_CURR_CO"  VARCHAR2(35);
"SV_SALES_OR_45_SALESPER"  VARCHAR2(250);
"SV_SALES_OR_47_OPPORTUN"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_51_CUST_ID"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_52_PRODUC"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_53_BILL_DA"  DATE;
"SV_SALES_OR_54_RECORD_T"  VARCHAR2(50);
"SV_SALES_OR_55_RECORD_T"  VARCHAR2(3);
"SV_SALES_ORDER_FACT_56_SO_STAT"  VARCHAR2(35);
"SV_SALES_ORDER_FACT_57_PPCARD_"  VARCHAR2(50);
"SV_SALES_OR_59_PP_SALES"  VARCHAR2(50);
"SV_SALES_OR_60_ORDERED_"  VARCHAR2(250);
"SV_SALES_OR_61_ORDERED_"  VARCHAR2(250);
"SV_SALES_OR_62_ORDERED_"  VARCHAR2(35);
"SV_SALES_OR_63_ORDERED_"  VARCHAR2(250);
"SV_SALES_OR_64_ORDERED_"  VARCHAR2(50);
"SV_SALES_OR_65_CUST_ID_"  VARCHAR2(35);
"SV_SALES_OR_66_PAYMENT_"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_67_PO_NUMB"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_70_SOURCE"  VARCHAR2(32);
"SV_SALES_ORDER_FACT_71_CHANNEL"  VARCHAR2(32);

-- Bulk: intermediate collection variables
"FLTR_2_EVXSOID" "T_FLTR_2_EVXSOID";
"ROWKEY_FLTR" "T_ROWKEY_FLTR";
"PRODUCT_DIM_2_PROD_NUM" "T_PRODUCT_DIM_2_PROD_NUM";
"GET_LEAD_1_LEADSOUR" "T_GET_LEAD_1_LEADSOUR";
"FLTR_60_SHIPTOADDRESS1" "T_FLTR_60_SHIPTOADDRESS1";
"FLTR_61_SHIPTOADDRESS2" "T_FLTR_61_SHIPTOADDRESS2";
"FLTR_62_SHIPTOADDRESS3" "T_FLTR_62_SHIPTOADDRESS3";
"FLTR_64_SHIPTOCITY" "T_FLTR_64_SHIPTOCITY";
"EXPR_15_SHIP_TO_STATE" "T_EXPR_15_SHIP_TO_STATE";
"EXPR_16_SHIP_TO_PROVINCE" "T_EXPR_16_SHIP_TO_PROVINCE";
"FLTR_68_SHIPTOCOUNTRY" "T_FLTR_68_SHIPTOCOUNTRY";
"FLTR_69_SHIPTOCOUNTY" "T_FLTR_69_SHIPTOCOUNTY";
"FLTR_70_SHIPTOPOSTAL" "T_FLTR_70_SHIPTOPOSTAL";
"FLTR_11_BILLTOADDRESS1" "T_FLTR_11_BILLTOADDRESS1";
"FLTR_12_BILLTOADDRESS2" "T_FLTR_12_BILLTOADDRESS2";
"FLTR_13_BILLTOADDRESS3" "T_FLTR_13_BILLTOADDRESS3";
"FLTR_16_BILLTOCITY" "T_FLTR_16_BILLTOCITY";
"EXPR_17_BILL_TO_STATE" "T_EXPR_17_BILL_TO_STATE";
"EXPR_18_BILL_TO_PROVINCE" "T_EXPR_18_BILL_TO_PROVINCE";
"FLTR_19_BILLTOCOUNTRY" "T_FLTR_19_BILLTOCOUNTRY";
"FLTR_20_BILLTOCOUNTY" "T_FLTR_20_BILLTOCOUNTY";
"FLTR_21_BILLTOPOSTAL" "T_FLTR_21_BILLTOPOSTAL";
"EXPR_22_CANCEL_DATE" "T_EXPR_22_CANCEL_DATE";
"FLTR_57_SHIPPEDDATE" "T_FLTR_57_SHIPPEDDATE";
"FLTR_4_CREATEDATE" "T_FLTR_4_CREATEDATE";
"FLTR_6_MODIFYDATE" "T_FLTR_6_MODIFYDATE";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"EXPR_21_COUNTRY" "T_EXPR_21_COUNTRY";
"MARKET_DIM_3_TERRITORY" "T_MARKET_DIM_3_TERRITORY";
"MARKET_DIM_4_REGION" "T_MARKET_DIM_4_REGION";
"MARKET_DIM_5_SALES_REP" "T_MARKET_DIM_5_SALES_REP";
"MARKET_DIM_6_REGION_MGR" "T_MARKET_DIM_6_REGION_MGR";
"EXPR_26_BOOK_DATE" "T_EXPR_26_BOOK_DATE";
"EXPR_23_REV_DATE" "T_EXPR_23_REV_DATE";
"EVXSODET_11_ACTUALQU" "T_EVXSODET_11_ACTUALQU";
"FLTR_90_TOTALNOTAX" "T_FLTR_90_TOTALNOTAX";
"FLTR_23_CURRENCYTYPE" "T_FLTR_23_CURRENCYTYPE";
"EVXSODETAIL_57_SOLDBYUSER" "T_EVXSODETAIL_57_SOLDBYUSER";
"FLTR_34_OPPORTUNITYID" "T_FLTR_34_OPPORTUNITYID";
"EXPR_19_CUST_ID" "T_EXPR_19_CUST_ID";
"EVXSODETAIL_32_PRODUCTID" "T_EVXSODETAIL_32_PRODUCTID";
"ORACLETX_HISTORY_4_CREATEDATE" "T_ORACLETX_HISTORY_4_CREATEDA";
"FLTR_52_RECORDTYPE" "T_FLTR_52_RECORDTYPE";
"FLTR_53_RECORDTYPECODE" "T_FLTR_53_RECORDTYPECODE";
"FLTR_80_SOSTATUS" "T_FLTR_80_SOSTATUS";
"EVXPPCARD_1_EVXPPCARDID" "T_EVXPPCARD_1_EVXPPCARDID";
"GET_PP_S_1_PP_SALES" "T_GET_PP_S_1_PP_SALES";
"EXPR_24_ORDERED_BY_STATE" "T_EXPR_24_ORDERED_BY_STATE";
"EXPR_25_ORDERED_BY_PROVINCE" "T_EXPR_25_ORDERED_BY_PROVINCE";
"FLTR_47_ORDEREDBYPOSTAL" "T_FLTR_47_ORDEREDBYPOSTAL";
"FLTR_46_ORDEREDBYCOUNTRY" "T_FLTR_46_ORDEREDBYCOUNTRY";
"FLTR_45_ORDEREDBYCONTACTID" "T_FLTR_45_ORDEREDBYCONTACTID";
"EXPR_1_2_ZIP_CODE" "T_EXPR_1_2_ZIP_CODE";
"EVXBILLPAYMENT_31_METHOD" "T_EVXBILLPAYMENT_31_METHOD";
"FLTR_51_PURCHASEORDER" "T_FLTR_51_PURCHASEORDER";
"FLTR_95_SOURCE" "T_FLTR_95_SOURCE";
"FLTR_96_CHANNEL" "T_FLTR_96_CHANNEL";
"SALES_OR_0_SALES_OR" "T_SALES_OR_0_SALES_OR";
"SALES_ORDER_FACT_1_PROD_NUM" "T_SALES_ORDER_FACT_1_PROD_NUM";
"SALES_ORDER_FACT_3_KEYCODE" "T_SALES_ORDER_FACT_3_KEYCODE";
"SALES_OR_4_SHIP_TO_" "T_SALES_OR_4_SHIP_TO_";
"SALES_OR_5_SHIP_TO_" "T_SALES_OR_5_SHIP_TO_";
"SALES_OR_6_SHIP_TO_" "T_SALES_OR_6_SHIP_TO_";
"SALES_OR_7_SHIP_TO_" "T_SALES_OR_7_SHIP_TO_";
"SALES_OR_8_SHIP_TO_" "T_SALES_OR_8_SHIP_TO_";
"SALES_OR_9_SHIP_TO_" "T_SALES_OR_9_SHIP_TO_";
"SALES_OR_10_SHIP_TO_" "T_SALES_OR_10_SHIP_TO_";
"SALES_OR_11_SHIP_TO_" "T_SALES_OR_11_SHIP_TO_";
"SALES_OR_12_SHIP_TO_" "T_SALES_OR_12_SHIP_TO_";
"SALES_OR_13_BILL_TO_" "T_SALES_OR_13_BILL_TO_";
"SALES_OR_14_BILL_TO_" "T_SALES_OR_14_BILL_TO_";
"SALES_OR_15_BILL_TO_" "T_SALES_OR_15_BILL_TO_";
"SALES_OR_16_BILL_TO_" "T_SALES_OR_16_BILL_TO_";
"SALES_OR_17_BILL_TO_" "T_SALES_OR_17_BILL_TO_";
"SALES_OR_18_BILL_TO_" "T_SALES_OR_18_BILL_TO_";
"SALES_OR_19_BILL_TO_" "T_SALES_OR_19_BILL_TO_";
"SALES_OR_20_BILL_TO_" "T_SALES_OR_20_BILL_TO_";
"SALES_OR_21_BILL_TO_" "T_SALES_OR_21_BILL_TO_";
"SALES_OR_22_CANCEL_D" "T_SALES_OR_22_CANCEL_D";
"SALES_ORDER_FACT_23_SHIP_DATE" "T_SALES_ORDER_FACT_23_SHIP_DA";
"SALES_OR_24_CREATION" "T_SALES_OR_24_CREATION";
"SALES_OR_25_LAST_UPD" "T_SALES_OR_25_LAST_UPD";
"SALES_OR_30_GKDW_SOU" "T_SALES_OR_30_GKDW_SOU";
"SALES_ORDER_FACT_33_COUNTRY" "T_SALES_ORDER_FACT_33_COUNTRY";
"SALES_ORDER_FACT_35_TERRITORY" "T_SALES_ORDER_FACT_35_TERRITO";
"SALES_ORDER_FACT_36_REGION" "T_SALES_ORDER_FACT_36_REGION";
"SALES_ORDER_FACT_37_SALES_REP" "T_SALES_ORDER_FACT_37_SALES_R";
"SALES_ORDER_FACT_38_REGION_REP" "T_SALES_ORDER_FACT_38_REGION_R";
"SALES_ORDER_FACT_39_BOOK_DATE" "T_SALES_ORDER_FACT_39_BOOK_DA";
"SALES_ORDER_FACT_40_REV_DATE" "T_SALES_ORDER_FACT_40_REV_DATE";
"SALES_ORDER_FACT_41_QUANTITY" "T_SALES_ORDER_FACT_41_QUANTITY";
"SALES_ORDER_FACT_42_BOOK_AMT" "T_SALES_ORDER_FACT_42_BOOK_AMT";
"SALES_ORDER_FACT_43_CURR_CODE" "T_SALES_ORDER_FACT_43_CURR_CO";
"SALES_OR_45_SALESPER" "T_SALES_OR_45_SALESPER";
"SALES_OR_47_OPPORTUN" "T_SALES_OR_47_OPPORTUN";
"SALES_ORDER_FACT_51_CUST_ID" "T_SALES_ORDER_FACT_51_CUST_ID";
"SALES_ORDER_FACT_52_PRODUCT_ID" "T_SALES_ORDER_FACT_52_PRODUCT_";
"SALES_ORDER_FACT_53_BILL_DATE" "T_SALES_ORDER_FACT_53_BILL_DA";
"SALES_OR_54_RECORD_T" "T_SALES_OR_54_RECORD_T";
"SALES_OR_55_RECORD_T" "T_SALES_OR_55_RECORD_T";
"SALES_ORDER_FACT_56_SO_STATUS" "T_SALES_ORDER_FACT_56_SO_STAT";
"SALES_ORDER_FACT_57_PPCARD_ID" "T_SALES_ORDER_FACT_57_PPCARD_";
"SALES_OR_59_PP_SALES" "T_SALES_OR_59_PP_SALES";
"SALES_OR_60_ORDERED_" "T_SALES_OR_60_ORDERED_";
"SALES_OR_61_ORDERED_" "T_SALES_OR_61_ORDERED_";
"SALES_OR_62_ORDERED_" "T_SALES_OR_62_ORDERED_";
"SALES_OR_63_ORDERED_" "T_SALES_OR_63_ORDERED_";
"SALES_OR_64_ORDERED_" "T_SALES_OR_64_ORDERED_";
"SALES_OR_65_CUST_ID_" "T_SALES_OR_65_CUST_ID_";
"SALES_OR_66_PAYMENT_" "T_SALES_OR_66_PAYMENT_";
"SALES_ORDER_FACT_67_PO_NUMBER" "T_SALES_ORDER_FACT_67_PO_NUMB";
"SALES_ORDER_FACT_70_SOURCE" "T_SALES_ORDER_FACT_70_SOURCE";
"SALES_ORDER_FACT_71_CHANNEL" "T_SALES_ORDER_FACT_71_CHANNEL";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "FLTR_ES"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_2_EVXSOID',0,80),
    p_value=>SUBSTRB("FLTR_2_EVXSOID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('PRODUCT_DIM_2_PROD_NUM',0,80),
    p_value=>SUBSTRB("PRODUCT_DIM_2_PROD_NUM"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_60_SHIPTOADDRESS1',0,80),
    p_value=>SUBSTRB("FLTR_60_SHIPTOADDRESS1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_61_SHIPTOADDRESS2',0,80),
    p_value=>SUBSTRB("FLTR_61_SHIPTOADDRESS2"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_62_SHIPTOADDRESS3',0,80),
    p_value=>SUBSTRB("FLTR_62_SHIPTOADDRESS3"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_64_SHIPTOCITY',0,80),
    p_value=>SUBSTRB("FLTR_64_SHIPTOCITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_15_SHIP_TO_STATE',0,80),
    p_value=>SUBSTRB("EXPR_15_SHIP_TO_STATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_16_SHIP_TO_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_16_SHIP_TO_PROVINCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_68_SHIPTOCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_68_SHIPTOCOUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_69_SHIPTOCOUNTY',0,80),
    p_value=>SUBSTRB("FLTR_69_SHIPTOCOUNTY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_70_SHIPTOPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_70_SHIPTOPOSTAL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_11_BILLTOADDRESS1',0,80),
    p_value=>SUBSTRB("FLTR_11_BILLTOADDRESS1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_12_BILLTOADDRESS2',0,80),
    p_value=>SUBSTRB("FLTR_12_BILLTOADDRESS2"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_13_BILLTOADDRESS3',0,80),
    p_value=>SUBSTRB("FLTR_13_BILLTOADDRESS3"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_16_BILLTOCITY',0,80),
    p_value=>SUBSTRB("FLTR_16_BILLTOCITY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_17_BILL_TO_STATE',0,80),
    p_value=>SUBSTRB("EXPR_17_BILL_TO_STATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_18_BILL_TO_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_18_BILL_TO_PROVINCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_19_BILLTOCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_19_BILLTOCOUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_20_BILLTOCOUNTY',0,80),
    p_value=>SUBSTRB("FLTR_20_BILLTOCOUNTY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_21_BILLTOPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_21_BILLTOPOSTAL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_22_CANCEL_DATE',0,80),
    p_value=>SUBSTRB("EXPR_22_CANCEL_DATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_57_SHIPPEDDATE',0,80),
    p_value=>SUBSTRB("FLTR_57_SHIPPEDDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_4_CREATEDATE',0,80),
    p_value=>SUBSTRB("FLTR_4_CREATEDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_6_MODIFYDATE',0,80),
    p_value=>SUBSTRB("FLTR_6_MODIFYDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_21_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_21_COUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_3_TERRITORY',0,80),
    p_value=>SUBSTRB("MARKET_DIM_3_TERRITORY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_4_REGION',0,80),
    p_value=>SUBSTRB("MARKET_DIM_4_REGION"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_5_SALES_REP',0,80),
    p_value=>SUBSTRB("MARKET_DIM_5_SALES_REP"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_6_REGION_MGR',0,80),
    p_value=>SUBSTRB("MARKET_DIM_6_REGION_MGR"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_26_BOOK_DATE',0,80),
    p_value=>SUBSTRB("EXPR_26_BOOK_DATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_23_REV_DATE',0,80),
    p_value=>SUBSTRB("EXPR_23_REV_DATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODET_11_ACTUALQU',0,80),
    p_value=>SUBSTRB("EVXSODET_11_ACTUALQU"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_90_TOTALNOTAX',0,80),
    p_value=>SUBSTRB("FLTR_90_TOTALNOTAX"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_23_CURRENCYTYPE',0,80),
    p_value=>SUBSTRB("FLTR_23_CURRENCYTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODETAIL_57_SOLDBYUSER',0,80),
    p_value=>SUBSTRB("EVXSODETAIL_57_SOLDBYUSER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_34_OPPORTUNITYID',0,80),
    p_value=>SUBSTRB("FLTR_34_OPPORTUNITYID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_19_CUST_ID',0,80),
    p_value=>SUBSTRB("EXPR_19_CUST_ID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODETAIL_32_PRODUCTID',0,80),
    p_value=>SUBSTRB("EVXSODETAIL_32_PRODUCTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('ORACLETX_HISTORY_4_CREATEDATE',0,80),
    p_value=>SUBSTRB("ORACLETX_HISTORY_4_CREATEDATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_52_RECORDTYPE',0,80),
    p_value=>SUBSTRB("FLTR_52_RECORDTYPE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_53_RECORDTYPECODE',0,80),
    p_value=>SUBSTRB("FLTR_53_RECORDTYPECODE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_80_SOSTATUS',0,80),
    p_value=>SUBSTRB("FLTR_80_SOSTATUS"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXPPCARD_1_EVXPPCARDID',0,80),
    p_value=>SUBSTRB("EVXPPCARD_1_EVXPPCARDID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_24_ORDERED_BY_STATE',0,80),
    p_value=>SUBSTRB("EXPR_24_ORDERED_BY_STATE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_25_ORDERED_BY_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_25_ORDERED_BY_PROVINCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_47_ORDEREDBYPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_47_ORDEREDBYPOSTAL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>47,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_46_ORDEREDBYCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_46_ORDEREDBYCOUNTRY"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>48,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_45_ORDEREDBYCONTACTID',0,80),
    p_value=>SUBSTRB("FLTR_45_ORDEREDBYCONTACTID"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>49,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_1_2_ZIP_CODE',0,80),
    p_value=>SUBSTRB("EXPR_1_2_ZIP_CODE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>50,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_31_METHOD',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_31_METHOD"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>51,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_51_PURCHASEORDER',0,80),
    p_value=>SUBSTRB("FLTR_51_PURCHASEORDER"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>52,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_95_SOURCE',0,80),
    p_value=>SUBSTRB("FLTR_95_SOURCE"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>53,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_96_CHANNEL',0,80),
    p_value=>SUBSTRB("FLTR_96_CHANNEL"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "FLTR_ES";

---------------------------------------------------------------------------
-- Procedure "FLTR_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "FLTR_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 244: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "FLTR_ES"(p_error_index);
  END IF;
END "FLTR_ER";



---------------------------------------------------------------------------
-- Procedure "FLTR_SU" opens and initializes data source
-- for map "FLTR_p"
---------------------------------------------------------------------------
PROCEDURE "FLTR_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "FLTR_c"%ISOPEN) THEN
    OPEN "FLTR_c";
  END IF;
  get_read_success := TRUE;
END "FLTR_SU";

---------------------------------------------------------------------------
-- Procedure "FLTR_RD" fetches a bulk of rows from
--   the data source for map "FLTR_p"
---------------------------------------------------------------------------
PROCEDURE "FLTR_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "FLTR_2_EVXSOID".DELETE;
    "PRODUCT_DIM_2_PROD_NUM".DELETE;
    "FLTR_60_SHIPTOADDRESS1".DELETE;
    "FLTR_61_SHIPTOADDRESS2".DELETE;
    "FLTR_62_SHIPTOADDRESS3".DELETE;
    "FLTR_64_SHIPTOCITY".DELETE;
    "EXPR_15_SHIP_TO_STATE".DELETE;
    "EXPR_16_SHIP_TO_PROVINCE".DELETE;
    "FLTR_68_SHIPTOCOUNTRY".DELETE;
    "FLTR_69_SHIPTOCOUNTY".DELETE;
    "FLTR_70_SHIPTOPOSTAL".DELETE;
    "FLTR_11_BILLTOADDRESS1".DELETE;
    "FLTR_12_BILLTOADDRESS2".DELETE;
    "FLTR_13_BILLTOADDRESS3".DELETE;
    "FLTR_16_BILLTOCITY".DELETE;
    "EXPR_17_BILL_TO_STATE".DELETE;
    "EXPR_18_BILL_TO_PROVINCE".DELETE;
    "FLTR_19_BILLTOCOUNTRY".DELETE;
    "FLTR_20_BILLTOCOUNTY".DELETE;
    "FLTR_21_BILLTOPOSTAL".DELETE;
    "EXPR_22_CANCEL_DATE".DELETE;
    "FLTR_57_SHIPPEDDATE".DELETE;
    "FLTR_4_CREATEDATE".DELETE;
    "FLTR_6_MODIFYDATE".DELETE;
    "EXPR_21_COUNTRY".DELETE;
    "MARKET_DIM_3_TERRITORY".DELETE;
    "MARKET_DIM_4_REGION".DELETE;
    "MARKET_DIM_5_SALES_REP".DELETE;
    "MARKET_DIM_6_REGION_MGR".DELETE;
    "EXPR_26_BOOK_DATE".DELETE;
    "EXPR_23_REV_DATE".DELETE;
    "EVXSODET_11_ACTUALQU".DELETE;
    "FLTR_90_TOTALNOTAX".DELETE;
    "FLTR_23_CURRENCYTYPE".DELETE;
    "EVXSODETAIL_57_SOLDBYUSER".DELETE;
    "FLTR_34_OPPORTUNITYID".DELETE;
    "EXPR_19_CUST_ID".DELETE;
    "EVXSODETAIL_32_PRODUCTID".DELETE;
    "ORACLETX_HISTORY_4_CREATEDATE".DELETE;
    "FLTR_52_RECORDTYPE".DELETE;
    "FLTR_53_RECORDTYPECODE".DELETE;
    "FLTR_80_SOSTATUS".DELETE;
    "EVXPPCARD_1_EVXPPCARDID".DELETE;
    "EXPR_24_ORDERED_BY_STATE".DELETE;
    "EXPR_25_ORDERED_BY_PROVINCE".DELETE;
    "FLTR_47_ORDEREDBYPOSTAL".DELETE;
    "FLTR_46_ORDEREDBYCOUNTRY".DELETE;
    "FLTR_45_ORDEREDBYCONTACTID".DELETE;
    "EXPR_1_2_ZIP_CODE".DELETE;
    "EVXBILLPAYMENT_31_METHOD".DELETE;
    "FLTR_51_PURCHASEORDER".DELETE;
    "FLTR_95_SOURCE".DELETE;
    "FLTR_96_CHANNEL".DELETE;

    FETCH
      "FLTR_c"
    BULK COLLECT INTO
      "FLTR_2_EVXSOID",
      "PRODUCT_DIM_2_PROD_NUM",
      "FLTR_60_SHIPTOADDRESS1",
      "FLTR_61_SHIPTOADDRESS2",
      "FLTR_62_SHIPTOADDRESS3",
      "FLTR_64_SHIPTOCITY",
      "EXPR_15_SHIP_TO_STATE",
      "EXPR_16_SHIP_TO_PROVINCE",
      "FLTR_68_SHIPTOCOUNTRY",
      "FLTR_69_SHIPTOCOUNTY",
      "FLTR_70_SHIPTOPOSTAL",
      "FLTR_11_BILLTOADDRESS1",
      "FLTR_12_BILLTOADDRESS2",
      "FLTR_13_BILLTOADDRESS3",
      "FLTR_16_BILLTOCITY",
      "EXPR_17_BILL_TO_STATE",
      "EXPR_18_BILL_TO_PROVINCE",
      "FLTR_19_BILLTOCOUNTRY",
      "FLTR_20_BILLTOCOUNTY",
      "FLTR_21_BILLTOPOSTAL",
      "EXPR_22_CANCEL_DATE",
      "FLTR_57_SHIPPEDDATE",
      "FLTR_4_CREATEDATE",
      "FLTR_6_MODIFYDATE",
      "EXPR_21_COUNTRY",
      "MARKET_DIM_3_TERRITORY",
      "MARKET_DIM_4_REGION",
      "MARKET_DIM_5_SALES_REP",
      "MARKET_DIM_6_REGION_MGR",
      "EXPR_26_BOOK_DATE",
      "EXPR_23_REV_DATE",
      "EVXSODET_11_ACTUALQU",
      "FLTR_90_TOTALNOTAX",
      "FLTR_23_CURRENCYTYPE",
      "EVXSODETAIL_57_SOLDBYUSER",
      "FLTR_34_OPPORTUNITYID",
      "EXPR_19_CUST_ID",
      "EVXSODETAIL_32_PRODUCTID",
      "ORACLETX_HISTORY_4_CREATEDATE",
      "FLTR_52_RECORDTYPE",
      "FLTR_53_RECORDTYPECODE",
      "FLTR_80_SOSTATUS",
      "EVXPPCARD_1_EVXPPCARDID",
      "EXPR_24_ORDERED_BY_STATE",
      "EXPR_25_ORDERED_BY_PROVINCE",
      "FLTR_47_ORDEREDBYPOSTAL",
      "FLTR_46_ORDEREDBYCOUNTRY",
      "FLTR_45_ORDEREDBYCONTACTID",
      "EXPR_1_2_ZIP_CODE",
      "EVXBILLPAYMENT_31_METHOD",
      "FLTR_51_PURCHASEORDER",
      "FLTR_95_SOURCE",
      "FLTR_96_CHANNEL"
    LIMIT get_bulk_size;

    IF "FLTR_c"%NOTFOUND AND "FLTR_2_EVXSOID".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "FLTR_2_EVXSOID".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "FLTR_2_EVXSOID".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 245: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "FLTR_RD";

---------------------------------------------------------------------------
-- Procedure "FLTR_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "FLTR_DML"(si NUMBER, firstround BOOLEAN) IS
  "SALES_ORDER_FACT_ins0" NUMBER := "SALES_ORDER_FACT_ins";
  "SALES_ORDER_FACT_upd0" NUMBER := "SALES_ORDER_FACT_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "SALES_ORDER_FACT_St" THEN
  -- Update/Insert DML for "SALES_ORDER_FACT"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"SALES_ORDER_FACT"';
    get_audit_detail_id := "SALES_ORDER_FACT_id";
    "SALES_ORDER_FACT_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "SALES_ORDER_FACT_i" > get_bulk_size 
   OR "FLTR_c"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "SALES_ORDER_FACT_si".."SALES_ORDER_FACT_i" - 1 
            UPDATE
              "SALES_ORDER_FACT"
            SET
  
  						"SALES_ORDER_FACT"."PROD_NUM" = "SALES_ORDER_FACT_1_PROD_NUM"
  (i),						"SALES_ORDER_FACT"."KEYCODE" = "SALES_ORDER_FACT_3_KEYCODE"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1" = "SALES_OR_4_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2" = "SALES_OR_5_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3" = "SALES_OR_6_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_CITY" = "SALES_OR_7_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_STATE" = "SALES_OR_8_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_PROVINCE" = "SALES_OR_9_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_COUNTRY" = "SALES_OR_10_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_COUNTY" = "SALES_OR_11_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE" = "SALES_OR_12_SHIP_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS1" = "SALES_OR_13_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS2" = "SALES_OR_14_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS3" = "SALES_OR_15_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_CITY" = "SALES_OR_16_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_STATE" = "SALES_OR_17_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_PROVINCE" = "SALES_OR_18_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_COUNTRY" = "SALES_OR_19_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_COUNTY" = "SALES_OR_20_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ZIPCODE" = "SALES_OR_21_BILL_TO_"
  (i),						"SALES_ORDER_FACT"."CANCEL_DATE" = "SALES_OR_22_CANCEL_D"
  (i),						"SALES_ORDER_FACT"."SHIP_DATE" = "SALES_ORDER_FACT_23_SHIP_DATE"
  (i),						"SALES_ORDER_FACT"."CREATION_DATE" = "SALES_OR_24_CREATION"
  (i),						"SALES_ORDER_FACT"."LAST_UPDATE_DATE" = "SALES_OR_25_LAST_UPD"
  (i),						"SALES_ORDER_FACT"."GKDW_SOURCE" = "SALES_OR_30_GKDW_SOU"
  (i),						"SALES_ORDER_FACT"."COUNTRY" = "SALES_ORDER_FACT_33_COUNTRY"
  (i),						"SALES_ORDER_FACT"."TERRITORY" = "SALES_ORDER_FACT_35_TERRITORY"
  (i),						"SALES_ORDER_FACT"."REGION" = "SALES_ORDER_FACT_36_REGION"
  (i),						"SALES_ORDER_FACT"."SALES_REP" = "SALES_ORDER_FACT_37_SALES_REP"
  (i),						"SALES_ORDER_FACT"."REGION_REP" = "SALES_ORDER_FACT_38_REGION_REP"
  (i),						"SALES_ORDER_FACT"."BOOK_DATE" = "SALES_ORDER_FACT_39_BOOK_DATE"
  (i),						"SALES_ORDER_FACT"."REV_DATE" = "SALES_ORDER_FACT_40_REV_DATE"
  (i),						"SALES_ORDER_FACT"."QUANTITY" = "SALES_ORDER_FACT_41_QUANTITY"
  (i),						"SALES_ORDER_FACT"."BOOK_AMT" = "SALES_ORDER_FACT_42_BOOK_AMT"
  (i),						"SALES_ORDER_FACT"."CURR_CODE" = "SALES_ORDER_FACT_43_CURR_CODE"
  (i),						"SALES_ORDER_FACT"."SALESPERSON" = "SALES_OR_45_SALESPER"
  (i),						"SALES_ORDER_FACT"."OPPORTUNITY_ID" = "SALES_OR_47_OPPORTUN"
  (i),						"SALES_ORDER_FACT"."CUST_ID" = "SALES_ORDER_FACT_51_CUST_ID"
  (i),						"SALES_ORDER_FACT"."PRODUCT_ID" = "SALES_ORDER_FACT_52_PRODUCT_ID"
  (i),						"SALES_ORDER_FACT"."BILL_DATE" = "SALES_ORDER_FACT_53_BILL_DATE"
  (i),						"SALES_ORDER_FACT"."RECORD_TYPE" = "SALES_OR_54_RECORD_T"
  (i),						"SALES_ORDER_FACT"."RECORD_TYPE_CODE" = "SALES_OR_55_RECORD_T"
  (i),						"SALES_ORDER_FACT"."SO_STATUS" = "SALES_ORDER_FACT_56_SO_STATUS"
  (i),						"SALES_ORDER_FACT"."PPCARD_ID" = "SALES_ORDER_FACT_57_PPCARD_ID"
  (i),						"SALES_ORDER_FACT"."PP_SALES_ORDER_ID" = "SALES_OR_59_PP_SALES"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_STATE" = "SALES_OR_60_ORDERED_"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE" = "SALES_OR_61_ORDERED_"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE" = "SALES_OR_62_ORDERED_"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY" = "SALES_OR_63_ORDERED_"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID" = "SALES_OR_64_ORDERED_"
  (i),						"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE" = "SALES_OR_65_CUST_ID_"
  (i),						"SALES_ORDER_FACT"."PAYMENT_METHOD" = "SALES_OR_66_PAYMENT_"
  (i),						"SALES_ORDER_FACT"."PO_NUMBER" = "SALES_ORDER_FACT_67_PO_NUMBER"
  (i),						"SALES_ORDER_FACT"."SOURCE" = "SALES_ORDER_FACT_70_SOURCE"
  (i),						"SALES_ORDER_FACT"."CHANNEL" = "SALES_ORDER_FACT_71_CHANNEL"
  (i)
    
            WHERE
  
  						"SALES_ORDER_FACT"."SALES_ORDER_ID" = "SALES_OR_0_SALES_OR"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "SALES_ORDER_FACT_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "SALES_ORDER_FACT_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd" + get_rowid.COUNT;
          "SALES_ORDER_FACT_si" := "SALES_ORDER_FACT_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "SALES_ORDER_FACT_si".."SALES_ORDER_FACT_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "SALES_ORDER_FACT_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "SALES_ORDER_FACT_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "SALES_ORDER_FACT"
                SET
  
  								"SALES_ORDER_FACT"."PROD_NUM" = "SALES_ORDER_FACT_1_PROD_NUM"
  (last_successful_index),								"SALES_ORDER_FACT"."KEYCODE" = "SALES_ORDER_FACT_3_KEYCODE"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1" = "SALES_OR_4_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2" = "SALES_OR_5_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3" = "SALES_OR_6_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_CITY" = "SALES_OR_7_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_STATE" = "SALES_OR_8_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_PROVINCE" = "SALES_OR_9_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_COUNTRY" = "SALES_OR_10_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_COUNTY" = "SALES_OR_11_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE" = "SALES_OR_12_SHIP_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS1" = "SALES_OR_13_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS2" = "SALES_OR_14_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS3" = "SALES_OR_15_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_CITY" = "SALES_OR_16_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_STATE" = "SALES_OR_17_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_PROVINCE" = "SALES_OR_18_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_COUNTRY" = "SALES_OR_19_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_COUNTY" = "SALES_OR_20_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ZIPCODE" = "SALES_OR_21_BILL_TO_"
  (last_successful_index),								"SALES_ORDER_FACT"."CANCEL_DATE" = "SALES_OR_22_CANCEL_D"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_DATE" = "SALES_ORDER_FACT_23_SHIP_DATE"
  (last_successful_index),								"SALES_ORDER_FACT"."CREATION_DATE" = "SALES_OR_24_CREATION"
  (last_successful_index),								"SALES_ORDER_FACT"."LAST_UPDATE_DATE" = "SALES_OR_25_LAST_UPD"
  (last_successful_index),								"SALES_ORDER_FACT"."GKDW_SOURCE" = "SALES_OR_30_GKDW_SOU"
  (last_successful_index),								"SALES_ORDER_FACT"."COUNTRY" = "SALES_ORDER_FACT_33_COUNTRY"
  (last_successful_index),								"SALES_ORDER_FACT"."TERRITORY" = "SALES_ORDER_FACT_35_TERRITORY"
  (last_successful_index),								"SALES_ORDER_FACT"."REGION" = "SALES_ORDER_FACT_36_REGION"
  (last_successful_index),								"SALES_ORDER_FACT"."SALES_REP" = "SALES_ORDER_FACT_37_SALES_REP"
  (last_successful_index),								"SALES_ORDER_FACT"."REGION_REP" = "SALES_ORDER_FACT_38_REGION_REP"
  (last_successful_index),								"SALES_ORDER_FACT"."BOOK_DATE" = "SALES_ORDER_FACT_39_BOOK_DATE"
  (last_successful_index),								"SALES_ORDER_FACT"."REV_DATE" = "SALES_ORDER_FACT_40_REV_DATE"
  (last_successful_index),								"SALES_ORDER_FACT"."QUANTITY" = "SALES_ORDER_FACT_41_QUANTITY"
  (last_successful_index),								"SALES_ORDER_FACT"."BOOK_AMT" = "SALES_ORDER_FACT_42_BOOK_AMT"
  (last_successful_index),								"SALES_ORDER_FACT"."CURR_CODE" = "SALES_ORDER_FACT_43_CURR_CODE"
  (last_successful_index),								"SALES_ORDER_FACT"."SALESPERSON" = "SALES_OR_45_SALESPER"
  (last_successful_index),								"SALES_ORDER_FACT"."OPPORTUNITY_ID" = "SALES_OR_47_OPPORTUN"
  (last_successful_index),								"SALES_ORDER_FACT"."CUST_ID" = "SALES_ORDER_FACT_51_CUST_ID"
  (last_successful_index),								"SALES_ORDER_FACT"."PRODUCT_ID" = "SALES_ORDER_FACT_52_PRODUCT_ID"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_DATE" = "SALES_ORDER_FACT_53_BILL_DATE"
  (last_successful_index),								"SALES_ORDER_FACT"."RECORD_TYPE" = "SALES_OR_54_RECORD_T"
  (last_successful_index),								"SALES_ORDER_FACT"."RECORD_TYPE_CODE" = "SALES_OR_55_RECORD_T"
  (last_successful_index),								"SALES_ORDER_FACT"."SO_STATUS" = "SALES_ORDER_FACT_56_SO_STATUS"
  (last_successful_index),								"SALES_ORDER_FACT"."PPCARD_ID" = "SALES_ORDER_FACT_57_PPCARD_ID"
  (last_successful_index),								"SALES_ORDER_FACT"."PP_SALES_ORDER_ID" = "SALES_OR_59_PP_SALES"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_STATE" = "SALES_OR_60_ORDERED_"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE" = "SALES_OR_61_ORDERED_"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE" = "SALES_OR_62_ORDERED_"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY" = "SALES_OR_63_ORDERED_"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID" = "SALES_OR_64_ORDERED_"
  (last_successful_index),								"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE" = "SALES_OR_65_CUST_ID_"
  (last_successful_index),								"SALES_ORDER_FACT"."PAYMENT_METHOD" = "SALES_OR_66_PAYMENT_"
  (last_successful_index),								"SALES_ORDER_FACT"."PO_NUMBER" = "SALES_ORDER_FACT_67_PO_NUMBER"
  (last_successful_index),								"SALES_ORDER_FACT"."SOURCE" = "SALES_ORDER_FACT_70_SOURCE"
  (last_successful_index),								"SALES_ORDER_FACT"."CHANNEL" = "SALES_ORDER_FACT_71_CHANNEL"
  (last_successful_index)
  
                WHERE
  
  								"SALES_ORDER_FACT"."SALES_ORDER_ID" = "SALES_OR_0_SALES_OR"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "SALES_ORDER_FACT_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PROD_NUM"',0,80),SUBSTRB("SALES_ORDER_FACT_1_PROD_NUM"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("SALES_ORDER_FACT_3_KEYCODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_4_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_5_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_6_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_CITY"',0,80),SUBSTRB("SALES_OR_7_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_STATE"',0,80),SUBSTRB("SALES_OR_8_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_9_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_10_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_11_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_12_SHIP_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_13_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_14_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_15_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_CITY"',0,80),SUBSTRB("SALES_OR_16_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_STATE"',0,80),SUBSTRB("SALES_OR_17_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_18_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_19_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_20_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_21_BILL_TO_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CANCEL_DATE"',0,80),SUBSTRB("SALES_OR_22_CANCEL_D"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_23_SHIP_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("SALES_OR_24_CREATION"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("SALES_OR_25_LAST_UPD"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("SALES_OR_30_GKDW_SOU"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("SALES_ORDER_FACT_33_COUNTRY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("SALES_ORDER_FACT_35_TERRITORY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION"',0,80),SUBSTRB("SALES_ORDER_FACT_36_REGION"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_37_SALES_REP"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_38_REGION_REP"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_39_BOOK_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_40_REV_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("SALES_ORDER_FACT_41_QUANTITY"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("SALES_ORDER_FACT_42_BOOK_AMT"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("SALES_ORDER_FACT_43_CURR_CODE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("SALES_OR_45_SALESPER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("SALES_OR_47_OPPORTUN"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_51_CUST_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PRODUCT_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_52_PRODUCT_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_53_BILL_DATE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE"',0,80),SUBSTRB("SALES_OR_54_RECORD_T"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE_CODE"',0,80),SUBSTRB("SALES_OR_55_RECORD_T"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SO_STATUS"',0,80),SUBSTRB("SALES_ORDER_FACT_56_SO_STATUS"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_57_PPCARD_ID"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_59_PP_SALES"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_STATE"',0,80),SUBSTRB("SALES_OR_60_ORDERED_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE"',0,80),SUBSTRB("SALES_OR_61_ORDERED_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE"',0,80),SUBSTRB("SALES_OR_62_ORDERED_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY"',0,80),SUBSTRB("SALES_OR_63_ORDERED_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID"',0,80),SUBSTRB("SALES_OR_64_ORDERED_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE"',0,80),SUBSTRB("SALES_OR_65_CUST_ID_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("SALES_OR_66_PAYMENT_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("SALES_ORDER_FACT_67_PO_NUMBER"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SOURCE"',0,80),SUBSTRB("SALES_ORDER_FACT_70_SOURCE"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CHANNEL"',0,80),SUBSTRB("SALES_ORDER_FACT_71_CHANNEL"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
                
                IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "SALES_ORDER_FACT_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "SALES_ORDER_FACT_si" >= "SALES_ORDER_FACT_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "SALES_ORDER_FACT_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"SALES_OR_0_SALES_OR"(insert_bulk_index) := "SALES_OR_0_SALES_OR"(update_bulk(j));
  		"SALES_ORDER_FACT_1_PROD_NUM"(insert_bulk_index) := "SALES_ORDER_FACT_1_PROD_NUM"(update_bulk(j));
  		"SALES_ORDER_FACT_3_KEYCODE"(insert_bulk_index) := "SALES_ORDER_FACT_3_KEYCODE"(update_bulk(j));
  		"SALES_OR_4_SHIP_TO_"(insert_bulk_index) := "SALES_OR_4_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_5_SHIP_TO_"(insert_bulk_index) := "SALES_OR_5_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_6_SHIP_TO_"(insert_bulk_index) := "SALES_OR_6_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_7_SHIP_TO_"(insert_bulk_index) := "SALES_OR_7_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_8_SHIP_TO_"(insert_bulk_index) := "SALES_OR_8_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_9_SHIP_TO_"(insert_bulk_index) := "SALES_OR_9_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_10_SHIP_TO_"(insert_bulk_index) := "SALES_OR_10_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_11_SHIP_TO_"(insert_bulk_index) := "SALES_OR_11_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_12_SHIP_TO_"(insert_bulk_index) := "SALES_OR_12_SHIP_TO_"(update_bulk(j));
  		"SALES_OR_13_BILL_TO_"(insert_bulk_index) := "SALES_OR_13_BILL_TO_"(update_bulk(j));
  		"SALES_OR_14_BILL_TO_"(insert_bulk_index) := "SALES_OR_14_BILL_TO_"(update_bulk(j));
  		"SALES_OR_15_BILL_TO_"(insert_bulk_index) := "SALES_OR_15_BILL_TO_"(update_bulk(j));
  		"SALES_OR_16_BILL_TO_"(insert_bulk_index) := "SALES_OR_16_BILL_TO_"(update_bulk(j));
  		"SALES_OR_17_BILL_TO_"(insert_bulk_index) := "SALES_OR_17_BILL_TO_"(update_bulk(j));
  		"SALES_OR_18_BILL_TO_"(insert_bulk_index) := "SALES_OR_18_BILL_TO_"(update_bulk(j));
  		"SALES_OR_19_BILL_TO_"(insert_bulk_index) := "SALES_OR_19_BILL_TO_"(update_bulk(j));
  		"SALES_OR_20_BILL_TO_"(insert_bulk_index) := "SALES_OR_20_BILL_TO_"(update_bulk(j));
  		"SALES_OR_21_BILL_TO_"(insert_bulk_index) := "SALES_OR_21_BILL_TO_"(update_bulk(j));
  		"SALES_OR_22_CANCEL_D"(insert_bulk_index) := "SALES_OR_22_CANCEL_D"(update_bulk(j));
  		"SALES_ORDER_FACT_23_SHIP_DATE"(insert_bulk_index) := "SALES_ORDER_FACT_23_SHIP_DATE"(update_bulk(j));
  		"SALES_OR_24_CREATION"(insert_bulk_index) := "SALES_OR_24_CREATION"(update_bulk(j));
  		"SALES_OR_25_LAST_UPD"(insert_bulk_index) := "SALES_OR_25_LAST_UPD"(update_bulk(j));
  		"SALES_OR_30_GKDW_SOU"(insert_bulk_index) := "SALES_OR_30_GKDW_SOU"(update_bulk(j));
  		"SALES_ORDER_FACT_33_COUNTRY"(insert_bulk_index) := "SALES_ORDER_FACT_33_COUNTRY"(update_bulk(j));
  		"SALES_ORDER_FACT_35_TERRITORY"(insert_bulk_index) := "SALES_ORDER_FACT_35_TERRITORY"(update_bulk(j));
  		"SALES_ORDER_FACT_36_REGION"(insert_bulk_index) := "SALES_ORDER_FACT_36_REGION"(update_bulk(j));
  		"SALES_ORDER_FACT_37_SALES_REP"(insert_bulk_index) := "SALES_ORDER_FACT_37_SALES_REP"(update_bulk(j));
  		"SALES_ORDER_FACT_38_REGION_REP"(insert_bulk_index) := "SALES_ORDER_FACT_38_REGION_REP"(update_bulk(j));
  		"SALES_ORDER_FACT_39_BOOK_DATE"(insert_bulk_index) := "SALES_ORDER_FACT_39_BOOK_DATE"(update_bulk(j));
  		"SALES_ORDER_FACT_40_REV_DATE"(insert_bulk_index) := "SALES_ORDER_FACT_40_REV_DATE"(update_bulk(j));
  		"SALES_ORDER_FACT_41_QUANTITY"(insert_bulk_index) := "SALES_ORDER_FACT_41_QUANTITY"(update_bulk(j));
  		"SALES_ORDER_FACT_42_BOOK_AMT"(insert_bulk_index) := "SALES_ORDER_FACT_42_BOOK_AMT"(update_bulk(j));
  		"SALES_ORDER_FACT_43_CURR_CODE"(insert_bulk_index) := "SALES_ORDER_FACT_43_CURR_CODE"(update_bulk(j));
  		"SALES_OR_45_SALESPER"(insert_bulk_index) := "SALES_OR_45_SALESPER"(update_bulk(j));
  		"SALES_OR_47_OPPORTUN"(insert_bulk_index) := "SALES_OR_47_OPPORTUN"(update_bulk(j));
  		"SALES_ORDER_FACT_51_CUST_ID"(insert_bulk_index) := "SALES_ORDER_FACT_51_CUST_ID"(update_bulk(j));
  		"SALES_ORDER_FACT_52_PRODUCT_ID"(insert_bulk_index) := "SALES_ORDER_FACT_52_PRODUCT_ID"(update_bulk(j));
  		"SALES_ORDER_FACT_53_BILL_DATE"(insert_bulk_index) := "SALES_ORDER_FACT_53_BILL_DATE"(update_bulk(j));
  		"SALES_OR_54_RECORD_T"(insert_bulk_index) := "SALES_OR_54_RECORD_T"(update_bulk(j));
  		"SALES_OR_55_RECORD_T"(insert_bulk_index) := "SALES_OR_55_RECORD_T"(update_bulk(j));
  		"SALES_ORDER_FACT_56_SO_STATUS"(insert_bulk_index) := "SALES_ORDER_FACT_56_SO_STATUS"(update_bulk(j));
  		"SALES_ORDER_FACT_57_PPCARD_ID"(insert_bulk_index) := "SALES_ORDER_FACT_57_PPCARD_ID"(update_bulk(j));
  		"SALES_OR_59_PP_SALES"(insert_bulk_index) := "SALES_OR_59_PP_SALES"(update_bulk(j));
  		"SALES_OR_60_ORDERED_"(insert_bulk_index) := "SALES_OR_60_ORDERED_"(update_bulk(j));
  		"SALES_OR_61_ORDERED_"(insert_bulk_index) := "SALES_OR_61_ORDERED_"(update_bulk(j));
  		"SALES_OR_62_ORDERED_"(insert_bulk_index) := "SALES_OR_62_ORDERED_"(update_bulk(j));
  		"SALES_OR_63_ORDERED_"(insert_bulk_index) := "SALES_OR_63_ORDERED_"(update_bulk(j));
  		"SALES_OR_64_ORDERED_"(insert_bulk_index) := "SALES_OR_64_ORDERED_"(update_bulk(j));
  		"SALES_OR_65_CUST_ID_"(insert_bulk_index) := "SALES_OR_65_CUST_ID_"(update_bulk(j));
  		"SALES_OR_66_PAYMENT_"(insert_bulk_index) := "SALES_OR_66_PAYMENT_"(update_bulk(j));
  		"SALES_ORDER_FACT_67_PO_NUMBER"(insert_bulk_index) := "SALES_ORDER_FACT_67_PO_NUMBER"(update_bulk(j));
  		"SALES_ORDER_FACT_70_SOURCE"(insert_bulk_index) := "SALES_ORDER_FACT_70_SOURCE"(update_bulk(j));
  		"SALES_ORDER_FACT_71_CHANNEL"(insert_bulk_index) := "SALES_ORDER_FACT_71_CHANNEL"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "SALES_ORDER_FACT_srk"(insert_bulk_index) := "SALES_ORDER_FACT_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "SALES_ORDER_FACT_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "SALES_ORDER_FACT_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "SALES_ORDER_FACT_si"..insert_bulk_index
          INSERT INTO
            "SALES_ORDER_FACT"
            ("SALES_ORDER_FACT"."SALES_ORDER_ID",
            "SALES_ORDER_FACT"."PROD_NUM",
            "SALES_ORDER_FACT"."KEYCODE",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS1",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS2",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS3",
            "SALES_ORDER_FACT"."SHIP_TO_CITY",
            "SALES_ORDER_FACT"."SHIP_TO_STATE",
            "SALES_ORDER_FACT"."SHIP_TO_PROVINCE",
            "SALES_ORDER_FACT"."SHIP_TO_COUNTRY",
            "SALES_ORDER_FACT"."SHIP_TO_COUNTY",
            "SALES_ORDER_FACT"."SHIP_TO_ZIPCODE",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS1",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS2",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS3",
            "SALES_ORDER_FACT"."BILL_TO_CITY",
            "SALES_ORDER_FACT"."BILL_TO_STATE",
            "SALES_ORDER_FACT"."BILL_TO_PROVINCE",
            "SALES_ORDER_FACT"."BILL_TO_COUNTRY",
            "SALES_ORDER_FACT"."BILL_TO_COUNTY",
            "SALES_ORDER_FACT"."BILL_TO_ZIPCODE",
            "SALES_ORDER_FACT"."CANCEL_DATE",
            "SALES_ORDER_FACT"."SHIP_DATE",
            "SALES_ORDER_FACT"."CREATION_DATE",
            "SALES_ORDER_FACT"."LAST_UPDATE_DATE",
            "SALES_ORDER_FACT"."GKDW_SOURCE",
            "SALES_ORDER_FACT"."COUNTRY",
            "SALES_ORDER_FACT"."TERRITORY",
            "SALES_ORDER_FACT"."REGION",
            "SALES_ORDER_FACT"."SALES_REP",
            "SALES_ORDER_FACT"."REGION_REP",
            "SALES_ORDER_FACT"."BOOK_DATE",
            "SALES_ORDER_FACT"."REV_DATE",
            "SALES_ORDER_FACT"."QUANTITY",
            "SALES_ORDER_FACT"."BOOK_AMT",
            "SALES_ORDER_FACT"."CURR_CODE",
            "SALES_ORDER_FACT"."SALESPERSON",
            "SALES_ORDER_FACT"."OPPORTUNITY_ID",
            "SALES_ORDER_FACT"."CUST_ID",
            "SALES_ORDER_FACT"."PRODUCT_ID",
            "SALES_ORDER_FACT"."BILL_DATE",
            "SALES_ORDER_FACT"."RECORD_TYPE",
            "SALES_ORDER_FACT"."RECORD_TYPE_CODE",
            "SALES_ORDER_FACT"."SO_STATUS",
            "SALES_ORDER_FACT"."PPCARD_ID",
            "SALES_ORDER_FACT"."PP_SALES_ORDER_ID",
            "SALES_ORDER_FACT"."ORDERED_BY_STATE",
            "SALES_ORDER_FACT"."ORDERED_BY_PROVINCE",
            "SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE",
            "SALES_ORDER_FACT"."ORDERED_BY_COUNTRY",
            "SALES_ORDER_FACT"."ORDERED_BY_CUST_ID",
            "SALES_ORDER_FACT"."CUST_ID_ZIP_CODE",
            "SALES_ORDER_FACT"."PAYMENT_METHOD",
            "SALES_ORDER_FACT"."PO_NUMBER",
            "SALES_ORDER_FACT"."SOURCE",
            "SALES_ORDER_FACT"."CHANNEL")
          VALUES
            ("SALES_OR_0_SALES_OR"(i),
            "SALES_ORDER_FACT_1_PROD_NUM"(i),
            "SALES_ORDER_FACT_3_KEYCODE"(i),
            "SALES_OR_4_SHIP_TO_"(i),
            "SALES_OR_5_SHIP_TO_"(i),
            "SALES_OR_6_SHIP_TO_"(i),
            "SALES_OR_7_SHIP_TO_"(i),
            "SALES_OR_8_SHIP_TO_"(i),
            "SALES_OR_9_SHIP_TO_"(i),
            "SALES_OR_10_SHIP_TO_"(i),
            "SALES_OR_11_SHIP_TO_"(i),
            "SALES_OR_12_SHIP_TO_"(i),
            "SALES_OR_13_BILL_TO_"(i),
            "SALES_OR_14_BILL_TO_"(i),
            "SALES_OR_15_BILL_TO_"(i),
            "SALES_OR_16_BILL_TO_"(i),
            "SALES_OR_17_BILL_TO_"(i),
            "SALES_OR_18_BILL_TO_"(i),
            "SALES_OR_19_BILL_TO_"(i),
            "SALES_OR_20_BILL_TO_"(i),
            "SALES_OR_21_BILL_TO_"(i),
            "SALES_OR_22_CANCEL_D"(i),
            "SALES_ORDER_FACT_23_SHIP_DATE"(i),
            "SALES_OR_24_CREATION"(i),
            "SALES_OR_25_LAST_UPD"(i),
            "SALES_OR_30_GKDW_SOU"(i),
            "SALES_ORDER_FACT_33_COUNTRY"(i),
            "SALES_ORDER_FACT_35_TERRITORY"(i),
            "SALES_ORDER_FACT_36_REGION"(i),
            "SALES_ORDER_FACT_37_SALES_REP"(i),
            "SALES_ORDER_FACT_38_REGION_REP"(i),
            "SALES_ORDER_FACT_39_BOOK_DATE"(i),
            "SALES_ORDER_FACT_40_REV_DATE"(i),
            "SALES_ORDER_FACT_41_QUANTITY"(i),
            "SALES_ORDER_FACT_42_BOOK_AMT"(i),
            "SALES_ORDER_FACT_43_CURR_CODE"(i),
            "SALES_OR_45_SALESPER"(i),
            "SALES_OR_47_OPPORTUN"(i),
            "SALES_ORDER_FACT_51_CUST_ID"(i),
            "SALES_ORDER_FACT_52_PRODUCT_ID"(i),
            "SALES_ORDER_FACT_53_BILL_DATE"(i),
            "SALES_OR_54_RECORD_T"(i),
            "SALES_OR_55_RECORD_T"(i),
            "SALES_ORDER_FACT_56_SO_STATUS"(i),
            "SALES_ORDER_FACT_57_PPCARD_ID"(i),
            "SALES_OR_59_PP_SALES"(i),
            "SALES_OR_60_ORDERED_"(i),
            "SALES_OR_61_ORDERED_"(i),
            "SALES_OR_62_ORDERED_"(i),
            "SALES_OR_63_ORDERED_"(i),
            "SALES_OR_64_ORDERED_"(i),
            "SALES_OR_65_CUST_ID_"(i),
            "SALES_OR_66_PAYMENT_"(i),
            "SALES_ORDER_FACT_67_PO_NUMBER"(i),
            "SALES_ORDER_FACT_70_SOURCE"(i),
            "SALES_ORDER_FACT_71_CHANNEL"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "SALES_ORDER_FACT_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "SALES_ORDER_FACT_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "SALES_ORDER_FACT_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 246: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_0_SALES_OR"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PROD_NUM"',0,80),SUBSTRB("SALES_ORDER_FACT_1_PROD_NUM"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("SALES_ORDER_FACT_3_KEYCODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_4_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_5_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_6_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_CITY"',0,80),SUBSTRB("SALES_OR_7_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_STATE"',0,80),SUBSTRB("SALES_OR_8_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_9_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_10_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_11_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_12_SHIP_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_13_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_14_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_15_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_CITY"',0,80),SUBSTRB("SALES_OR_16_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_STATE"',0,80),SUBSTRB("SALES_OR_17_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_18_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_19_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_20_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_21_BILL_TO_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CANCEL_DATE"',0,80),SUBSTRB("SALES_OR_22_CANCEL_D"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_23_SHIP_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("SALES_OR_24_CREATION"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("SALES_OR_25_LAST_UPD"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("SALES_OR_30_GKDW_SOU"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("SALES_ORDER_FACT_33_COUNTRY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("SALES_ORDER_FACT_35_TERRITORY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION"',0,80),SUBSTRB("SALES_ORDER_FACT_36_REGION"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_37_SALES_REP"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_38_REGION_REP"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_39_BOOK_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_40_REV_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("SALES_ORDER_FACT_41_QUANTITY"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("SALES_ORDER_FACT_42_BOOK_AMT"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("SALES_ORDER_FACT_43_CURR_CODE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("SALES_OR_45_SALESPER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("SALES_OR_47_OPPORTUN"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_51_CUST_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PRODUCT_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_52_PRODUCT_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_53_BILL_DATE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE"',0,80),SUBSTRB("SALES_OR_54_RECORD_T"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE_CODE"',0,80),SUBSTRB("SALES_OR_55_RECORD_T"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SO_STATUS"',0,80),SUBSTRB("SALES_ORDER_FACT_56_SO_STATUS"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_57_PPCARD_ID"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_59_PP_SALES"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_STATE"',0,80),SUBSTRB("SALES_OR_60_ORDERED_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE"',0,80),SUBSTRB("SALES_OR_61_ORDERED_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE"',0,80),SUBSTRB("SALES_OR_62_ORDERED_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY"',0,80),SUBSTRB("SALES_OR_63_ORDERED_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID"',0,80),SUBSTRB("SALES_OR_64_ORDERED_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE"',0,80),SUBSTRB("SALES_OR_65_CUST_ID_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("SALES_OR_66_PAYMENT_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("SALES_ORDER_FACT_67_PO_NUMBER"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SOURCE"',0,80),SUBSTRB("SALES_ORDER_FACT_70_SOURCE"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CHANNEL"',0,80),SUBSTRB("SALES_ORDER_FACT_71_CHANNEL"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
          
          IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "SALES_ORDER_FACT_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "SALES_ORDER_FACT_ins" := "SALES_ORDER_FACT_ins" + get_rowid.COUNT;
      "SALES_ORDER_FACT_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "SALES_ORDER_FACT_ins" := "SALES_ORDER_FACT_ins0"; 
    "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd0";
  END IF;

END "FLTR_DML";

---------------------------------------------------------------------------
-- "FLTR_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "SALES_ORDER_FACT_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "FLTR_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "SALES_ORDER_FACT_St" THEN
          "SALES_ORDER_FACT_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"SALES_ORDER_FACT"',
              p_target_uoid=>'A41FFB19B9835678E040007F01006C7D',
              p_stm=>'TRACE 248',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "SALES_ORDER_FACT_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BFCF5678E040007F01006C7D', -- Operator EVXSO
              p_parent_object_name=>'EVXSO',
              p_parent_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSO',
              p_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9825678E040007F01006C7D', -- Operator EVXBILLPAYMENT
              p_parent_object_name=>'EVXBILLPAYMENT',
              p_parent_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLPAYMENT',
              p_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9815678E040007F01006C7D', -- Operator ORACLETX_HISTORY
              p_parent_object_name=>'ORACLETX_HISTORY',
              p_parent_object_uoid=>'A41FFB190ABE5678E040007F01006C7D', -- Table ORACLETX_HISTORY
              p_parent_object_type=>'Table',
              p_object_name=>'ORACLETX_HISTORY',
              p_object_uoid=>'A41FFB190ABE5678E040007F01006C7D', -- Table ORACLETX_HISTORY
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B63C5678E040007F01006C7D', -- Operator PRODUCT_DIM
              p_parent_object_name=>'PRODUCT_DIM',
              p_parent_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PRODUCT_DIM',
              p_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19C1165678E040007F01006C7D', -- Operator EVXPPCARD
              p_parent_object_name=>'EVXPPCARD',
              p_parent_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_parent_object_type=>'Table',
              p_object_name=>'EVXPPCARD',
              p_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9B15678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9B25678E040007F01006C7D', -- Operator EVXSODETAIL
              p_parent_object_name=>'EVXSODETAIL',
              p_parent_object_uoid=>'A41FFB1909B45678E040007F01006C7D', -- Table EVXSODETAIL
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSODETAIL',
              p_object_uoid=>'A41FFB1909B45678E040007F01006C7D', -- Table EVXSODETAIL
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9805678E040007F01006C7D', -- Operator PRODUCT_DIM
              p_parent_object_name=>'PRODUCT_DIM',
              p_parent_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PRODUCT_DIM',
              p_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BDAC5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA065678E040007F01006C7D', -- Operator EVXSO
              p_parent_object_name=>'EVXSO',
              p_parent_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSO',
              p_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA045678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BF5A5678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9835678E040007F01006C7D', -- Operator SALES_ORDER_FACT
              p_parent_object_name=>'SALES_ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'SALES_ORDER_FACT',
              p_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BCF25678E040007F01006C7D', -- Operator SALES_ORDER_FACT
              p_parent_object_name=>'SALES_ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'SALES_ORDER_FACT',
              p_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA075678E040007F01006C7D', -- Operator EVXPPCARD
              p_parent_object_name=>'EVXPPCARD',
              p_parent_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_parent_object_type=>'Table',
              p_object_name=>'EVXPPCARD',
              p_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "FLTR_si" := 0;
    "SALES_ORDER_FACT_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "FLTR_SU";

      LOOP
        IF "FLTR_si" = 0 THEN
          "FLTR_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "FLTR_2_EVXSOID".COUNT - 1;
          ELSE
            bulk_count := "FLTR_2_EVXSOID".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "SALES_ORDER_FACT_ir".DELETE;
"SALES_ORDER_FACT_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "FLTR_i" := "FLTR_si";
        BEGIN
          
          LOOP
            EXIT WHEN "SALES_ORDER_FACT_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "FLTR_i" := "FLTR_i" + 1;
            "FLTR_si" := "FLTR_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "SALES_ORDER_FACT_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("FLTR_c"%NOTFOUND AND
               "FLTR_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "FLTR_i" > bulk_count THEN
            
              "FLTR_si" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_LEADSOURCE_DESC_SO"((RTRIM("FLTR_2_EVXSOID"
            ("FLTR_i"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i"));
            
            ',0,2000);
            
                
                "GET_LEADSOURCE_DESC_SO"((RTRIM("FLTR_2_EVXSOID"
            ("FLTR_i"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_PP_SALES_ORDER_ID"((RTRIM("FLTR_2_EVXSOID"
            ("FLTR_i"))),"GET_PP_S_1_PP_SALES"
            ("FLTR_i"));
            
            ',0,2000);
            
                
                "GET_PP_SALES_ORDER_ID"((RTRIM("FLTR_2_EVXSOID"
            ("FLTR_i"))),"GET_PP_S_1_PP_SALES"
            ("FLTR_i"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"SALES_ORDER_FACT"';
            get_audit_detail_id := "SALES_ORDER_FACT_id";
            IF NOT "SALES_ORDER_FACT_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"SALES_OR_0_SALES_OR"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_2_EVXSOID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_0_SALES_OR"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_2_EVXSOID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_0_SALES_OR"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_2_EVXSOID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_0_SALES_OR" :=
            
            RTRIM("FLTR_2_EVXSOID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_1_PROD_NUM"("SALES_ORDER_FACT_i") := 
            
            "PRODUCT_DIM_2_PROD_NUM"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_1_PROD_NUM"',0,80);
            
            BEGIN
              error_value := SUBSTRB("PRODUCT_DIM_2_PROD_NUM"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_1_PROD_NUM"("SALES_ORDER_FACT_i") :=
            
            "PRODUCT_DIM_2_PROD_NUM"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_1_PROD_NUM" :=
            
            "PRODUCT_DIM_2_PROD_NUM"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_3_KEYCODE"("SALES_ORDER_FACT_i") := 
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_3_KEYCODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_LEAD_1_LEADSOUR"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_3_KEYCODE"("SALES_ORDER_FACT_i") :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_3_KEYCODE" :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_4_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_60_SHIPTOADDRESS1"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_4_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_60_SHIPTOADDRESS1"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_4_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_60_SHIPTOADDRESS1"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_4_SHIP_TO_" :=
            
            "FLTR_60_SHIPTOADDRESS1"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_5_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_61_SHIPTOADDRESS2"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_5_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_61_SHIPTOADDRESS2"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_5_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_61_SHIPTOADDRESS2"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_5_SHIP_TO_" :=
            
            "FLTR_61_SHIPTOADDRESS2"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_6_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_62_SHIPTOADDRESS3"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_6_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_62_SHIPTOADDRESS3"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_6_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_62_SHIPTOADDRESS3"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_6_SHIP_TO_" :=
            
            "FLTR_62_SHIPTOADDRESS3"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_7_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_64_SHIPTOCITY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_7_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_64_SHIPTOCITY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_7_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_64_SHIPTOCITY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_7_SHIP_TO_" :=
            
            "FLTR_64_SHIPTOCITY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_8_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_15_SHIP_TO_STATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_8_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_15_SHIP_TO_STATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_8_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_15_SHIP_TO_STATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_8_SHIP_TO_" :=
            
            "EXPR_15_SHIP_TO_STATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_9_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_16_SHIP_TO_PROVINCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_9_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_16_SHIP_TO_PROVINCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_9_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_16_SHIP_TO_PROVINCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_9_SHIP_TO_" :=
            
            "EXPR_16_SHIP_TO_PROVINCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_10_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_68_SHIPTOCOUNTRY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_10_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_68_SHIPTOCOUNTRY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_10_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_68_SHIPTOCOUNTRY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_10_SHIP_TO_" :=
            
            "FLTR_68_SHIPTOCOUNTRY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_11_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_69_SHIPTOCOUNTY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_11_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_69_SHIPTOCOUNTY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_11_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_69_SHIPTOCOUNTY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_11_SHIP_TO_" :=
            
            "FLTR_69_SHIPTOCOUNTY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_12_SHIP_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_70_SHIPTOPOSTAL"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_12_SHIP_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_70_SHIPTOPOSTAL"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_12_SHIP_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_70_SHIPTOPOSTAL"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_12_SHIP_TO_" :=
            
            "FLTR_70_SHIPTOPOSTAL"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_13_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_11_BILLTOADDRESS1"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_13_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_11_BILLTOADDRESS1"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_13_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_11_BILLTOADDRESS1"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_13_BILL_TO_" :=
            
            "FLTR_11_BILLTOADDRESS1"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_14_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_12_BILLTOADDRESS2"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_14_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_12_BILLTOADDRESS2"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_14_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_12_BILLTOADDRESS2"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_14_BILL_TO_" :=
            
            "FLTR_12_BILLTOADDRESS2"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_15_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_13_BILLTOADDRESS3"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_15_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_13_BILLTOADDRESS3"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_15_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_13_BILLTOADDRESS3"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_15_BILL_TO_" :=
            
            "FLTR_13_BILLTOADDRESS3"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_16_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_16_BILLTOCITY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_16_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_16_BILLTOCITY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_16_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_16_BILLTOCITY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_16_BILL_TO_" :=
            
            "FLTR_16_BILLTOCITY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_17_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_17_BILL_TO_STATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_17_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_17_BILL_TO_STATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_17_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_17_BILL_TO_STATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_17_BILL_TO_" :=
            
            "EXPR_17_BILL_TO_STATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_18_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_18_BILL_TO_PROVINCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_18_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_18_BILL_TO_PROVINCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_18_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_18_BILL_TO_PROVINCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_18_BILL_TO_" :=
            
            "EXPR_18_BILL_TO_PROVINCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_19_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_19_BILLTOCOUNTRY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_19_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_19_BILLTOCOUNTRY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_19_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_19_BILLTOCOUNTRY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_19_BILL_TO_" :=
            
            "FLTR_19_BILLTOCOUNTRY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_20_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_20_BILLTOCOUNTY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_20_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_20_BILLTOCOUNTY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_20_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_20_BILLTOCOUNTY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_20_BILL_TO_" :=
            
            "FLTR_20_BILLTOCOUNTY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_21_BILL_TO_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_21_BILLTOPOSTAL"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_21_BILL_TO_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_21_BILLTOPOSTAL"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_21_BILL_TO_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_21_BILLTOPOSTAL"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_21_BILL_TO_" :=
            
            "FLTR_21_BILLTOPOSTAL"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_22_CANCEL_D"("SALES_ORDER_FACT_i") := 
            
            "EXPR_22_CANCEL_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_22_CANCEL_D"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_22_CANCEL_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_22_CANCEL_D"("SALES_ORDER_FACT_i") :=
            
            "EXPR_22_CANCEL_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_22_CANCEL_D" :=
            
            "EXPR_22_CANCEL_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_23_SHIP_DATE"("SALES_ORDER_FACT_i") := 
            
            "FLTR_57_SHIPPEDDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_23_SHIP_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_57_SHIPPEDDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_23_SHIP_DATE"("SALES_ORDER_FACT_i") :=
            
            "FLTR_57_SHIPPEDDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_23_SHIP_DA" :=
            
            "FLTR_57_SHIPPEDDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_24_CREATION"("SALES_ORDER_FACT_i") := 
            
            "FLTR_4_CREATEDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_24_CREATION"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_4_CREATEDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_24_CREATION"("SALES_ORDER_FACT_i") :=
            
            "FLTR_4_CREATEDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_24_CREATION" :=
            
            "FLTR_4_CREATEDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_25_LAST_UPD"("SALES_ORDER_FACT_i") := 
            
            "FLTR_6_MODIFYDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_25_LAST_UPD"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_6_MODIFYDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_25_LAST_UPD"("SALES_ORDER_FACT_i") :=
            
            "FLTR_6_MODIFYDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_25_LAST_UPD" :=
            
            "FLTR_6_MODIFYDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_30_GKDW_SOU"("SALES_ORDER_FACT_i") := 
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"SALES_OR_30_GKDW_SOU"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_30_GKDW_SOU"("SALES_ORDER_FACT_i") :=
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_30_GKDW_SOU" :=
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_33_COUNTRY"("SALES_ORDER_FACT_i") := 
            
            "EXPR_21_COUNTRY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_33_COUNTRY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_21_COUNTRY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_33_COUNTRY"("SALES_ORDER_FACT_i") :=
            
            "EXPR_21_COUNTRY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_33_COUNTRY" :=
            
            "EXPR_21_COUNTRY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_35_TERRITORY"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_35_TERRITORY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_3_TERRITORY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_35_TERRITORY"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_35_TERRITO" :=
            
            "MARKET_DIM_3_TERRITORY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_36_REGION"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_4_REGION"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_36_REGION"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_4_REGION"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_36_REGION"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_4_REGION"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_36_REGION" :=
            
            "MARKET_DIM_4_REGION"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_37_SALES_REP"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_37_SALES_REP"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_5_SALES_REP"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_37_SALES_REP"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_37_SALES_R" :=
            
            "MARKET_DIM_5_SALES_REP"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_38_REGION_REP"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_38_REGION_REP"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_6_REGION_MGR"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_38_REGION_REP"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_38_REGION" :=
            
            "MARKET_DIM_6_REGION_MGR"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_39_BOOK_DATE"("SALES_ORDER_FACT_i") := 
            
            "EXPR_26_BOOK_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_39_BOOK_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_26_BOOK_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_39_BOOK_DATE"("SALES_ORDER_FACT_i") :=
            
            "EXPR_26_BOOK_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_39_BOOK_DA" :=
            
            "EXPR_26_BOOK_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_40_REV_DATE"("SALES_ORDER_FACT_i") := 
            
            "EXPR_23_REV_DATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_40_REV_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_23_REV_DATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_40_REV_DATE"("SALES_ORDER_FACT_i") :=
            
            "EXPR_23_REV_DATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_40_REV_DA" :=
            
            "EXPR_23_REV_DATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_41_QUANTITY"("SALES_ORDER_FACT_i") := 
            
            "EVXSODET_11_ACTUALQU"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_41_QUANTITY"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXSODET_11_ACTUALQU"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_41_QUANTITY"("SALES_ORDER_FACT_i") :=
            
            "EVXSODET_11_ACTUALQU"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_41_QUANTI" :=
            
            "EVXSODET_11_ACTUALQU"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_42_BOOK_AMT"("SALES_ORDER_FACT_i") := 
            
            "FLTR_90_TOTALNOTAX"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_42_BOOK_AMT"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_90_TOTALNOTAX"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_42_BOOK_AMT"("SALES_ORDER_FACT_i") :=
            
            "FLTR_90_TOTALNOTAX"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_42_BOOK_A" :=
            
            "FLTR_90_TOTALNOTAX"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_43_CURR_CODE"("SALES_ORDER_FACT_i") := 
            
            "FLTR_23_CURRENCYTYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_43_CURR_CODE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_23_CURRENCYTYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_43_CURR_CODE"("SALES_ORDER_FACT_i") :=
            
            "FLTR_23_CURRENCYTYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_43_CURR_CO" :=
            
            "FLTR_23_CURRENCYTYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_45_SALESPER"("SALES_ORDER_FACT_i") := 
            
            "EVXSODETAIL_57_SOLDBYUSER"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_45_SALESPER"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXSODETAIL_57_SOLDBYUSER"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_45_SALESPER"("SALES_ORDER_FACT_i") :=
            
            "EVXSODETAIL_57_SOLDBYUSER"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_45_SALESPER" :=
            
            "EVXSODETAIL_57_SOLDBYUSER"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_47_OPPORTUN"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_34_OPPORTUNITYID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_47_OPPORTUN"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_34_OPPORTUNITYID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_47_OPPORTUN"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_34_OPPORTUNITYID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_47_OPPORTUN" :=
            
            RTRIM("FLTR_34_OPPORTUNITYID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_51_CUST_ID"("SALES_ORDER_FACT_i") := 
            
            "EXPR_19_CUST_ID"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_51_CUST_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_19_CUST_ID"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_51_CUST_ID"("SALES_ORDER_FACT_i") :=
            
            "EXPR_19_CUST_ID"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_51_CUST_ID" :=
            
            "EXPR_19_CUST_ID"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_52_PRODUCT_ID"("SALES_ORDER_FACT_i") := 
            
            RTRIM("EVXSODETAIL_32_PRODUCTID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_52_PRODUCT_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXSODETAIL_32_PRODUCTID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_52_PRODUCT_ID"("SALES_ORDER_FACT_i") :=
            
            RTRIM("EVXSODETAIL_32_PRODUCTID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_52_PRODUC" :=
            
            RTRIM("EVXSODETAIL_32_PRODUCTID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_53_BILL_DATE"("SALES_ORDER_FACT_i") := 
            
            "ORACLETX_HISTORY_4_CREATEDATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_53_BILL_DATE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("ORACLETX_HISTORY_4_CREATEDATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_53_BILL_DATE"("SALES_ORDER_FACT_i") :=
            
            "ORACLETX_HISTORY_4_CREATEDATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_53_BILL_DA" :=
            
            "ORACLETX_HISTORY_4_CREATEDATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_54_RECORD_T"("SALES_ORDER_FACT_i") := 
            
            "FLTR_52_RECORDTYPE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_54_RECORD_T"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_52_RECORDTYPE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_54_RECORD_T"("SALES_ORDER_FACT_i") :=
            
            "FLTR_52_RECORDTYPE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_54_RECORD_T" :=
            
            "FLTR_52_RECORDTYPE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_55_RECORD_T"("SALES_ORDER_FACT_i") := 
            
            "FLTR_53_RECORDTYPECODE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_55_RECORD_T"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_53_RECORDTYPECODE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_55_RECORD_T"("SALES_ORDER_FACT_i") :=
            
            "FLTR_53_RECORDTYPECODE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_55_RECORD_T" :=
            
            "FLTR_53_RECORDTYPECODE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_56_SO_STATUS"("SALES_ORDER_FACT_i") := 
            
            "FLTR_80_SOSTATUS"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_56_SO_STATUS"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_80_SOSTATUS"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_56_SO_STATUS"("SALES_ORDER_FACT_i") :=
            
            "FLTR_80_SOSTATUS"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_56_SO_STAT" :=
            
            "FLTR_80_SOSTATUS"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_57_PPCARD_ID"("SALES_ORDER_FACT_i") := 
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_57_PPCARD_ID"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXPPCARD_1_EVXPPCARDID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_57_PPCARD_ID"("SALES_ORDER_FACT_i") :=
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_57_PPCARD_" :=
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_59_PP_SALES"("SALES_ORDER_FACT_i") := 
            
            "GET_PP_S_1_PP_SALES"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_59_PP_SALES"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_PP_S_1_PP_SALES"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_59_PP_SALES"("SALES_ORDER_FACT_i") :=
            
            "GET_PP_S_1_PP_SALES"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_59_PP_SALES" :=
            
            "GET_PP_S_1_PP_SALES"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_60_ORDERED_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_24_ORDERED_BY_STATE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_60_ORDERED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_24_ORDERED_BY_STATE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_60_ORDERED_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_24_ORDERED_BY_STATE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_60_ORDERED_" :=
            
            "EXPR_24_ORDERED_BY_STATE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_61_ORDERED_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_25_ORDERED_BY_PROVINCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_61_ORDERED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_25_ORDERED_BY_PROVINCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_61_ORDERED_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_25_ORDERED_BY_PROVINCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_61_ORDERED_" :=
            
            "EXPR_25_ORDERED_BY_PROVINCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_62_ORDERED_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_47_ORDEREDBYPOSTAL"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_62_ORDERED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_47_ORDEREDBYPOSTAL"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_62_ORDERED_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_47_ORDEREDBYPOSTAL"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_62_ORDERED_" :=
            
            "FLTR_47_ORDEREDBYPOSTAL"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_63_ORDERED_"("SALES_ORDER_FACT_i") := 
            
            "FLTR_46_ORDEREDBYCOUNTRY"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_63_ORDERED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_46_ORDEREDBYCOUNTRY"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_63_ORDERED_"("SALES_ORDER_FACT_i") :=
            
            "FLTR_46_ORDEREDBYCOUNTRY"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_63_ORDERED_" :=
            
            "FLTR_46_ORDEREDBYCOUNTRY"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_64_ORDERED_"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID"("FLTR_i"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_64_ORDERED_"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_45_ORDEREDBYCONTACTID"("FLTR_i")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_64_ORDERED_"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID"("FLTR_i"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_64_ORDERED_" :=
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID"("FLTR_i"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_65_CUST_ID_"("SALES_ORDER_FACT_i") := 
            
            "EXPR_1_2_ZIP_CODE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_65_CUST_ID_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_1_2_ZIP_CODE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_65_CUST_ID_"("SALES_ORDER_FACT_i") :=
            
            "EXPR_1_2_ZIP_CODE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_65_CUST_ID_" :=
            
            "EXPR_1_2_ZIP_CODE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_66_PAYMENT_"("SALES_ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_OR_66_PAYMENT_"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_31_METHOD"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_66_PAYMENT_"("SALES_ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_66_PAYMENT_" :=
            
            "EVXBILLPAYMENT_31_METHOD"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_67_PO_NUMBER"("SALES_ORDER_FACT_i") := 
            
            "FLTR_51_PURCHASEORDER"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_67_PO_NUMBER"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_51_PURCHASEORDER"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_67_PO_NUMBER"("SALES_ORDER_FACT_i") :=
            
            "FLTR_51_PURCHASEORDER"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_67_PO_NUMB" :=
            
            "FLTR_51_PURCHASEORDER"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_70_SOURCE"("SALES_ORDER_FACT_i") := 
            
            "FLTR_95_SOURCE"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_70_SOURCE"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_95_SOURCE"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_70_SOURCE"("SALES_ORDER_FACT_i") :=
            
            "FLTR_95_SOURCE"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_70_SOURCE" :=
            
            "FLTR_95_SOURCE"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_71_CHANNEL"("SALES_ORDER_FACT_i") := 
            
            "FLTR_96_CHANNEL"("FLTR_i");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_71_CHANNEL"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_96_CHANNEL"("FLTR_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_71_CHANNEL"("SALES_ORDER_FACT_i") :=
            
            "FLTR_96_CHANNEL"("FLTR_i");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_71_CHANNEL" :=
            
            "FLTR_96_CHANNEL"("FLTR_i");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "SALES_ORDER_FACT_srk"("SALES_ORDER_FACT_i") := get_rowkey + "FLTR_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_SALES_ORDER_FACT_srk" := get_rowkey + "FLTR_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "SALES_ORDER_FACT_new" := TRUE;
                ELSE
                  "SALES_ORDER_FACT_i" := "SALES_ORDER_FACT_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "FLTR_ER"('TRACE 249: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "FLTR_i");
                  
                  "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
                  
                  IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("SALES_ORDER_FACT_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "SALES_ORDER_FACT_new" 
            AND (NOT "SALES_ORDER_FACT_nul") THEN
              "SALES_ORDER_FACT_ir"(dml_bsize) := "SALES_ORDER_FACT_i";
            	"SALES_OR_0_SALES_OR"("SALES_ORDER_FACT_i") := "SV_SALES_OR_0_SALES_OR";
            	"SALES_ORDER_FACT_1_PROD_NUM"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_1_PROD_NUM";
            	"SALES_ORDER_FACT_3_KEYCODE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_3_KEYCODE";
            	"SALES_OR_4_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_4_SHIP_TO_";
            	"SALES_OR_5_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_5_SHIP_TO_";
            	"SALES_OR_6_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_6_SHIP_TO_";
            	"SALES_OR_7_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_7_SHIP_TO_";
            	"SALES_OR_8_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_8_SHIP_TO_";
            	"SALES_OR_9_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_9_SHIP_TO_";
            	"SALES_OR_10_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_10_SHIP_TO_";
            	"SALES_OR_11_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_11_SHIP_TO_";
            	"SALES_OR_12_SHIP_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_12_SHIP_TO_";
            	"SALES_OR_13_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_13_BILL_TO_";
            	"SALES_OR_14_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_14_BILL_TO_";
            	"SALES_OR_15_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_15_BILL_TO_";
            	"SALES_OR_16_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_16_BILL_TO_";
            	"SALES_OR_17_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_17_BILL_TO_";
            	"SALES_OR_18_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_18_BILL_TO_";
            	"SALES_OR_19_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_19_BILL_TO_";
            	"SALES_OR_20_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_20_BILL_TO_";
            	"SALES_OR_21_BILL_TO_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_21_BILL_TO_";
            	"SALES_OR_22_CANCEL_D"("SALES_ORDER_FACT_i") := "SV_SALES_OR_22_CANCEL_D";
            	"SALES_ORDER_FACT_23_SHIP_DATE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_23_SHIP_DA";
            	"SALES_OR_24_CREATION"("SALES_ORDER_FACT_i") := "SV_SALES_OR_24_CREATION";
            	"SALES_OR_25_LAST_UPD"("SALES_ORDER_FACT_i") := "SV_SALES_OR_25_LAST_UPD";
            	"SALES_OR_30_GKDW_SOU"("SALES_ORDER_FACT_i") := "SV_SALES_OR_30_GKDW_SOU";
            	"SALES_ORDER_FACT_33_COUNTRY"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_33_COUNTRY";
            	"SALES_ORDER_FACT_35_TERRITORY"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_35_TERRITO";
            	"SALES_ORDER_FACT_36_REGION"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_36_REGION";
            	"SALES_ORDER_FACT_37_SALES_REP"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_37_SALES_R";
            	"SALES_ORDER_FACT_38_REGION_REP"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_38_REGION";
            	"SALES_ORDER_FACT_39_BOOK_DATE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_39_BOOK_DA";
            	"SALES_ORDER_FACT_40_REV_DATE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_40_REV_DA";
            	"SALES_ORDER_FACT_41_QUANTITY"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_41_QUANTI";
            	"SALES_ORDER_FACT_42_BOOK_AMT"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_42_BOOK_A";
            	"SALES_ORDER_FACT_43_CURR_CODE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_43_CURR_CO";
            	"SALES_OR_45_SALESPER"("SALES_ORDER_FACT_i") := "SV_SALES_OR_45_SALESPER";
            	"SALES_OR_47_OPPORTUN"("SALES_ORDER_FACT_i") := "SV_SALES_OR_47_OPPORTUN";
            	"SALES_ORDER_FACT_51_CUST_ID"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_51_CUST_ID";
            	"SALES_ORDER_FACT_52_PRODUCT_ID"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_52_PRODUC";
            	"SALES_ORDER_FACT_53_BILL_DATE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_53_BILL_DA";
            	"SALES_OR_54_RECORD_T"("SALES_ORDER_FACT_i") := "SV_SALES_OR_54_RECORD_T";
            	"SALES_OR_55_RECORD_T"("SALES_ORDER_FACT_i") := "SV_SALES_OR_55_RECORD_T";
            	"SALES_ORDER_FACT_56_SO_STATUS"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_56_SO_STAT";
            	"SALES_ORDER_FACT_57_PPCARD_ID"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_57_PPCARD_";
            	"SALES_OR_59_PP_SALES"("SALES_ORDER_FACT_i") := "SV_SALES_OR_59_PP_SALES";
            	"SALES_OR_60_ORDERED_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_60_ORDERED_";
            	"SALES_OR_61_ORDERED_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_61_ORDERED_";
            	"SALES_OR_62_ORDERED_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_62_ORDERED_";
            	"SALES_OR_63_ORDERED_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_63_ORDERED_";
            	"SALES_OR_64_ORDERED_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_64_ORDERED_";
            	"SALES_OR_65_CUST_ID_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_65_CUST_ID_";
            	"SALES_OR_66_PAYMENT_"("SALES_ORDER_FACT_i") := "SV_SALES_OR_66_PAYMENT_";
            	"SALES_ORDER_FACT_67_PO_NUMBER"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_67_PO_NUMB";
            	"SALES_ORDER_FACT_70_SOURCE"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_70_SOURCE";
            	"SALES_ORDER_FACT_71_CHANNEL"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_71_CHANNEL";
              "SALES_ORDER_FACT_srk"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_srk";
              "SALES_ORDER_FACT_i" := "SALES_ORDER_FACT_i" + 1;
            ELSE
              "SALES_ORDER_FACT_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "FLTR_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "FLTR_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "FLTR_ER"('TRACE 247: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "FLTR_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "FLTR_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "FLTR_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "FLTR_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "FLTR_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "SALES_ORDER_FACT_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"SALES_ORDER_FACT_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"SALES_ORDER_FACT_ins",
        p_upd=>"SALES_ORDER_FACT_upd",
        p_del=>"SALES_ORDER_FACT_del",
        p_err=>"SALES_ORDER_FACT_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "SALES_ORDER_FACT_ins";
    get_updated  := get_updated  + "SALES_ORDER_FACT_upd";
    get_deleted  := get_deleted  + "SALES_ORDER_FACT_del";
    get_errors   := get_errors   + "SALES_ORDER_FACT_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "FLTR_p";



-- Procedure "FLTR_t" is the entry point for map "FLTR_t"

PROCEDURE "FLTR_t"
 IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"FLTR_t"';
get_source_name            CONSTANT VARCHAR2(2000) := '"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"';
get_source_uoid            CONSTANT VARCHAR2(2000) := 'A41FFB19BA065678E040007F01006C7D,A41FFB19B9B25678E040007F01006C7D,A41FFB19B9805678E040007F01006C7D,A41FFB19BA045678E040007F01006C7D,A41FFB19B9B15678E040007F01006C7D,A41FFB19B9815678E040007F01006C7D,A41FFB19BA075678E040007F01006C7D,A41FFB19B9825678E040007F01006C7D';
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"SALES_ORDER_FACT_id" NUMBER(22) := 0;
"SALES_ORDER_FACT_ins" NUMBER(22) := 0;
"SALES_ORDER_FACT_upd" NUMBER(22) := 0;
"SALES_ORDER_FACT_del" NUMBER(22) := 0;
"SALES_ORDER_FACT_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"SALES_ORDER_FACT_srk" WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"SALES_ORDER_FACT_ir"  index_redirect_array;
"SV_SALES_ORDER_FACT_srk" NUMBER;
"SALES_ORDER_FACT_new"  BOOLEAN;
"SALES_ORDER_FACT_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"FLTR_si$1" NUMBER(22) := 0;

"FLTR_i$1" NUMBER(22) := 0;


"SALES_ORDER_FACT_si" NUMBER(22) := 0;

"SALES_ORDER_FACT_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_FLTR_2_EVXSOID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_FLTR$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_PRODUCT_DIM_2_PROD_NUM$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_GET_LEAD_1_LEADSOUR" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_60_SHIPTOADDRESS1$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_61_SHIPTOADDRESS2$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_62_SHIPTOADDRESS3$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_64_SHIPTOCITY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_15_SHIP_TO_STATE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_16_SHIP_TO_PROVINCE$1" IS TABLE OF VARCHAR2(49) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_68_SHIPTOCOUNTRY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_69_SHIPTOCOUNTY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_70_SHIPTOPOSTAL$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_11_BILLTOADDRESS1$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_12_BILLTOADDRESS2$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_13_BILLTOADDRESS3$1" IS TABLE OF VARCHAR2(64) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_16_BILLTOCITY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_17_BILL_TO_STATE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_18_BILL_TO_PROVINCE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_19_BILLTOCOUNTRY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_20_BILLTOCOUNTY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_21_BILLTOPOSTAL$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_22_CANCEL_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_57_SHIPPEDDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_4_CREATEDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_6_MODIFYDATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_21_COUNTRY$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_3_TERRITORY$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_4_REGION$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_5_SALES_REP$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_MARKET_DIM_6_REGION_MGR$1" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_26_BOOK_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_23_REV_DATE$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODET_11_ACTUALQU$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_90_TOTALNOTAX$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_23_CURRENCYTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODETAIL_57_SOLDBYUSER$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_34_OPPORTUNITYID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_19_CUST_ID$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EVXSODETAIL_32_PRODUCTID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_ORACLETX_HISTORY_4_CREATE" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_52_RECORDTYPE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_53_RECORDTYPECODE$1" IS TABLE OF VARCHAR2(3) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_80_SOSTATUS$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_EVXPPCARD_1_EVXPPCARDID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_GET_PP_S_1_PP_SALES" IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_24_ORDERED_BY_STATE$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_25_ORDERED_BY_PROVIN" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_47_ORDEREDBYPOSTAL$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_46_ORDEREDBYCOUNTRY$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_45_ORDEREDBYCONTACTID$1" IS TABLE OF CHAR(12) INDEX BY BINARY_INTEGER;
TYPE "T_EXPR_1_2_ZIP_CODE$1" IS TABLE OF VARCHAR(35) INDEX BY BINARY_INTEGER;
TYPE "T_EVXBILLPAYMENT_31_METHOD$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_51_PURCHASEORDER$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_95_SOURCE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_FLTR_96_CHANNEL$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_0_SALES_OR$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_1_PROD_N" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_3_KEYCODE$1" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_4_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_5_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_6_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_7_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_8_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_9_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_10_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_11_SHIP_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_12_SHIP_TO_$1" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_13_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_14_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_15_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_16_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_17_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_18_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_19_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_20_BILL_TO_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_21_BILL_TO_$1" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_22_CANCEL_D$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_23_SHIP_" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_24_CREATION$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_25_LAST_UPD$1" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_30_GKDW_SOU$1" IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_33_COUNT" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_35_TERRI" IS TABLE OF VARCHAR2(25) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_36_REGION$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_37_SALES" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_38_REGION" IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_39_BOOK_" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_40_REV_DA" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_41_QUANTI" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_42_BOOK_A" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_43_CURR_" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_45_SALESPER$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_47_OPPORTUN$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_51_CUST_" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_52_PRODUC" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_53_BILL_" IS TABLE OF DATE INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_54_RECORD_T$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_55_RECORD_T$1" IS TABLE OF VARCHAR2(3) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_56_SO_ST" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_57_PPCAR" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_59_PP_SALES$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_60_ORDERED_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_61_ORDERED_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_62_ORDERED_$1" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_63_ORDERED_$1" IS TABLE OF VARCHAR2(250) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_64_ORDERED_$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_65_CUST_ID_$1" IS TABLE OF VARCHAR2(35) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_OR_66_PAYMENT_$1" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_67_PO_NU" IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_70_SOURCE$1" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;
TYPE "T_SALES_ORDER_FACT_71_CHANN" IS TABLE OF VARCHAR2(32) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_FLTR_2_EVXSOID$1"  CHAR(12);
"SV_ROWKEY_FLTR$1"  VARCHAR2(18);
"SV_PRODUCT_DIM_2_PROD_NUM$1"  VARCHAR2(100);
"SV_GET_LEAD_1_LEADSOUR"  VARCHAR2(32767);
"SV_FLTR_60_SHIPTOADDRESS1$1"  VARCHAR2(64);
"SV_FLTR_61_SHIPTOADDRESS2$1"  VARCHAR2(64);
"SV_FLTR_62_SHIPTOADDRESS3$1"  VARCHAR2(64);
"SV_FLTR_64_SHIPTOCITY$1"  VARCHAR2(32);
"SV_EXPR_15_SHIP_TO_STATE$1"  VARCHAR2(50);
"SV_EXPR_16_SHIP_TO_PROVINCE$1"  VARCHAR2(49);
"SV_FLTR_68_SHIPTOCOUNTRY$1"  VARCHAR2(32);
"SV_FLTR_69_SHIPTOCOUNTY$1"  VARCHAR2(32);
"SV_FLTR_70_SHIPTOPOSTAL$1"  VARCHAR2(32);
"SV_FLTR_11_BILLTOADDRESS1$1"  VARCHAR2(64);
"SV_FLTR_12_BILLTOADDRESS2$1"  VARCHAR2(64);
"SV_FLTR_13_BILLTOADDRESS3$1"  VARCHAR2(64);
"SV_FLTR_16_BILLTOCITY$1"  VARCHAR2(32);
"SV_EXPR_17_BILL_TO_STATE$1"  VARCHAR2(50);
"SV_EXPR_18_BILL_TO_PROVINCE$1"  VARCHAR2(50);
"SV_FLTR_19_BILLTOCOUNTRY$1"  VARCHAR2(32);
"SV_FLTR_20_BILLTOCOUNTY$1"  VARCHAR2(32);
"SV_FLTR_21_BILLTOPOSTAL$1"  VARCHAR2(32);
"SV_EXPR_22_CANCEL_DATE$1"  DATE;
"SV_FLTR_57_SHIPPEDDATE$1"  DATE;
"SV_FLTR_4_CREATEDATE$1"  DATE;
"SV_FLTR_6_MODIFYDATE$1"  DATE;
"SV_ROWKEY_DUMMY_TABLE_CURSOR$1"  VARCHAR2(18);
"SV_EXPR_21_COUNTRY$1"  VARCHAR2(50);
"SV_MARKET_DIM_3_TERRITORY$1"  VARCHAR2(25);
"SV_MARKET_DIM_4_REGION$1"  VARCHAR2(50);
"SV_MARKET_DIM_5_SALES_REP$1"  VARCHAR2(100);
"SV_MARKET_DIM_6_REGION_MGR$1"  VARCHAR2(100);
"SV_EXPR_26_BOOK_DATE$1"  DATE;
"SV_EXPR_23_REV_DATE$1"  DATE;
"SV_EVXSODET_11_ACTUALQU$1"  NUMBER;
"SV_FLTR_90_TOTALNOTAX$1"  NUMBER;
"SV_FLTR_23_CURRENCYTYPE$1"  VARCHAR2(32);
"SV_EVXSODETAIL_57_SOLDBYUSER$1"  VARCHAR2(32);
"SV_FLTR_34_OPPORTUNITYID$1"  CHAR(12);
"SV_EXPR_19_CUST_ID$1"  VARCHAR2(50);
"SV_EVXSODETAIL_32_PRODUCTID$1"  CHAR(12);
"SV_ORACLETX_HISTORY_4_CREATE"  DATE;
"SV_FLTR_52_RECORDTYPE$1"  VARCHAR2(32);
"SV_FLTR_53_RECORDTYPECODE$1"  VARCHAR2(3);
"SV_FLTR_80_SOSTATUS$1"  VARCHAR2(32);
"SV_EVXPPCARD_1_EVXPPCARDID$1"  CHAR(12);
"SV_GET_PP_S_1_PP_SALES"  VARCHAR2(32767);
"SV_EXPR_24_ORDERED_BY_STATE$1"  VARCHAR2(50);
"SV_EXPR_25_ORDERED_BY_PROVIN"  VARCHAR2(50);
"SV_FLTR_47_ORDEREDBYPOSTAL$1"  VARCHAR2(32);
"SV_FLTR_46_ORDEREDBYCOUNTRY$1"  VARCHAR2(32);
"SV_FLTR_45_ORDEREDBYCONTACT"  CHAR(12);
"SV_EXPR_1_2_ZIP_CODE$1"  VARCHAR(35);
"SV_EVXBILLPAYMENT_31_METHOD$1"  VARCHAR2(32);
"SV_FLTR_51_PURCHASEORDER$1"  VARCHAR2(32);
"SV_FLTR_95_SOURCE$1"  VARCHAR2(32);
"SV_FLTR_96_CHANNEL$1"  VARCHAR2(32);
"SV_SALES_OR_0_SALES_OR$1"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_1_PROD_N"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_3_KEYCO"  VARCHAR2(25);
"SV_SALES_OR_4_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_5_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_6_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_7_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_8_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_9_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_10_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_11_SHIP_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_12_SHIP_TO_$1"  VARCHAR2(35);
"SV_SALES_OR_13_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_14_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_15_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_16_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_17_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_18_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_19_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_20_BILL_TO_$1"  VARCHAR2(250);
"SV_SALES_OR_21_BILL_TO_$1"  VARCHAR2(35);
"SV_SALES_OR_22_CANCEL_D$1"  DATE;
"SV_SALES_ORDER_FACT_23_SHIP_"  DATE;
"SV_SALES_OR_24_CREATION$1"  DATE;
"SV_SALES_OR_25_LAST_UPD$1"  DATE;
"SV_SALES_OR_30_GKDW_SOU$1"  VARCHAR2(20);
"SV_SALES_ORDER_FACT_33_COUNT"  VARCHAR2(250);
"SV_SALES_ORDER_FACT_35_TERRI"  VARCHAR2(25);
"SV_SALES_ORDER_FACT_36_REGI"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_37_SALES"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_38_REGI"  VARCHAR2(100);
"SV_SALES_ORDER_FACT_39_BOOK_"  DATE;
"SV_SALES_ORDER_FACT_40_REV_"  DATE;
"SV_SALES_ORDER_FACT_41_QUAN"  NUMBER;
"SV_SALES_ORDER_FACT_42_BOOK"  NUMBER;
"SV_SALES_ORDER_FACT_43_CURR_"  VARCHAR2(35);
"SV_SALES_OR_45_SALESPER$1"  VARCHAR2(250);
"SV_SALES_OR_47_OPPORTUN$1"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_51_CUST_"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_52_PROD"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_53_BILL_"  DATE;
"SV_SALES_OR_54_RECORD_T$1"  VARCHAR2(50);
"SV_SALES_OR_55_RECORD_T$1"  VARCHAR2(3);
"SV_SALES_ORDER_FACT_56_SO_ST"  VARCHAR2(35);
"SV_SALES_ORDER_FACT_57_PPCAR"  VARCHAR2(50);
"SV_SALES_OR_59_PP_SALES$1"  VARCHAR2(50);
"SV_SALES_OR_60_ORDERED_$1"  VARCHAR2(250);
"SV_SALES_OR_61_ORDERED_$1"  VARCHAR2(250);
"SV_SALES_OR_62_ORDERED_$1"  VARCHAR2(35);
"SV_SALES_OR_63_ORDERED_$1"  VARCHAR2(250);
"SV_SALES_OR_64_ORDERED_$1"  VARCHAR2(50);
"SV_SALES_OR_65_CUST_ID_$1"  VARCHAR2(35);
"SV_SALES_OR_66_PAYMENT_$1"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_67_PO_NU"  VARCHAR2(50);
"SV_SALES_ORDER_FACT_70_SOUR"  VARCHAR2(32);
"SV_SALES_ORDER_FACT_71_CHANN"  VARCHAR2(32);

-- Bulk: intermediate collection variables
"FLTR_2_EVXSOID$1" "T_FLTR_2_EVXSOID$1";
"ROWKEY_FLTR$1" "T_ROWKEY_FLTR$1";
"PRODUCT_DIM_2_PROD_NUM$1" "T_PRODUCT_DIM_2_PROD_NUM$1";
"GET_LEAD_1_LEADSOUR" "T_GET_LEAD_1_LEADSOUR";
"FLTR_60_SHIPTOADDRESS1$1" "T_FLTR_60_SHIPTOADDRESS1$1";
"FLTR_61_SHIPTOADDRESS2$1" "T_FLTR_61_SHIPTOADDRESS2$1";
"FLTR_62_SHIPTOADDRESS3$1" "T_FLTR_62_SHIPTOADDRESS3$1";
"FLTR_64_SHIPTOCITY$1" "T_FLTR_64_SHIPTOCITY$1";
"EXPR_15_SHIP_TO_STATE$1" "T_EXPR_15_SHIP_TO_STATE$1";
"EXPR_16_SHIP_TO_PROVINCE$1" "T_EXPR_16_SHIP_TO_PROVINCE$1";
"FLTR_68_SHIPTOCOUNTRY$1" "T_FLTR_68_SHIPTOCOUNTRY$1";
"FLTR_69_SHIPTOCOUNTY$1" "T_FLTR_69_SHIPTOCOUNTY$1";
"FLTR_70_SHIPTOPOSTAL$1" "T_FLTR_70_SHIPTOPOSTAL$1";
"FLTR_11_BILLTOADDRESS1$1" "T_FLTR_11_BILLTOADDRESS1$1";
"FLTR_12_BILLTOADDRESS2$1" "T_FLTR_12_BILLTOADDRESS2$1";
"FLTR_13_BILLTOADDRESS3$1" "T_FLTR_13_BILLTOADDRESS3$1";
"FLTR_16_BILLTOCITY$1" "T_FLTR_16_BILLTOCITY$1";
"EXPR_17_BILL_TO_STATE$1" "T_EXPR_17_BILL_TO_STATE$1";
"EXPR_18_BILL_TO_PROVINCE$1" "T_EXPR_18_BILL_TO_PROVINCE$1";
"FLTR_19_BILLTOCOUNTRY$1" "T_FLTR_19_BILLTOCOUNTRY$1";
"FLTR_20_BILLTOCOUNTY$1" "T_FLTR_20_BILLTOCOUNTY$1";
"FLTR_21_BILLTOPOSTAL$1" "T_FLTR_21_BILLTOPOSTAL$1";
"EXPR_22_CANCEL_DATE$1" "T_EXPR_22_CANCEL_DATE$1";
"FLTR_57_SHIPPEDDATE$1" "T_FLTR_57_SHIPPEDDATE$1";
"FLTR_4_CREATEDATE$1" "T_FLTR_4_CREATEDATE$1";
"FLTR_6_MODIFYDATE$1" "T_FLTR_6_MODIFYDATE$1";
"ROWKEY_DUMMY_TABLE_CURSOR$1" "T_ROWKEY_DUMMY_TABLE_CURSOR$1";
"EXPR_21_COUNTRY$1" "T_EXPR_21_COUNTRY$1";
"MARKET_DIM_3_TERRITORY$1" "T_MARKET_DIM_3_TERRITORY$1";
"MARKET_DIM_4_REGION$1" "T_MARKET_DIM_4_REGION$1";
"MARKET_DIM_5_SALES_REP$1" "T_MARKET_DIM_5_SALES_REP$1";
"MARKET_DIM_6_REGION_MGR$1" "T_MARKET_DIM_6_REGION_MGR$1";
"EXPR_26_BOOK_DATE$1" "T_EXPR_26_BOOK_DATE$1";
"EXPR_23_REV_DATE$1" "T_EXPR_23_REV_DATE$1";
"EVXSODET_11_ACTUALQU$1" "T_EVXSODET_11_ACTUALQU$1";
"FLTR_90_TOTALNOTAX$1" "T_FLTR_90_TOTALNOTAX$1";
"FLTR_23_CURRENCYTYPE$1" "T_FLTR_23_CURRENCYTYPE$1";
"EVXSODETAIL_57_SOLDBYUSER$1" "T_EVXSODETAIL_57_SOLDBYUSER$1";
"FLTR_34_OPPORTUNITYID$1" "T_FLTR_34_OPPORTUNITYID$1";
"EXPR_19_CUST_ID$1" "T_EXPR_19_CUST_ID$1";
"EVXSODETAIL_32_PRODUCTID$1" "T_EVXSODETAIL_32_PRODUCTID$1";
"ORACLETX_HISTORY_4_CREATEDA" "T_ORACLETX_HISTORY_4_CREATE";
"FLTR_52_RECORDTYPE$1" "T_FLTR_52_RECORDTYPE$1";
"FLTR_53_RECORDTYPECODE$1" "T_FLTR_53_RECORDTYPECODE$1";
"FLTR_80_SOSTATUS$1" "T_FLTR_80_SOSTATUS$1";
"EVXPPCARD_1_EVXPPCARDID$1" "T_EVXPPCARD_1_EVXPPCARDID$1";
"GET_PP_S_1_PP_SALES" "T_GET_PP_S_1_PP_SALES";
"EXPR_24_ORDERED_BY_STATE$1" "T_EXPR_24_ORDERED_BY_STATE$1";
"EXPR_25_ORDERED_BY_PROVINCE$1" "T_EXPR_25_ORDERED_BY_PROVIN";
"FLTR_47_ORDEREDBYPOSTAL$1" "T_FLTR_47_ORDEREDBYPOSTAL$1";
"FLTR_46_ORDEREDBYCOUNTRY$1" "T_FLTR_46_ORDEREDBYCOUNTRY$1";
"FLTR_45_ORDEREDBYCONTACTID$1" "T_FLTR_45_ORDEREDBYCONTACTID$1";
"EXPR_1_2_ZIP_CODE$1" "T_EXPR_1_2_ZIP_CODE$1";
"EVXBILLPAYMENT_31_METHOD$1" "T_EVXBILLPAYMENT_31_METHOD$1";
"FLTR_51_PURCHASEORDER$1" "T_FLTR_51_PURCHASEORDER$1";
"FLTR_95_SOURCE$1" "T_FLTR_95_SOURCE$1";
"FLTR_96_CHANNEL$1" "T_FLTR_96_CHANNEL$1";
"SALES_OR_0_SALES_OR$1" "T_SALES_OR_0_SALES_OR$1";
"SALES_ORDER_FACT_1_PROD_NUM$1" "T_SALES_ORDER_FACT_1_PROD_N";
"SALES_ORDER_FACT_3_KEYCODE$1" "T_SALES_ORDER_FACT_3_KEYCODE$1";
"SALES_OR_4_SHIP_TO_$1" "T_SALES_OR_4_SHIP_TO_$1";
"SALES_OR_5_SHIP_TO_$1" "T_SALES_OR_5_SHIP_TO_$1";
"SALES_OR_6_SHIP_TO_$1" "T_SALES_OR_6_SHIP_TO_$1";
"SALES_OR_7_SHIP_TO_$1" "T_SALES_OR_7_SHIP_TO_$1";
"SALES_OR_8_SHIP_TO_$1" "T_SALES_OR_8_SHIP_TO_$1";
"SALES_OR_9_SHIP_TO_$1" "T_SALES_OR_9_SHIP_TO_$1";
"SALES_OR_10_SHIP_TO_$1" "T_SALES_OR_10_SHIP_TO_$1";
"SALES_OR_11_SHIP_TO_$1" "T_SALES_OR_11_SHIP_TO_$1";
"SALES_OR_12_SHIP_TO_$1" "T_SALES_OR_12_SHIP_TO_$1";
"SALES_OR_13_BILL_TO_$1" "T_SALES_OR_13_BILL_TO_$1";
"SALES_OR_14_BILL_TO_$1" "T_SALES_OR_14_BILL_TO_$1";
"SALES_OR_15_BILL_TO_$1" "T_SALES_OR_15_BILL_TO_$1";
"SALES_OR_16_BILL_TO_$1" "T_SALES_OR_16_BILL_TO_$1";
"SALES_OR_17_BILL_TO_$1" "T_SALES_OR_17_BILL_TO_$1";
"SALES_OR_18_BILL_TO_$1" "T_SALES_OR_18_BILL_TO_$1";
"SALES_OR_19_BILL_TO_$1" "T_SALES_OR_19_BILL_TO_$1";
"SALES_OR_20_BILL_TO_$1" "T_SALES_OR_20_BILL_TO_$1";
"SALES_OR_21_BILL_TO_$1" "T_SALES_OR_21_BILL_TO_$1";
"SALES_OR_22_CANCEL_D$1" "T_SALES_OR_22_CANCEL_D$1";
"SALES_ORDER_FACT_23_SHIP_DA" "T_SALES_ORDER_FACT_23_SHIP_";
"SALES_OR_24_CREATION$1" "T_SALES_OR_24_CREATION$1";
"SALES_OR_25_LAST_UPD$1" "T_SALES_OR_25_LAST_UPD$1";
"SALES_OR_30_GKDW_SOU$1" "T_SALES_OR_30_GKDW_SOU$1";
"SALES_ORDER_FACT_33_COUNTRY$1" "T_SALES_ORDER_FACT_33_COUNT";
"SALES_ORDER_FACT_35_TERRITO" "T_SALES_ORDER_FACT_35_TERRI";
"SALES_ORDER_FACT_36_REGION$1" "T_SALES_ORDER_FACT_36_REGION$1";
"SALES_ORDER_FACT_37_SALES_R" "T_SALES_ORDER_FACT_37_SALES";
"SALES_ORDER_FACT_38_REGION_R" "T_SALES_ORDER_FACT_38_REGION";
"SALES_ORDER_FACT_39_BOOK_DA" "T_SALES_ORDER_FACT_39_BOOK_";
"SALES_ORDER_FACT_40_REV_DATE$1" "T_SALES_ORDER_FACT_40_REV_DA";
"SALES_ORDER_FACT_41_QUANTITY$1" "T_SALES_ORDER_FACT_41_QUANTI";
"SALES_ORDER_FACT_42_BOOK_AMT$1" "T_SALES_ORDER_FACT_42_BOOK_A";
"SALES_ORDER_FACT_43_CURR_CO" "T_SALES_ORDER_FACT_43_CURR_";
"SALES_OR_45_SALESPER$1" "T_SALES_OR_45_SALESPER$1";
"SALES_OR_47_OPPORTUN$1" "T_SALES_OR_47_OPPORTUN$1";
"SALES_ORDER_FACT_51_CUST_ID$1" "T_SALES_ORDER_FACT_51_CUST_";
"SALES_ORDER_FACT_52_PRODUCT_" "T_SALES_ORDER_FACT_52_PRODUC";
"SALES_ORDER_FACT_53_BILL_DA" "T_SALES_ORDER_FACT_53_BILL_";
"SALES_OR_54_RECORD_T$1" "T_SALES_OR_54_RECORD_T$1";
"SALES_OR_55_RECORD_T$1" "T_SALES_OR_55_RECORD_T$1";
"SALES_ORDER_FACT_56_SO_STAT" "T_SALES_ORDER_FACT_56_SO_ST";
"SALES_ORDER_FACT_57_PPCARD_" "T_SALES_ORDER_FACT_57_PPCAR";
"SALES_OR_59_PP_SALES$1" "T_SALES_OR_59_PP_SALES$1";
"SALES_OR_60_ORDERED_$1" "T_SALES_OR_60_ORDERED_$1";
"SALES_OR_61_ORDERED_$1" "T_SALES_OR_61_ORDERED_$1";
"SALES_OR_62_ORDERED_$1" "T_SALES_OR_62_ORDERED_$1";
"SALES_OR_63_ORDERED_$1" "T_SALES_OR_63_ORDERED_$1";
"SALES_OR_64_ORDERED_$1" "T_SALES_OR_64_ORDERED_$1";
"SALES_OR_65_CUST_ID_$1" "T_SALES_OR_65_CUST_ID_$1";
"SALES_OR_66_PAYMENT_$1" "T_SALES_OR_66_PAYMENT_$1";
"SALES_ORDER_FACT_67_PO_NUMB" "T_SALES_ORDER_FACT_67_PO_NU";
"SALES_ORDER_FACT_70_SOURCE$1" "T_SALES_ORDER_FACT_70_SOURCE$1";
"SALES_ORDER_FACT_71_CHANNEL$1" "T_SALES_ORDER_FACT_71_CHANN";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "FLTR_ES$1"(error_index IN NUMBER) IS
BEGIN

  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_2_EVXSOID',0,80),
    p_value=>SUBSTRB("FLTR_2_EVXSOID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('PRODUCT_DIM_2_PROD_NUM',0,80),
    p_value=>SUBSTRB("PRODUCT_DIM_2_PROD_NUM$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>3,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_60_SHIPTOADDRESS1',0,80),
    p_value=>SUBSTRB("FLTR_60_SHIPTOADDRESS1$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>4,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_61_SHIPTOADDRESS2',0,80),
    p_value=>SUBSTRB("FLTR_61_SHIPTOADDRESS2$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>5,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_62_SHIPTOADDRESS3',0,80),
    p_value=>SUBSTRB("FLTR_62_SHIPTOADDRESS3$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>6,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_64_SHIPTOCITY',0,80),
    p_value=>SUBSTRB("FLTR_64_SHIPTOCITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>7,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_15_SHIP_TO_STATE',0,80),
    p_value=>SUBSTRB("EXPR_15_SHIP_TO_STATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>8,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_16_SHIP_TO_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_16_SHIP_TO_PROVINCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>9,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_68_SHIPTOCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_68_SHIPTOCOUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>10,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_69_SHIPTOCOUNTY',0,80),
    p_value=>SUBSTRB("FLTR_69_SHIPTOCOUNTY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>11,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_70_SHIPTOPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_70_SHIPTOPOSTAL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>12,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_11_BILLTOADDRESS1',0,80),
    p_value=>SUBSTRB("FLTR_11_BILLTOADDRESS1$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>13,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_12_BILLTOADDRESS2',0,80),
    p_value=>SUBSTRB("FLTR_12_BILLTOADDRESS2$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>14,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_13_BILLTOADDRESS3',0,80),
    p_value=>SUBSTRB("FLTR_13_BILLTOADDRESS3$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>15,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_16_BILLTOCITY',0,80),
    p_value=>SUBSTRB("FLTR_16_BILLTOCITY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>16,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_17_BILL_TO_STATE',0,80),
    p_value=>SUBSTRB("EXPR_17_BILL_TO_STATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>17,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_18_BILL_TO_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_18_BILL_TO_PROVINCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>18,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_19_BILLTOCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_19_BILLTOCOUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>19,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_20_BILLTOCOUNTY',0,80),
    p_value=>SUBSTRB("FLTR_20_BILLTOCOUNTY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>20,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_21_BILLTOPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_21_BILLTOPOSTAL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>21,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_22_CANCEL_DATE',0,80),
    p_value=>SUBSTRB("EXPR_22_CANCEL_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>22,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_57_SHIPPEDDATE',0,80),
    p_value=>SUBSTRB("FLTR_57_SHIPPEDDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>23,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_4_CREATEDATE',0,80),
    p_value=>SUBSTRB("FLTR_4_CREATEDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>24,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_6_MODIFYDATE',0,80),
    p_value=>SUBSTRB("FLTR_6_MODIFYDATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>25,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_21_COUNTRY',0,80),
    p_value=>SUBSTRB("EXPR_21_COUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>26,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_3_TERRITORY',0,80),
    p_value=>SUBSTRB("MARKET_DIM_3_TERRITORY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>27,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_4_REGION',0,80),
    p_value=>SUBSTRB("MARKET_DIM_4_REGION$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>28,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_5_SALES_REP',0,80),
    p_value=>SUBSTRB("MARKET_DIM_5_SALES_REP$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>29,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('MARKET_DIM_6_REGION_MGR',0,80),
    p_value=>SUBSTRB("MARKET_DIM_6_REGION_MGR$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>30,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_26_BOOK_DATE',0,80),
    p_value=>SUBSTRB("EXPR_26_BOOK_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>31,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_23_REV_DATE',0,80),
    p_value=>SUBSTRB("EXPR_23_REV_DATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>32,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODET_11_ACTUALQU',0,80),
    p_value=>SUBSTRB("EVXSODET_11_ACTUALQU$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>33,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_90_TOTALNOTAX',0,80),
    p_value=>SUBSTRB("FLTR_90_TOTALNOTAX$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>34,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_23_CURRENCYTYPE',0,80),
    p_value=>SUBSTRB("FLTR_23_CURRENCYTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>35,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODETAIL_57_SOLDBYUSER',0,80),
    p_value=>SUBSTRB("EVXSODETAIL_57_SOLDBYUSER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>36,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_34_OPPORTUNITYID',0,80),
    p_value=>SUBSTRB("FLTR_34_OPPORTUNITYID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>37,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_19_CUST_ID',0,80),
    p_value=>SUBSTRB("EXPR_19_CUST_ID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>38,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXSODETAIL_32_PRODUCTID',0,80),
    p_value=>SUBSTRB("EVXSODETAIL_32_PRODUCTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>39,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('ORACLETX_HISTORY_4_CREATEDATE',0,80),
    p_value=>SUBSTRB("ORACLETX_HISTORY_4_CREATEDA"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>40,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_52_RECORDTYPE',0,80),
    p_value=>SUBSTRB("FLTR_52_RECORDTYPE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>41,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_53_RECORDTYPECODE',0,80),
    p_value=>SUBSTRB("FLTR_53_RECORDTYPECODE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>42,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_80_SOSTATUS',0,80),
    p_value=>SUBSTRB("FLTR_80_SOSTATUS$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>43,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXPPCARD_1_EVXPPCARDID',0,80),
    p_value=>SUBSTRB("EVXPPCARD_1_EVXPPCARDID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>44,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_24_ORDERED_BY_STATE',0,80),
    p_value=>SUBSTRB("EXPR_24_ORDERED_BY_STATE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>45,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_25_ORDERED_BY_PROVINCE',0,80),
    p_value=>SUBSTRB("EXPR_25_ORDERED_BY_PROVINCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>46,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_47_ORDEREDBYPOSTAL',0,80),
    p_value=>SUBSTRB("FLTR_47_ORDEREDBYPOSTAL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>47,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_46_ORDEREDBYCOUNTRY',0,80),
    p_value=>SUBSTRB("FLTR_46_ORDEREDBYCOUNTRY$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>48,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_45_ORDEREDBYCONTACTID',0,80),
    p_value=>SUBSTRB("FLTR_45_ORDEREDBYCONTACTID$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>49,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EXPR_1_2_ZIP_CODE',0,80),
    p_value=>SUBSTRB("EXPR_1_2_ZIP_CODE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>50,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('EVXBILLPAYMENT_31_METHOD',0,80),
    p_value=>SUBSTRB("EVXBILLPAYMENT_31_METHOD$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>51,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_51_PURCHASEORDER',0,80),
    p_value=>SUBSTRB("FLTR_51_PURCHASEORDER$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>52,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_95_SOURCE',0,80),
    p_value=>SUBSTRB("FLTR_95_SOURCE$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>53,
    p_instance=>1,
    p_table=>SUBSTR('"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',0,80),
    p_column=>SUBSTR('FLTR_96_CHANNEL',0,80),
    p_value=>SUBSTRB("FLTR_96_CHANNEL$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "FLTR_ES$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "FLTR_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 250: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "FLTR_ES$1"(p_error_index);
  END IF;
END "FLTR_ER$1";



---------------------------------------------------------------------------
-- Procedure "FLTR_SU$1" opens and initializes data source
-- for map "FLTR_t"
---------------------------------------------------------------------------
PROCEDURE "FLTR_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "FLTR_c$1"%ISOPEN) THEN
    OPEN "FLTR_c$1";
  END IF;
  get_read_success := TRUE;
END "FLTR_SU$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_RD$1" fetches a bulk of rows from
--   the data source for map "FLTR_t"
---------------------------------------------------------------------------
PROCEDURE "FLTR_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "FLTR_2_EVXSOID$1".DELETE;
    "PRODUCT_DIM_2_PROD_NUM$1".DELETE;
    "FLTR_60_SHIPTOADDRESS1$1".DELETE;
    "FLTR_61_SHIPTOADDRESS2$1".DELETE;
    "FLTR_62_SHIPTOADDRESS3$1".DELETE;
    "FLTR_64_SHIPTOCITY$1".DELETE;
    "EXPR_15_SHIP_TO_STATE$1".DELETE;
    "EXPR_16_SHIP_TO_PROVINCE$1".DELETE;
    "FLTR_68_SHIPTOCOUNTRY$1".DELETE;
    "FLTR_69_SHIPTOCOUNTY$1".DELETE;
    "FLTR_70_SHIPTOPOSTAL$1".DELETE;
    "FLTR_11_BILLTOADDRESS1$1".DELETE;
    "FLTR_12_BILLTOADDRESS2$1".DELETE;
    "FLTR_13_BILLTOADDRESS3$1".DELETE;
    "FLTR_16_BILLTOCITY$1".DELETE;
    "EXPR_17_BILL_TO_STATE$1".DELETE;
    "EXPR_18_BILL_TO_PROVINCE$1".DELETE;
    "FLTR_19_BILLTOCOUNTRY$1".DELETE;
    "FLTR_20_BILLTOCOUNTY$1".DELETE;
    "FLTR_21_BILLTOPOSTAL$1".DELETE;
    "EXPR_22_CANCEL_DATE$1".DELETE;
    "FLTR_57_SHIPPEDDATE$1".DELETE;
    "FLTR_4_CREATEDATE$1".DELETE;
    "FLTR_6_MODIFYDATE$1".DELETE;
    "EXPR_21_COUNTRY$1".DELETE;
    "MARKET_DIM_3_TERRITORY$1".DELETE;
    "MARKET_DIM_4_REGION$1".DELETE;
    "MARKET_DIM_5_SALES_REP$1".DELETE;
    "MARKET_DIM_6_REGION_MGR$1".DELETE;
    "EXPR_26_BOOK_DATE$1".DELETE;
    "EXPR_23_REV_DATE$1".DELETE;
    "EVXSODET_11_ACTUALQU$1".DELETE;
    "FLTR_90_TOTALNOTAX$1".DELETE;
    "FLTR_23_CURRENCYTYPE$1".DELETE;
    "EVXSODETAIL_57_SOLDBYUSER$1".DELETE;
    "FLTR_34_OPPORTUNITYID$1".DELETE;
    "EXPR_19_CUST_ID$1".DELETE;
    "EVXSODETAIL_32_PRODUCTID$1".DELETE;
    "ORACLETX_HISTORY_4_CREATEDA".DELETE;
    "FLTR_52_RECORDTYPE$1".DELETE;
    "FLTR_53_RECORDTYPECODE$1".DELETE;
    "FLTR_80_SOSTATUS$1".DELETE;
    "EVXPPCARD_1_EVXPPCARDID$1".DELETE;
    "EXPR_24_ORDERED_BY_STATE$1".DELETE;
    "EXPR_25_ORDERED_BY_PROVINCE$1".DELETE;
    "FLTR_47_ORDEREDBYPOSTAL$1".DELETE;
    "FLTR_46_ORDEREDBYCOUNTRY$1".DELETE;
    "FLTR_45_ORDEREDBYCONTACTID$1".DELETE;
    "EXPR_1_2_ZIP_CODE$1".DELETE;
    "EVXBILLPAYMENT_31_METHOD$1".DELETE;
    "FLTR_51_PURCHASEORDER$1".DELETE;
    "FLTR_95_SOURCE$1".DELETE;
    "FLTR_96_CHANNEL$1".DELETE;

    FETCH
      "FLTR_c$1"
    BULK COLLECT INTO
      "FLTR_2_EVXSOID$1",
      "PRODUCT_DIM_2_PROD_NUM$1",
      "FLTR_60_SHIPTOADDRESS1$1",
      "FLTR_61_SHIPTOADDRESS2$1",
      "FLTR_62_SHIPTOADDRESS3$1",
      "FLTR_64_SHIPTOCITY$1",
      "EXPR_15_SHIP_TO_STATE$1",
      "EXPR_16_SHIP_TO_PROVINCE$1",
      "FLTR_68_SHIPTOCOUNTRY$1",
      "FLTR_69_SHIPTOCOUNTY$1",
      "FLTR_70_SHIPTOPOSTAL$1",
      "FLTR_11_BILLTOADDRESS1$1",
      "FLTR_12_BILLTOADDRESS2$1",
      "FLTR_13_BILLTOADDRESS3$1",
      "FLTR_16_BILLTOCITY$1",
      "EXPR_17_BILL_TO_STATE$1",
      "EXPR_18_BILL_TO_PROVINCE$1",
      "FLTR_19_BILLTOCOUNTRY$1",
      "FLTR_20_BILLTOCOUNTY$1",
      "FLTR_21_BILLTOPOSTAL$1",
      "EXPR_22_CANCEL_DATE$1",
      "FLTR_57_SHIPPEDDATE$1",
      "FLTR_4_CREATEDATE$1",
      "FLTR_6_MODIFYDATE$1",
      "EXPR_21_COUNTRY$1",
      "MARKET_DIM_3_TERRITORY$1",
      "MARKET_DIM_4_REGION$1",
      "MARKET_DIM_5_SALES_REP$1",
      "MARKET_DIM_6_REGION_MGR$1",
      "EXPR_26_BOOK_DATE$1",
      "EXPR_23_REV_DATE$1",
      "EVXSODET_11_ACTUALQU$1",
      "FLTR_90_TOTALNOTAX$1",
      "FLTR_23_CURRENCYTYPE$1",
      "EVXSODETAIL_57_SOLDBYUSER$1",
      "FLTR_34_OPPORTUNITYID$1",
      "EXPR_19_CUST_ID$1",
      "EVXSODETAIL_32_PRODUCTID$1",
      "ORACLETX_HISTORY_4_CREATEDA",
      "FLTR_52_RECORDTYPE$1",
      "FLTR_53_RECORDTYPECODE$1",
      "FLTR_80_SOSTATUS$1",
      "EVXPPCARD_1_EVXPPCARDID$1",
      "EXPR_24_ORDERED_BY_STATE$1",
      "EXPR_25_ORDERED_BY_PROVINCE$1",
      "FLTR_47_ORDEREDBYPOSTAL$1",
      "FLTR_46_ORDEREDBYCOUNTRY$1",
      "FLTR_45_ORDEREDBYCONTACTID$1",
      "EXPR_1_2_ZIP_CODE$1",
      "EVXBILLPAYMENT_31_METHOD$1",
      "FLTR_51_PURCHASEORDER$1",
      "FLTR_95_SOURCE$1",
      "FLTR_96_CHANNEL$1"
    LIMIT get_bulk_size;

    IF "FLTR_c$1"%NOTFOUND AND "FLTR_2_EVXSOID$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "FLTR_2_EVXSOID$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "FLTR_2_EVXSOID$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 251: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "FLTR_RD$1";

---------------------------------------------------------------------------
-- Procedure "FLTR_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "FLTR_DML$1"(si NUMBER, firstround BOOLEAN) IS
  "SALES_ORDER_FACT_ins0" NUMBER := "SALES_ORDER_FACT_ins";
  "SALES_ORDER_FACT_upd0" NUMBER := "SALES_ORDER_FACT_upd";
  BEGIN
  IF get_use_hc THEN
    IF firstround AND NOT get_row_status THEN
      RETURN;
    END IF;
    get_row_status := TRUE;
  END IF;
  IF NOT "SALES_ORDER_FACT_St" THEN
  -- Update/Insert DML for "SALES_ORDER_FACT"
    normal_action := 'UPDATE';
    error_action  := 'UPDATE';
    get_target_name := '"SALES_ORDER_FACT"';
    get_audit_detail_id := "SALES_ORDER_FACT_id";
    "SALES_ORDER_FACT_si" := 1;
    update_bulk.DELETE;
    update_bulk_index := 1;
    IF "SALES_ORDER_FACT_i" > get_bulk_size 
   OR "FLTR_c$1"%NOTFOUND OR get_abort THEN
      LOOP
        get_rowid.DELETE;
  
        BEGIN
          FORALL i IN "SALES_ORDER_FACT_si".."SALES_ORDER_FACT_i" - 1 
            UPDATE
              "SALES_ORDER_FACT"
            SET
  
  						"SALES_ORDER_FACT"."PROD_NUM" = "SALES_ORDER_FACT_1_PROD_NUM$1"
  (i),						"SALES_ORDER_FACT"."KEYCODE" = "SALES_ORDER_FACT_3_KEYCODE$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1" = "SALES_OR_4_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2" = "SALES_OR_5_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3" = "SALES_OR_6_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_CITY" = "SALES_OR_7_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_STATE" = "SALES_OR_8_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_PROVINCE" = "SALES_OR_9_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_COUNTRY" = "SALES_OR_10_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_COUNTY" = "SALES_OR_11_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE" = "SALES_OR_12_SHIP_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS1" = "SALES_OR_13_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS2" = "SALES_OR_14_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ADDRESS3" = "SALES_OR_15_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_CITY" = "SALES_OR_16_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_STATE" = "SALES_OR_17_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_PROVINCE" = "SALES_OR_18_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_COUNTRY" = "SALES_OR_19_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_COUNTY" = "SALES_OR_20_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."BILL_TO_ZIPCODE" = "SALES_OR_21_BILL_TO_$1"
  (i),						"SALES_ORDER_FACT"."CANCEL_DATE" = "SALES_OR_22_CANCEL_D$1"
  (i),						"SALES_ORDER_FACT"."SHIP_DATE" = "SALES_ORDER_FACT_23_SHIP_DA"
  (i),						"SALES_ORDER_FACT"."CREATION_DATE" = "SALES_OR_24_CREATION$1"
  (i),						"SALES_ORDER_FACT"."LAST_UPDATE_DATE" = "SALES_OR_25_LAST_UPD$1"
  (i),						"SALES_ORDER_FACT"."GKDW_SOURCE" = "SALES_OR_30_GKDW_SOU$1"
  (i),						"SALES_ORDER_FACT"."COUNTRY" = "SALES_ORDER_FACT_33_COUNTRY$1"
  (i),						"SALES_ORDER_FACT"."TERRITORY" = "SALES_ORDER_FACT_35_TERRITO"
  (i),						"SALES_ORDER_FACT"."REGION" = "SALES_ORDER_FACT_36_REGION$1"
  (i),						"SALES_ORDER_FACT"."SALES_REP" = "SALES_ORDER_FACT_37_SALES_R"
  (i),						"SALES_ORDER_FACT"."REGION_REP" = "SALES_ORDER_FACT_38_REGION_R"
  (i),						"SALES_ORDER_FACT"."BOOK_DATE" = "SALES_ORDER_FACT_39_BOOK_DA"
  (i),						"SALES_ORDER_FACT"."REV_DATE" = "SALES_ORDER_FACT_40_REV_DATE$1"
  (i),						"SALES_ORDER_FACT"."QUANTITY" = "SALES_ORDER_FACT_41_QUANTITY$1"
  (i),						"SALES_ORDER_FACT"."BOOK_AMT" = "SALES_ORDER_FACT_42_BOOK_AMT$1"
  (i),						"SALES_ORDER_FACT"."CURR_CODE" = "SALES_ORDER_FACT_43_CURR_CO"
  (i),						"SALES_ORDER_FACT"."SALESPERSON" = "SALES_OR_45_SALESPER$1"
  (i),						"SALES_ORDER_FACT"."OPPORTUNITY_ID" = "SALES_OR_47_OPPORTUN$1"
  (i),						"SALES_ORDER_FACT"."CUST_ID" = "SALES_ORDER_FACT_51_CUST_ID$1"
  (i),						"SALES_ORDER_FACT"."PRODUCT_ID" = "SALES_ORDER_FACT_52_PRODUCT_"
  (i),						"SALES_ORDER_FACT"."BILL_DATE" = "SALES_ORDER_FACT_53_BILL_DA"
  (i),						"SALES_ORDER_FACT"."RECORD_TYPE" = "SALES_OR_54_RECORD_T$1"
  (i),						"SALES_ORDER_FACT"."RECORD_TYPE_CODE" = "SALES_OR_55_RECORD_T$1"
  (i),						"SALES_ORDER_FACT"."SO_STATUS" = "SALES_ORDER_FACT_56_SO_STAT"
  (i),						"SALES_ORDER_FACT"."PPCARD_ID" = "SALES_ORDER_FACT_57_PPCARD_"
  (i),						"SALES_ORDER_FACT"."PP_SALES_ORDER_ID" = "SALES_OR_59_PP_SALES$1"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_STATE" = "SALES_OR_60_ORDERED_$1"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE" = "SALES_OR_61_ORDERED_$1"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE" = "SALES_OR_62_ORDERED_$1"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY" = "SALES_OR_63_ORDERED_$1"
  (i),						"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID" = "SALES_OR_64_ORDERED_$1"
  (i),						"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE" = "SALES_OR_65_CUST_ID_$1"
  (i),						"SALES_ORDER_FACT"."PAYMENT_METHOD" = "SALES_OR_66_PAYMENT_$1"
  (i),						"SALES_ORDER_FACT"."PO_NUMBER" = "SALES_ORDER_FACT_67_PO_NUMB"
  (i),						"SALES_ORDER_FACT"."SOURCE" = "SALES_ORDER_FACT_70_SOURCE$1"
  (i),						"SALES_ORDER_FACT"."CHANNEL" = "SALES_ORDER_FACT_71_CHANNEL$1"
  (i)
    
            WHERE
  
  						"SALES_ORDER_FACT"."SALES_ORDER_ID" = "SALES_OR_0_SALES_OR$1"
  (i)
    
  RETURNING ROWID BULK COLLECT INTO get_rowid;
  
          feedback_bulk_limit := "SALES_ORDER_FACT_i" - 1;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "SALES_ORDER_FACT_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
          "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd" + get_rowid.COUNT;
          "SALES_ORDER_FACT_si" := "SALES_ORDER_FACT_i";
  
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            IF SQL%NOTFOUND THEN
              last_successful_index := 0;
            ELSE
              FOR rowkey_index IN REVERSE "SALES_ORDER_FACT_si".."SALES_ORDER_FACT_i"- 1 LOOP
                IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                  last_successful_index := rowkey_index;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
            feedback_bulk_limit := last_successful_index;
            get_rowkey_bulk.DELETE;
            rowkey_bulk_index := 1;
            FOR rowkey_index IN "SALES_ORDER_FACT_si"..feedback_bulk_limit LOOP
              IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
                update_bulk(update_bulk_index) := rowkey_index;
                update_bulk_index := update_bulk_index + 1;
              ELSE
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
                  rowkey_bulk_index := rowkey_bulk_index + 1;
                END IF;
              END IF;
            END LOOP;
            
            
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
            "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd" + get_rowid.COUNT;
            IF last_successful_index = 0 THEN
              last_successful_index := "SALES_ORDER_FACT_si";
            ELSE
              last_successful_index := last_successful_index +1;
            END IF;
            LOOP
              BEGIN
                UPDATE
                  "SALES_ORDER_FACT"
                SET
  
  								"SALES_ORDER_FACT"."PROD_NUM" = "SALES_ORDER_FACT_1_PROD_NUM$1"
  (last_successful_index),								"SALES_ORDER_FACT"."KEYCODE" = "SALES_ORDER_FACT_3_KEYCODE$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1" = "SALES_OR_4_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2" = "SALES_OR_5_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3" = "SALES_OR_6_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_CITY" = "SALES_OR_7_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_STATE" = "SALES_OR_8_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_PROVINCE" = "SALES_OR_9_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_COUNTRY" = "SALES_OR_10_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_COUNTY" = "SALES_OR_11_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE" = "SALES_OR_12_SHIP_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS1" = "SALES_OR_13_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS2" = "SALES_OR_14_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ADDRESS3" = "SALES_OR_15_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_CITY" = "SALES_OR_16_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_STATE" = "SALES_OR_17_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_PROVINCE" = "SALES_OR_18_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_COUNTRY" = "SALES_OR_19_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_COUNTY" = "SALES_OR_20_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_TO_ZIPCODE" = "SALES_OR_21_BILL_TO_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."CANCEL_DATE" = "SALES_OR_22_CANCEL_D$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SHIP_DATE" = "SALES_ORDER_FACT_23_SHIP_DA"
  (last_successful_index),								"SALES_ORDER_FACT"."CREATION_DATE" = "SALES_OR_24_CREATION$1"
  (last_successful_index),								"SALES_ORDER_FACT"."LAST_UPDATE_DATE" = "SALES_OR_25_LAST_UPD$1"
  (last_successful_index),								"SALES_ORDER_FACT"."GKDW_SOURCE" = "SALES_OR_30_GKDW_SOU$1"
  (last_successful_index),								"SALES_ORDER_FACT"."COUNTRY" = "SALES_ORDER_FACT_33_COUNTRY$1"
  (last_successful_index),								"SALES_ORDER_FACT"."TERRITORY" = "SALES_ORDER_FACT_35_TERRITO"
  (last_successful_index),								"SALES_ORDER_FACT"."REGION" = "SALES_ORDER_FACT_36_REGION$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SALES_REP" = "SALES_ORDER_FACT_37_SALES_R"
  (last_successful_index),								"SALES_ORDER_FACT"."REGION_REP" = "SALES_ORDER_FACT_38_REGION_R"
  (last_successful_index),								"SALES_ORDER_FACT"."BOOK_DATE" = "SALES_ORDER_FACT_39_BOOK_DA"
  (last_successful_index),								"SALES_ORDER_FACT"."REV_DATE" = "SALES_ORDER_FACT_40_REV_DATE$1"
  (last_successful_index),								"SALES_ORDER_FACT"."QUANTITY" = "SALES_ORDER_FACT_41_QUANTITY$1"
  (last_successful_index),								"SALES_ORDER_FACT"."BOOK_AMT" = "SALES_ORDER_FACT_42_BOOK_AMT$1"
  (last_successful_index),								"SALES_ORDER_FACT"."CURR_CODE" = "SALES_ORDER_FACT_43_CURR_CO"
  (last_successful_index),								"SALES_ORDER_FACT"."SALESPERSON" = "SALES_OR_45_SALESPER$1"
  (last_successful_index),								"SALES_ORDER_FACT"."OPPORTUNITY_ID" = "SALES_OR_47_OPPORTUN$1"
  (last_successful_index),								"SALES_ORDER_FACT"."CUST_ID" = "SALES_ORDER_FACT_51_CUST_ID$1"
  (last_successful_index),								"SALES_ORDER_FACT"."PRODUCT_ID" = "SALES_ORDER_FACT_52_PRODUCT_"
  (last_successful_index),								"SALES_ORDER_FACT"."BILL_DATE" = "SALES_ORDER_FACT_53_BILL_DA"
  (last_successful_index),								"SALES_ORDER_FACT"."RECORD_TYPE" = "SALES_OR_54_RECORD_T$1"
  (last_successful_index),								"SALES_ORDER_FACT"."RECORD_TYPE_CODE" = "SALES_OR_55_RECORD_T$1"
  (last_successful_index),								"SALES_ORDER_FACT"."SO_STATUS" = "SALES_ORDER_FACT_56_SO_STAT"
  (last_successful_index),								"SALES_ORDER_FACT"."PPCARD_ID" = "SALES_ORDER_FACT_57_PPCARD_"
  (last_successful_index),								"SALES_ORDER_FACT"."PP_SALES_ORDER_ID" = "SALES_OR_59_PP_SALES$1"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_STATE" = "SALES_OR_60_ORDERED_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE" = "SALES_OR_61_ORDERED_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE" = "SALES_OR_62_ORDERED_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY" = "SALES_OR_63_ORDERED_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID" = "SALES_OR_64_ORDERED_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE" = "SALES_OR_65_CUST_ID_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."PAYMENT_METHOD" = "SALES_OR_66_PAYMENT_$1"
  (last_successful_index),								"SALES_ORDER_FACT"."PO_NUMBER" = "SALES_ORDER_FACT_67_PO_NUMB"
  (last_successful_index),								"SALES_ORDER_FACT"."SOURCE" = "SALES_ORDER_FACT_70_SOURCE$1"
  (last_successful_index),								"SALES_ORDER_FACT"."CHANNEL" = "SALES_ORDER_FACT_71_CHANNEL$1"
  (last_successful_index)
  
                WHERE
  
  								"SALES_ORDER_FACT"."SALES_ORDER_ID" = "SALES_OR_0_SALES_OR$1"
  (last_successful_index)
  
  ;
              update_bulk(update_bulk_index) := last_successful_index;
              update_bulk_index := update_bulk_index + 1;
              last_successful_index := last_successful_index + 1;
            EXCEPTION
              WHEN OTHERS THEN
                  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  error_rowkey := "SALES_ORDER_FACT_srk"(last_successful_index);
                  WB_RT_MAPAUDIT.error(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rtd=>get_audit_detail_id,
                    p_rowkey=>error_rowkey,
                    p_table=>get_target_name,
                    p_column=>'*',
                    p_dstval=>NULL,
                    p_stm=>'TRACE : ' || error_action,
                    p_sqlerr=>SQLCODE,
                    p_sqlerrm=>SQLERRM,
                    p_rowid=>NULL
                  );
                  get_column_seq := 0;
                  

                  
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PROD_NUM"',0,80),SUBSTRB("SALES_ORDER_FACT_1_PROD_NUM$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("SALES_ORDER_FACT_3_KEYCODE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_4_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_5_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_6_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_CITY"',0,80),SUBSTRB("SALES_OR_7_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_STATE"',0,80),SUBSTRB("SALES_OR_8_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_9_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_10_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_11_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_12_SHIP_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_13_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_14_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_15_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_CITY"',0,80),SUBSTRB("SALES_OR_16_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_STATE"',0,80),SUBSTRB("SALES_OR_17_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_18_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_19_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_20_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_21_BILL_TO_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CANCEL_DATE"',0,80),SUBSTRB("SALES_OR_22_CANCEL_D$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_23_SHIP_DA"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("SALES_OR_24_CREATION$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("SALES_OR_25_LAST_UPD$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("SALES_OR_30_GKDW_SOU$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("SALES_ORDER_FACT_33_COUNTRY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("SALES_ORDER_FACT_35_TERRITO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION"',0,80),SUBSTRB("SALES_ORDER_FACT_36_REGION$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_37_SALES_R"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_38_REGION_R"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_39_BOOK_DA"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_40_REV_DATE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("SALES_ORDER_FACT_41_QUANTITY$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("SALES_ORDER_FACT_42_BOOK_AMT$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("SALES_ORDER_FACT_43_CURR_CO"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("SALES_OR_45_SALESPER$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("SALES_OR_47_OPPORTUN$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_51_CUST_ID$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PRODUCT_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_52_PRODUCT_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_53_BILL_DA"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE"',0,80),SUBSTRB("SALES_OR_54_RECORD_T$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE_CODE"',0,80),SUBSTRB("SALES_OR_55_RECORD_T$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SO_STATUS"',0,80),SUBSTRB("SALES_ORDER_FACT_56_SO_STAT"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_57_PPCARD_"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_59_PP_SALES$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_STATE"',0,80),SUBSTRB("SALES_OR_60_ORDERED_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE"',0,80),SUBSTRB("SALES_OR_61_ORDERED_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE"',0,80),SUBSTRB("SALES_OR_62_ORDERED_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY"',0,80),SUBSTRB("SALES_OR_63_ORDERED_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID"',0,80),SUBSTRB("SALES_OR_64_ORDERED_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE"',0,80),SUBSTRB("SALES_OR_65_CUST_ID_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("SALES_OR_66_PAYMENT_$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("SALES_ORDER_FACT_67_PO_NUMB"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SOURCE"',0,80),SUBSTRB("SALES_ORDER_FACT_70_SOURCE$1"(last_successful_index),0,2000));
                  Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CHANNEL"',0,80),SUBSTRB("SALES_ORDER_FACT_71_CHANNEL$1"(last_successful_index),0,2000));
                  
                END IF;
                IF get_audit_level = AUDIT_COMPLETE THEN
                  WB_RT_MAPAUDIT.register_feedback(
                    p_rta=>get_runtime_audit_id,
                    p_step=>get_step_number,
                    p_rowkey=>error_rowkey,
                    p_status=>'ERROR',
                    p_table=>get_target_name,
                    p_role=>'T',
                    p_action=>error_action
                  );
                END IF;
                "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
                
                IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
                  get_abort:= TRUE;
                END IF;
                "SALES_ORDER_FACT_si" := last_successful_index + 1;
                EXIT;
            END;
          END LOOP;
      END;
      IF "SALES_ORDER_FACT_si" >= "SALES_ORDER_FACT_i" OR get_abort THEN
        EXIT;
      END IF;
    END LOOP;
  
    "SALES_ORDER_FACT_i" := 1;
  
    --process leftover inserts
    insert_bulk_index := 0;
    FOR j IN 1..update_bulk.COUNT LOOP
      insert_bulk_index := insert_bulk_index + 1;
  		"SALES_OR_0_SALES_OR$1"(insert_bulk_index) := "SALES_OR_0_SALES_OR$1"(update_bulk(j));
  		"SALES_ORDER_FACT_1_PROD_NUM$1"(insert_bulk_index) := "SALES_ORDER_FACT_1_PROD_NUM$1"(update_bulk(j));
  		"SALES_ORDER_FACT_3_KEYCODE$1"(insert_bulk_index) := "SALES_ORDER_FACT_3_KEYCODE$1"(update_bulk(j));
  		"SALES_OR_4_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_4_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_5_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_5_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_6_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_6_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_7_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_7_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_8_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_8_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_9_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_9_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_10_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_10_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_11_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_11_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_12_SHIP_TO_$1"(insert_bulk_index) := "SALES_OR_12_SHIP_TO_$1"(update_bulk(j));
  		"SALES_OR_13_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_13_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_14_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_14_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_15_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_15_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_16_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_16_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_17_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_17_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_18_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_18_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_19_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_19_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_20_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_20_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_21_BILL_TO_$1"(insert_bulk_index) := "SALES_OR_21_BILL_TO_$1"(update_bulk(j));
  		"SALES_OR_22_CANCEL_D$1"(insert_bulk_index) := "SALES_OR_22_CANCEL_D$1"(update_bulk(j));
  		"SALES_ORDER_FACT_23_SHIP_DA"(insert_bulk_index) := "SALES_ORDER_FACT_23_SHIP_DA"(update_bulk(j));
  		"SALES_OR_24_CREATION$1"(insert_bulk_index) := "SALES_OR_24_CREATION$1"(update_bulk(j));
  		"SALES_OR_25_LAST_UPD$1"(insert_bulk_index) := "SALES_OR_25_LAST_UPD$1"(update_bulk(j));
  		"SALES_OR_30_GKDW_SOU$1"(insert_bulk_index) := "SALES_OR_30_GKDW_SOU$1"(update_bulk(j));
  		"SALES_ORDER_FACT_33_COUNTRY$1"(insert_bulk_index) := "SALES_ORDER_FACT_33_COUNTRY$1"(update_bulk(j));
  		"SALES_ORDER_FACT_35_TERRITO"(insert_bulk_index) := "SALES_ORDER_FACT_35_TERRITO"(update_bulk(j));
  		"SALES_ORDER_FACT_36_REGION$1"(insert_bulk_index) := "SALES_ORDER_FACT_36_REGION$1"(update_bulk(j));
  		"SALES_ORDER_FACT_37_SALES_R"(insert_bulk_index) := "SALES_ORDER_FACT_37_SALES_R"(update_bulk(j));
  		"SALES_ORDER_FACT_38_REGION_R"(insert_bulk_index) := "SALES_ORDER_FACT_38_REGION_R"(update_bulk(j));
  		"SALES_ORDER_FACT_39_BOOK_DA"(insert_bulk_index) := "SALES_ORDER_FACT_39_BOOK_DA"(update_bulk(j));
  		"SALES_ORDER_FACT_40_REV_DATE$1"(insert_bulk_index) := "SALES_ORDER_FACT_40_REV_DATE$1"(update_bulk(j));
  		"SALES_ORDER_FACT_41_QUANTITY$1"(insert_bulk_index) := "SALES_ORDER_FACT_41_QUANTITY$1"(update_bulk(j));
  		"SALES_ORDER_FACT_42_BOOK_AMT$1"(insert_bulk_index) := "SALES_ORDER_FACT_42_BOOK_AMT$1"(update_bulk(j));
  		"SALES_ORDER_FACT_43_CURR_CO"(insert_bulk_index) := "SALES_ORDER_FACT_43_CURR_CO"(update_bulk(j));
  		"SALES_OR_45_SALESPER$1"(insert_bulk_index) := "SALES_OR_45_SALESPER$1"(update_bulk(j));
  		"SALES_OR_47_OPPORTUN$1"(insert_bulk_index) := "SALES_OR_47_OPPORTUN$1"(update_bulk(j));
  		"SALES_ORDER_FACT_51_CUST_ID$1"(insert_bulk_index) := "SALES_ORDER_FACT_51_CUST_ID$1"(update_bulk(j));
  		"SALES_ORDER_FACT_52_PRODUCT_"(insert_bulk_index) := "SALES_ORDER_FACT_52_PRODUCT_"(update_bulk(j));
  		"SALES_ORDER_FACT_53_BILL_DA"(insert_bulk_index) := "SALES_ORDER_FACT_53_BILL_DA"(update_bulk(j));
  		"SALES_OR_54_RECORD_T$1"(insert_bulk_index) := "SALES_OR_54_RECORD_T$1"(update_bulk(j));
  		"SALES_OR_55_RECORD_T$1"(insert_bulk_index) := "SALES_OR_55_RECORD_T$1"(update_bulk(j));
  		"SALES_ORDER_FACT_56_SO_STAT"(insert_bulk_index) := "SALES_ORDER_FACT_56_SO_STAT"(update_bulk(j));
  		"SALES_ORDER_FACT_57_PPCARD_"(insert_bulk_index) := "SALES_ORDER_FACT_57_PPCARD_"(update_bulk(j));
  		"SALES_OR_59_PP_SALES$1"(insert_bulk_index) := "SALES_OR_59_PP_SALES$1"(update_bulk(j));
  		"SALES_OR_60_ORDERED_$1"(insert_bulk_index) := "SALES_OR_60_ORDERED_$1"(update_bulk(j));
  		"SALES_OR_61_ORDERED_$1"(insert_bulk_index) := "SALES_OR_61_ORDERED_$1"(update_bulk(j));
  		"SALES_OR_62_ORDERED_$1"(insert_bulk_index) := "SALES_OR_62_ORDERED_$1"(update_bulk(j));
  		"SALES_OR_63_ORDERED_$1"(insert_bulk_index) := "SALES_OR_63_ORDERED_$1"(update_bulk(j));
  		"SALES_OR_64_ORDERED_$1"(insert_bulk_index) := "SALES_OR_64_ORDERED_$1"(update_bulk(j));
  		"SALES_OR_65_CUST_ID_$1"(insert_bulk_index) := "SALES_OR_65_CUST_ID_$1"(update_bulk(j));
  		"SALES_OR_66_PAYMENT_$1"(insert_bulk_index) := "SALES_OR_66_PAYMENT_$1"(update_bulk(j));
  		"SALES_ORDER_FACT_67_PO_NUMB"(insert_bulk_index) := "SALES_ORDER_FACT_67_PO_NUMB"(update_bulk(j));
  		"SALES_ORDER_FACT_70_SOURCE$1"(insert_bulk_index) := "SALES_ORDER_FACT_70_SOURCE$1"(update_bulk(j));
  		"SALES_ORDER_FACT_71_CHANNEL$1"(insert_bulk_index) := "SALES_ORDER_FACT_71_CHANNEL$1"(update_bulk(j));
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        "SALES_ORDER_FACT_srk"(insert_bulk_index) := "SALES_ORDER_FACT_srk"(update_bulk(j));
      END IF;
    END LOOP;
  
    "SALES_ORDER_FACT_si" := 1;
    normal_action := 'INSERT';
    error_action  := 'INSERT';
    LOOP
      EXIT WHEN get_abort OR "SALES_ORDER_FACT_si" > insert_bulk_index;
      get_rowid.DELETE;
  
      BEGIN
        FORALL i IN "SALES_ORDER_FACT_si"..insert_bulk_index
          INSERT INTO
            "SALES_ORDER_FACT"
            ("SALES_ORDER_FACT"."SALES_ORDER_ID",
            "SALES_ORDER_FACT"."PROD_NUM",
            "SALES_ORDER_FACT"."KEYCODE",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS1",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS2",
            "SALES_ORDER_FACT"."SHIP_TO_ADDRESS3",
            "SALES_ORDER_FACT"."SHIP_TO_CITY",
            "SALES_ORDER_FACT"."SHIP_TO_STATE",
            "SALES_ORDER_FACT"."SHIP_TO_PROVINCE",
            "SALES_ORDER_FACT"."SHIP_TO_COUNTRY",
            "SALES_ORDER_FACT"."SHIP_TO_COUNTY",
            "SALES_ORDER_FACT"."SHIP_TO_ZIPCODE",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS1",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS2",
            "SALES_ORDER_FACT"."BILL_TO_ADDRESS3",
            "SALES_ORDER_FACT"."BILL_TO_CITY",
            "SALES_ORDER_FACT"."BILL_TO_STATE",
            "SALES_ORDER_FACT"."BILL_TO_PROVINCE",
            "SALES_ORDER_FACT"."BILL_TO_COUNTRY",
            "SALES_ORDER_FACT"."BILL_TO_COUNTY",
            "SALES_ORDER_FACT"."BILL_TO_ZIPCODE",
            "SALES_ORDER_FACT"."CANCEL_DATE",
            "SALES_ORDER_FACT"."SHIP_DATE",
            "SALES_ORDER_FACT"."CREATION_DATE",
            "SALES_ORDER_FACT"."LAST_UPDATE_DATE",
            "SALES_ORDER_FACT"."GKDW_SOURCE",
            "SALES_ORDER_FACT"."COUNTRY",
            "SALES_ORDER_FACT"."TERRITORY",
            "SALES_ORDER_FACT"."REGION",
            "SALES_ORDER_FACT"."SALES_REP",
            "SALES_ORDER_FACT"."REGION_REP",
            "SALES_ORDER_FACT"."BOOK_DATE",
            "SALES_ORDER_FACT"."REV_DATE",
            "SALES_ORDER_FACT"."QUANTITY",
            "SALES_ORDER_FACT"."BOOK_AMT",
            "SALES_ORDER_FACT"."CURR_CODE",
            "SALES_ORDER_FACT"."SALESPERSON",
            "SALES_ORDER_FACT"."OPPORTUNITY_ID",
            "SALES_ORDER_FACT"."CUST_ID",
            "SALES_ORDER_FACT"."PRODUCT_ID",
            "SALES_ORDER_FACT"."BILL_DATE",
            "SALES_ORDER_FACT"."RECORD_TYPE",
            "SALES_ORDER_FACT"."RECORD_TYPE_CODE",
            "SALES_ORDER_FACT"."SO_STATUS",
            "SALES_ORDER_FACT"."PPCARD_ID",
            "SALES_ORDER_FACT"."PP_SALES_ORDER_ID",
            "SALES_ORDER_FACT"."ORDERED_BY_STATE",
            "SALES_ORDER_FACT"."ORDERED_BY_PROVINCE",
            "SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE",
            "SALES_ORDER_FACT"."ORDERED_BY_COUNTRY",
            "SALES_ORDER_FACT"."ORDERED_BY_CUST_ID",
            "SALES_ORDER_FACT"."CUST_ID_ZIP_CODE",
            "SALES_ORDER_FACT"."PAYMENT_METHOD",
            "SALES_ORDER_FACT"."PO_NUMBER",
            "SALES_ORDER_FACT"."SOURCE",
            "SALES_ORDER_FACT"."CHANNEL")
          VALUES
            ("SALES_OR_0_SALES_OR$1"(i),
            "SALES_ORDER_FACT_1_PROD_NUM$1"(i),
            "SALES_ORDER_FACT_3_KEYCODE$1"(i),
            "SALES_OR_4_SHIP_TO_$1"(i),
            "SALES_OR_5_SHIP_TO_$1"(i),
            "SALES_OR_6_SHIP_TO_$1"(i),
            "SALES_OR_7_SHIP_TO_$1"(i),
            "SALES_OR_8_SHIP_TO_$1"(i),
            "SALES_OR_9_SHIP_TO_$1"(i),
            "SALES_OR_10_SHIP_TO_$1"(i),
            "SALES_OR_11_SHIP_TO_$1"(i),
            "SALES_OR_12_SHIP_TO_$1"(i),
            "SALES_OR_13_BILL_TO_$1"(i),
            "SALES_OR_14_BILL_TO_$1"(i),
            "SALES_OR_15_BILL_TO_$1"(i),
            "SALES_OR_16_BILL_TO_$1"(i),
            "SALES_OR_17_BILL_TO_$1"(i),
            "SALES_OR_18_BILL_TO_$1"(i),
            "SALES_OR_19_BILL_TO_$1"(i),
            "SALES_OR_20_BILL_TO_$1"(i),
            "SALES_OR_21_BILL_TO_$1"(i),
            "SALES_OR_22_CANCEL_D$1"(i),
            "SALES_ORDER_FACT_23_SHIP_DA"(i),
            "SALES_OR_24_CREATION$1"(i),
            "SALES_OR_25_LAST_UPD$1"(i),
            "SALES_OR_30_GKDW_SOU$1"(i),
            "SALES_ORDER_FACT_33_COUNTRY$1"(i),
            "SALES_ORDER_FACT_35_TERRITO"(i),
            "SALES_ORDER_FACT_36_REGION$1"(i),
            "SALES_ORDER_FACT_37_SALES_R"(i),
            "SALES_ORDER_FACT_38_REGION_R"(i),
            "SALES_ORDER_FACT_39_BOOK_DA"(i),
            "SALES_ORDER_FACT_40_REV_DATE$1"(i),
            "SALES_ORDER_FACT_41_QUANTITY$1"(i),
            "SALES_ORDER_FACT_42_BOOK_AMT$1"(i),
            "SALES_ORDER_FACT_43_CURR_CO"(i),
            "SALES_OR_45_SALESPER$1"(i),
            "SALES_OR_47_OPPORTUN$1"(i),
            "SALES_ORDER_FACT_51_CUST_ID$1"(i),
            "SALES_ORDER_FACT_52_PRODUCT_"(i),
            "SALES_ORDER_FACT_53_BILL_DA"(i),
            "SALES_OR_54_RECORD_T$1"(i),
            "SALES_OR_55_RECORD_T$1"(i),
            "SALES_ORDER_FACT_56_SO_STAT"(i),
            "SALES_ORDER_FACT_57_PPCARD_"(i),
            "SALES_OR_59_PP_SALES$1"(i),
            "SALES_OR_60_ORDERED_$1"(i),
            "SALES_OR_61_ORDERED_$1"(i),
            "SALES_OR_62_ORDERED_$1"(i),
            "SALES_OR_63_ORDERED_$1"(i),
            "SALES_OR_64_ORDERED_$1"(i),
            "SALES_OR_65_CUST_ID_$1"(i),
            "SALES_OR_66_PAYMENT_$1"(i),
            "SALES_ORDER_FACT_67_PO_NUMB"(i),
            "SALES_ORDER_FACT_70_SOURCE$1"(i),
            "SALES_ORDER_FACT_71_CHANNEL$1"(i))
          RETURNING ROWID BULK COLLECT INTO get_rowid;
        error_index := "SALES_ORDER_FACT_si" + get_rowid.COUNT;
      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          error_index := "SALES_ORDER_FACT_si" + get_rowid.COUNT;
          IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
            error_rowkey := "SALES_ORDER_FACT_srk"(error_index);
            WB_RT_MAPAUDIT.error(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rtd=>get_audit_detail_id,
              p_rowkey=>error_rowkey,
              p_table=>get_target_name,
              p_column=>'*',
              p_dstval=>NULL,
              p_stm=>'TRACE 252: ' || error_action,
              p_sqlerr=>SQLCODE,
              p_sqlerrm=>SQLERRM,
              p_rowid=>NULL
            );
            get_column_seq := 0;
            

            
            
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_0_SALES_OR$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PROD_NUM"',0,80),SUBSTRB("SALES_ORDER_FACT_1_PROD_NUM$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."KEYCODE"',0,80),SUBSTRB("SALES_ORDER_FACT_3_KEYCODE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_4_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_5_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_6_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_CITY"',0,80),SUBSTRB("SALES_OR_7_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_STATE"',0,80),SUBSTRB("SALES_OR_8_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_9_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_10_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_11_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_12_SHIP_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS1"',0,80),SUBSTRB("SALES_OR_13_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS2"',0,80),SUBSTRB("SALES_OR_14_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ADDRESS3"',0,80),SUBSTRB("SALES_OR_15_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_CITY"',0,80),SUBSTRB("SALES_OR_16_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_STATE"',0,80),SUBSTRB("SALES_OR_17_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_PROVINCE"',0,80),SUBSTRB("SALES_OR_18_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTRY"',0,80),SUBSTRB("SALES_OR_19_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_COUNTY"',0,80),SUBSTRB("SALES_OR_20_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_TO_ZIPCODE"',0,80),SUBSTRB("SALES_OR_21_BILL_TO_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CANCEL_DATE"',0,80),SUBSTRB("SALES_OR_22_CANCEL_D$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SHIP_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_23_SHIP_DA"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CREATION_DATE"',0,80),SUBSTRB("SALES_OR_24_CREATION$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."LAST_UPDATE_DATE"',0,80),SUBSTRB("SALES_OR_25_LAST_UPD$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."GKDW_SOURCE"',0,80),SUBSTRB("SALES_OR_30_GKDW_SOU$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."COUNTRY"',0,80),SUBSTRB("SALES_ORDER_FACT_33_COUNTRY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."TERRITORY"',0,80),SUBSTRB("SALES_ORDER_FACT_35_TERRITO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION"',0,80),SUBSTRB("SALES_ORDER_FACT_36_REGION$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALES_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_37_SALES_R"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REGION_REP"',0,80),SUBSTRB("SALES_ORDER_FACT_38_REGION_R"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_39_BOOK_DA"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."REV_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_40_REV_DATE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."QUANTITY"',0,80),SUBSTRB("SALES_ORDER_FACT_41_QUANTITY$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BOOK_AMT"',0,80),SUBSTRB("SALES_ORDER_FACT_42_BOOK_AMT$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CURR_CODE"',0,80),SUBSTRB("SALES_ORDER_FACT_43_CURR_CO"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SALESPERSON"',0,80),SUBSTRB("SALES_OR_45_SALESPER$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."OPPORTUNITY_ID"',0,80),SUBSTRB("SALES_OR_47_OPPORTUN$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_51_CUST_ID$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PRODUCT_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_52_PRODUCT_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."BILL_DATE"',0,80),SUBSTRB("SALES_ORDER_FACT_53_BILL_DA"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE"',0,80),SUBSTRB("SALES_OR_54_RECORD_T$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."RECORD_TYPE_CODE"',0,80),SUBSTRB("SALES_OR_55_RECORD_T$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SO_STATUS"',0,80),SUBSTRB("SALES_ORDER_FACT_56_SO_STAT"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PPCARD_ID"',0,80),SUBSTRB("SALES_ORDER_FACT_57_PPCARD_"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PP_SALES_ORDER_ID"',0,80),SUBSTRB("SALES_OR_59_PP_SALES$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_STATE"',0,80),SUBSTRB("SALES_OR_60_ORDERED_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_PROVINCE"',0,80),SUBSTRB("SALES_OR_61_ORDERED_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_ZIPCODE"',0,80),SUBSTRB("SALES_OR_62_ORDERED_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_COUNTRY"',0,80),SUBSTRB("SALES_OR_63_ORDERED_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."ORDERED_BY_CUST_ID"',0,80),SUBSTRB("SALES_OR_64_ORDERED_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CUST_ID_ZIP_CODE"',0,80),SUBSTRB("SALES_OR_65_CUST_ID_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PAYMENT_METHOD"',0,80),SUBSTRB("SALES_OR_66_PAYMENT_$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."PO_NUMBER"',0,80),SUBSTRB("SALES_ORDER_FACT_67_PO_NUMB"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."SOURCE"',0,80),SUBSTRB("SALES_ORDER_FACT_70_SOURCE$1"(error_index),0,2000));
            Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"SALES_ORDER_FACT"."CHANNEL"',0,80),SUBSTRB("SALES_ORDER_FACT_71_CHANNEL$1"(error_index),0,2000));
            
          END IF;
          IF get_audit_level = AUDIT_COMPLETE THEN
            WB_RT_MAPAUDIT.register_feedback(
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_rowkey=>error_rowkey,
              p_status=>'ERROR',
              p_table=>get_target_name,
              p_role=>'T',
              p_action=>error_action
            );
          END IF;
          "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
          
          IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
            get_abort:= TRUE;
          END IF;
      END;
  
      -- feedback for a bulk of rows
      IF get_audit_level = AUDIT_COMPLETE THEN
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "SALES_ORDER_FACT_si"..error_index - 1 LOOP
          get_rowkey_bulk(rowkey_bulk_index) := "SALES_ORDER_FACT_srk"(rowkey_index);
          rowkey_bulk_index := rowkey_bulk_index + 1;
        END LOOP;
      END IF;
      
IF get_audit_level = AUDIT_COMPLETE THEN
  WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
  
      "SALES_ORDER_FACT_ins" := "SALES_ORDER_FACT_ins" + get_rowid.COUNT;
      "SALES_ORDER_FACT_si" := error_index + 1;
    END LOOP;
    END IF;
  END IF;
  

  IF get_use_hc AND NOT firstround THEN
    COMMIT; -- commit no.27
  END IF;
  IF get_use_hc AND NOT get_row_status THEN
    "SALES_ORDER_FACT_ins" := "SALES_ORDER_FACT_ins0"; 
    "SALES_ORDER_FACT_upd" := "SALES_ORDER_FACT_upd0";
  END IF;

END "FLTR_DML$1";

---------------------------------------------------------------------------
-- "FLTR_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "SALES_ORDER_FACT_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "FLTR_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "SALES_ORDER_FACT_St" THEN
          "SALES_ORDER_FACT_id" :=
            WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"SALES_ORDER_FACT"',
              p_target_uoid=>'A41FFB19B9835678E040007F01006C7D',
              p_stm=>'TRACE 254',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "SALES_ORDER_FACT_id";
              
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BFCF5678E040007F01006C7D', -- Operator EVXSO
              p_parent_object_name=>'EVXSO',
              p_parent_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSO',
              p_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9825678E040007F01006C7D', -- Operator EVXBILLPAYMENT
              p_parent_object_name=>'EVXBILLPAYMENT',
              p_parent_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_parent_object_type=>'Table',
              p_object_name=>'EVXBILLPAYMENT',
              p_object_uoid=>'A41FFB1911455678E040007F01006C7D', -- Table EVXBILLPAYMENT
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9815678E040007F01006C7D', -- Operator ORACLETX_HISTORY
              p_parent_object_name=>'ORACLETX_HISTORY',
              p_parent_object_uoid=>'A41FFB190ABE5678E040007F01006C7D', -- Table ORACLETX_HISTORY
              p_parent_object_type=>'Table',
              p_object_name=>'ORACLETX_HISTORY',
              p_object_uoid=>'A41FFB190ABE5678E040007F01006C7D', -- Table ORACLETX_HISTORY
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B63C5678E040007F01006C7D', -- Operator PRODUCT_DIM
              p_parent_object_name=>'PRODUCT_DIM',
              p_parent_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PRODUCT_DIM',
              p_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19C1165678E040007F01006C7D', -- Operator EVXPPCARD
              p_parent_object_name=>'EVXPPCARD',
              p_parent_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_parent_object_type=>'Table',
              p_object_name=>'EVXPPCARD',
              p_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9B15678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9B25678E040007F01006C7D', -- Operator EVXSODETAIL
              p_parent_object_name=>'EVXSODETAIL',
              p_parent_object_uoid=>'A41FFB1909B45678E040007F01006C7D', -- Table EVXSODETAIL
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSODETAIL',
              p_object_uoid=>'A41FFB1909B45678E040007F01006C7D', -- Table EVXSODETAIL
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9805678E040007F01006C7D', -- Operator PRODUCT_DIM
              p_parent_object_name=>'PRODUCT_DIM',
              p_parent_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'PRODUCT_DIM',
              p_object_uoid=>'A41FFB1915025678E040007F01006C7D', -- Table PRODUCT_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BDAC5678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA065678E040007F01006C7D', -- Operator EVXSO
              p_parent_object_name=>'EVXSO',
              p_parent_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_parent_object_type=>'Table',
              p_object_name=>'EVXSO',
              p_object_uoid=>'A41FFB190DFA5678E040007F01006C7D', -- Table EVXSO
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA045678E040007F01006C7D', -- Operator CUST_DIM
              p_parent_object_name=>'CUST_DIM',
              p_parent_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'CUST_DIM',
              p_object_uoid=>'A41FFB1912435678E040007F01006C7D', -- Table CUST_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- Location GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BF5A5678E040007F01006C7D', -- Operator MARKET_DIM
              p_parent_object_name=>'MARKET_DIM',
              p_parent_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_parent_object_type=>'Table',
              p_object_name=>'MARKET_DIM',
              p_object_uoid=>'A41FFB1913845678E040007F01006C7D', -- Table MARKET_DIM
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FD395678E040007F01006C7D' -- GKDW_SOURCE_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19B9835678E040007F01006C7D', -- Operator SALES_ORDER_FACT
              p_parent_object_name=>'SALES_ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'SALES_ORDER_FACT',
              p_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- Location GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BCF25678E040007F01006C7D', -- Operator SALES_ORDER_FACT
              p_parent_object_name=>'SALES_ORDER_FACT',
              p_parent_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_parent_object_type=>'Table',
              p_object_name=>'SALES_ORDER_FACT',
              p_object_uoid=>'A41FA16DB216655CE040007F01006B9E', -- Table SALES_ORDER_FACT
              p_object_type=>'Table',
              p_location_uoid=>'A41FA16DADDC655CE040007F01006B9E' -- GKDW_TARGET_LOCATION
            );  
get_audit_detail_type_id := WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'A41FFB19BA075678E040007F01006C7D', -- Operator EVXPPCARD
              p_parent_object_name=>'EVXPPCARD',
              p_parent_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_parent_object_type=>'Table',
              p_object_name=>'EVXPPCARD',
              p_object_uoid=>'A41FFB190A435678E040007F01006C7D', -- Table EVXPPCARD
              p_object_type=>'Table',
              p_location_uoid=>'A41FFB18FCD75678E040007F01006C7D' -- Location SLXDW_SOURCE_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "FLTR_si$1" := 0;
    "SALES_ORDER_FACT_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "FLTR_SU$1";

      LOOP
        IF "FLTR_si$1" = 0 THEN
          "FLTR_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "FLTR_2_EVXSOID$1".COUNT - 1;
          ELSE
            bulk_count := "FLTR_2_EVXSOID$1".COUNT;
          END IF;
 
          IF get_use_hc THEN
            dml_bsize := 0;
            "SALES_ORDER_FACT_ir".DELETE;
"SALES_ORDER_FACT_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "FLTR_i$1" := "FLTR_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "SALES_ORDER_FACT_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "FLTR_i$1" := "FLTR_i$1" + 1;
            "FLTR_si$1" := "FLTR_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "SALES_ORDER_FACT_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("FLTR_c$1"%NOTFOUND AND
               "FLTR_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "FLTR_i$1" > bulk_count THEN
            
              "FLTR_si$1" := 0;
              EXIT;
            END IF;


            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_LEADSOURCE_DESC_SO"((RTRIM("FLTR_2_EVXSOID$1"
            ("FLTR_i$1"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i$1"));
            
            ',0,2000);
            
                
                "GET_LEADSOURCE_DESC_SO"((RTRIM("FLTR_2_EVXSOID$1"
            ("FLTR_i$1"))),"GET_LEAD_1_LEADSOUR"
            ("FLTR_i$1"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            IF NOT get_use_hc OR get_row_status THEN
  -- Expression statement
              IF NOT get_buffer_done(get_buffer_done_index) THEN
                error_stmt := SUBSTRB('
            
                
                "GET_PP_SALES_ORDER_ID"((RTRIM("FLTR_2_EVXSOID$1"
            ("FLTR_i$1"))),"GET_PP_S_1_PP_SALES"
            ("FLTR_i$1"));
            
            ',0,2000);
            
                
                "GET_PP_SALES_ORDER_ID"((RTRIM("FLTR_2_EVXSOID$1"
            ("FLTR_i$1"))),"GET_PP_S_1_PP_SALES"
            ("FLTR_i$1"));
            
              END IF; -- get_buffer_done
              -- End expression statement
            END IF;
            
            
get_target_name := '"SALES_ORDER_FACT"';
            get_audit_detail_id := "SALES_ORDER_FACT_id";
            IF NOT "SALES_ORDER_FACT_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"SALES_OR_0_SALES_OR$1"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_2_EVXSOID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_0_SALES_OR$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_2_EVXSOID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_0_SALES_OR$1"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_2_EVXSOID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_0_SALES_OR$1" :=
            
            RTRIM("FLTR_2_EVXSOID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_1_PROD_NUM$1"("SALES_ORDER_FACT_i") := 
            
            "PRODUCT_DIM_2_PROD_NUM$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_1_PROD_NUM$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("PRODUCT_DIM_2_PROD_NUM$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_1_PROD_NUM$1"("SALES_ORDER_FACT_i") :=
            
            "PRODUCT_DIM_2_PROD_NUM$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_1_PROD_N" :=
            
            "PRODUCT_DIM_2_PROD_NUM$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_3_KEYCODE$1"("SALES_ORDER_FACT_i") := 
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_3_KEYCODE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_LEAD_1_LEADSOUR"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_3_KEYCODE$1"("SALES_ORDER_FACT_i") :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_3_KEYCO" :=
            
            "GET_LEAD_1_LEADSOUR"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_4_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_60_SHIPTOADDRESS1$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_4_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_60_SHIPTOADDRESS1$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_4_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_60_SHIPTOADDRESS1$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_4_SHIP_TO_$1" :=
            
            "FLTR_60_SHIPTOADDRESS1$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_5_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_61_SHIPTOADDRESS2$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_5_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_61_SHIPTOADDRESS2$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_5_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_61_SHIPTOADDRESS2$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_5_SHIP_TO_$1" :=
            
            "FLTR_61_SHIPTOADDRESS2$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_6_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_62_SHIPTOADDRESS3$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_6_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_62_SHIPTOADDRESS3$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_6_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_62_SHIPTOADDRESS3$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_6_SHIP_TO_$1" :=
            
            "FLTR_62_SHIPTOADDRESS3$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_7_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_64_SHIPTOCITY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_7_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_64_SHIPTOCITY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_7_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_64_SHIPTOCITY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_7_SHIP_TO_$1" :=
            
            "FLTR_64_SHIPTOCITY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_8_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_15_SHIP_TO_STATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_8_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_15_SHIP_TO_STATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_8_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_15_SHIP_TO_STATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_8_SHIP_TO_$1" :=
            
            "EXPR_15_SHIP_TO_STATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_9_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_16_SHIP_TO_PROVINCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_9_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_16_SHIP_TO_PROVINCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_9_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_16_SHIP_TO_PROVINCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_9_SHIP_TO_$1" :=
            
            "EXPR_16_SHIP_TO_PROVINCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_10_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_68_SHIPTOCOUNTRY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_10_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_68_SHIPTOCOUNTRY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_10_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_68_SHIPTOCOUNTRY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_10_SHIP_TO_$1" :=
            
            "FLTR_68_SHIPTOCOUNTRY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_11_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_69_SHIPTOCOUNTY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_11_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_69_SHIPTOCOUNTY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_11_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_69_SHIPTOCOUNTY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_11_SHIP_TO_$1" :=
            
            "FLTR_69_SHIPTOCOUNTY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_12_SHIP_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_70_SHIPTOPOSTAL$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_12_SHIP_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_70_SHIPTOPOSTAL$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_12_SHIP_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_70_SHIPTOPOSTAL$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_12_SHIP_TO_$1" :=
            
            "FLTR_70_SHIPTOPOSTAL$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_13_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_11_BILLTOADDRESS1$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_13_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_11_BILLTOADDRESS1$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_13_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_11_BILLTOADDRESS1$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_13_BILL_TO_$1" :=
            
            "FLTR_11_BILLTOADDRESS1$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_14_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_12_BILLTOADDRESS2$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_14_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_12_BILLTOADDRESS2$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_14_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_12_BILLTOADDRESS2$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_14_BILL_TO_$1" :=
            
            "FLTR_12_BILLTOADDRESS2$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_15_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_13_BILLTOADDRESS3$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_15_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_13_BILLTOADDRESS3$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_15_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_13_BILLTOADDRESS3$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_15_BILL_TO_$1" :=
            
            "FLTR_13_BILLTOADDRESS3$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_16_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_16_BILLTOCITY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_16_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_16_BILLTOCITY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_16_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_16_BILLTOCITY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_16_BILL_TO_$1" :=
            
            "FLTR_16_BILLTOCITY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_17_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_17_BILL_TO_STATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_17_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_17_BILL_TO_STATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_17_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_17_BILL_TO_STATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_17_BILL_TO_$1" :=
            
            "EXPR_17_BILL_TO_STATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_18_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_18_BILL_TO_PROVINCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_18_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_18_BILL_TO_PROVINCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_18_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_18_BILL_TO_PROVINCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_18_BILL_TO_$1" :=
            
            "EXPR_18_BILL_TO_PROVINCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_19_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_19_BILLTOCOUNTRY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_19_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_19_BILLTOCOUNTRY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_19_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_19_BILLTOCOUNTRY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_19_BILL_TO_$1" :=
            
            "FLTR_19_BILLTOCOUNTRY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_20_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_20_BILLTOCOUNTY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_20_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_20_BILLTOCOUNTY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_20_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_20_BILLTOCOUNTY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_20_BILL_TO_$1" :=
            
            "FLTR_20_BILLTOCOUNTY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_21_BILL_TO_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_21_BILLTOPOSTAL$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_21_BILL_TO_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_21_BILLTOPOSTAL$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_21_BILL_TO_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_21_BILLTOPOSTAL$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_21_BILL_TO_$1" :=
            
            "FLTR_21_BILLTOPOSTAL$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_22_CANCEL_D$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_22_CANCEL_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_22_CANCEL_D$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_22_CANCEL_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_22_CANCEL_D$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_22_CANCEL_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_22_CANCEL_D$1" :=
            
            "EXPR_22_CANCEL_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_23_SHIP_DA"("SALES_ORDER_FACT_i") := 
            
            "FLTR_57_SHIPPEDDATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_23_SHIP_DA"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_57_SHIPPEDDATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_23_SHIP_DA"("SALES_ORDER_FACT_i") :=
            
            "FLTR_57_SHIPPEDDATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_23_SHIP_" :=
            
            "FLTR_57_SHIPPEDDATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_24_CREATION$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_4_CREATEDATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_24_CREATION$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_4_CREATEDATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_24_CREATION$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_4_CREATEDATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_24_CREATION$1" :=
            
            "FLTR_4_CREATEDATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_25_LAST_UPD$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_6_MODIFYDATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_25_LAST_UPD$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_6_MODIFYDATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_25_LAST_UPD$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_6_MODIFYDATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_25_LAST_UPD$1" :=
            
            "FLTR_6_MODIFYDATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_30_GKDW_SOU$1"("SALES_ORDER_FACT_i") := 
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";',0,2000);
            error_column := SUBSTRB('"SALES_OR_30_GKDW_SOU$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE",0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_30_GKDW_SOU$1"("SALES_ORDER_FACT_i") :=
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_30_GKDW_SOU$1" :=
            
            "OWB_SALES_ORDER_FACT"."GET_CONST_1_SOURCE";
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_33_COUNTRY$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_21_COUNTRY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_33_COUNTRY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_21_COUNTRY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_33_COUNTRY$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_21_COUNTRY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_33_COUNT" :=
            
            "EXPR_21_COUNTRY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_35_TERRITO"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_35_TERRITO"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_3_TERRITORY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_35_TERRITO"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_35_TERRI" :=
            
            "MARKET_DIM_3_TERRITORY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_36_REGION$1"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_36_REGION$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_4_REGION$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_36_REGION$1"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_36_REGI" :=
            
            "MARKET_DIM_4_REGION$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_37_SALES_R"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_37_SALES_R"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_5_SALES_REP$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_37_SALES_R"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_37_SALES" :=
            
            "MARKET_DIM_5_SALES_REP$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_38_REGION_R"("SALES_ORDER_FACT_i") := 
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_38_REGION_R"',0,80);
            
            BEGIN
              error_value := SUBSTRB("MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_38_REGION_R"("SALES_ORDER_FACT_i") :=
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_38_REGI" :=
            
            "MARKET_DIM_6_REGION_MGR$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_39_BOOK_DA"("SALES_ORDER_FACT_i") := 
            
            "EXPR_26_BOOK_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_39_BOOK_DA"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_26_BOOK_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_39_BOOK_DA"("SALES_ORDER_FACT_i") :=
            
            "EXPR_26_BOOK_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_39_BOOK_" :=
            
            "EXPR_26_BOOK_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_40_REV_DATE$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_23_REV_DATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_40_REV_DATE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_23_REV_DATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_40_REV_DATE$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_23_REV_DATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_40_REV_" :=
            
            "EXPR_23_REV_DATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_41_QUANTITY$1"("SALES_ORDER_FACT_i") := 
            
            "EVXSODET_11_ACTUALQU$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_41_QUANTITY$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXSODET_11_ACTUALQU$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_41_QUANTITY$1"("SALES_ORDER_FACT_i") :=
            
            "EVXSODET_11_ACTUALQU$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_41_QUAN" :=
            
            "EVXSODET_11_ACTUALQU$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_42_BOOK_AMT$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_90_TOTALNOTAX$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_42_BOOK_AMT$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_90_TOTALNOTAX$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_42_BOOK_AMT$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_90_TOTALNOTAX$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_42_BOOK" :=
            
            "FLTR_90_TOTALNOTAX$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_43_CURR_CO"("SALES_ORDER_FACT_i") := 
            
            "FLTR_23_CURRENCYTYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_43_CURR_CO"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_23_CURRENCYTYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_43_CURR_CO"("SALES_ORDER_FACT_i") :=
            
            "FLTR_23_CURRENCYTYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_43_CURR_" :=
            
            "FLTR_23_CURRENCYTYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_45_SALESPER$1"("SALES_ORDER_FACT_i") := 
            
            "EVXSODETAIL_57_SOLDBYUSER$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_45_SALESPER$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXSODETAIL_57_SOLDBYUSER$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_45_SALESPER$1"("SALES_ORDER_FACT_i") :=
            
            "EVXSODETAIL_57_SOLDBYUSER$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_45_SALESPER$1" :=
            
            "EVXSODETAIL_57_SOLDBYUSER$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_47_OPPORTUN$1"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_34_OPPORTUNITYID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_47_OPPORTUN$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_34_OPPORTUNITYID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_47_OPPORTUN$1"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_34_OPPORTUNITYID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_47_OPPORTUN$1" :=
            
            RTRIM("FLTR_34_OPPORTUNITYID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_51_CUST_ID$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_19_CUST_ID$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_51_CUST_ID$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_19_CUST_ID$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_51_CUST_ID$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_19_CUST_ID$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_51_CUST_" :=
            
            "EXPR_19_CUST_ID$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_52_PRODUCT_"("SALES_ORDER_FACT_i") := 
            
            RTRIM("EVXSODETAIL_32_PRODUCTID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_52_PRODUCT_"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXSODETAIL_32_PRODUCTID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_52_PRODUCT_"("SALES_ORDER_FACT_i") :=
            
            RTRIM("EVXSODETAIL_32_PRODUCTID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_52_PROD" :=
            
            RTRIM("EVXSODETAIL_32_PRODUCTID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_53_BILL_DA"("SALES_ORDER_FACT_i") := 
            
            "ORACLETX_HISTORY_4_CREATEDA"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_53_BILL_DA"',0,80);
            
            BEGIN
              error_value := SUBSTRB("ORACLETX_HISTORY_4_CREATEDA"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_53_BILL_DA"("SALES_ORDER_FACT_i") :=
            
            "ORACLETX_HISTORY_4_CREATEDA"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_53_BILL_" :=
            
            "ORACLETX_HISTORY_4_CREATEDA"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_54_RECORD_T$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_52_RECORDTYPE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_54_RECORD_T$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_52_RECORDTYPE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_54_RECORD_T$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_52_RECORDTYPE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_54_RECORD_T$1" :=
            
            "FLTR_52_RECORDTYPE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_55_RECORD_T$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_53_RECORDTYPECODE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_55_RECORD_T$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_53_RECORDTYPECODE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_55_RECORD_T$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_53_RECORDTYPECODE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_55_RECORD_T$1" :=
            
            "FLTR_53_RECORDTYPECODE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_56_SO_STAT"("SALES_ORDER_FACT_i") := 
            
            "FLTR_80_SOSTATUS$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_56_SO_STAT"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_80_SOSTATUS$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_56_SO_STAT"("SALES_ORDER_FACT_i") :=
            
            "FLTR_80_SOSTATUS$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_56_SO_ST" :=
            
            "FLTR_80_SOSTATUS$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_57_PPCARD_"("SALES_ORDER_FACT_i") := 
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_57_PPCARD_"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("EVXPPCARD_1_EVXPPCARDID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_57_PPCARD_"("SALES_ORDER_FACT_i") :=
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_57_PPCAR" :=
            
            RTRIM("EVXPPCARD_1_EVXPPCARDID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_59_PP_SALES$1"("SALES_ORDER_FACT_i") := 
            
            "GET_PP_S_1_PP_SALES"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_59_PP_SALES$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("GET_PP_S_1_PP_SALES"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_59_PP_SALES$1"("SALES_ORDER_FACT_i") :=
            
            "GET_PP_S_1_PP_SALES"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_59_PP_SALES$1" :=
            
            "GET_PP_S_1_PP_SALES"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_60_ORDERED_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_24_ORDERED_BY_STATE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_60_ORDERED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_24_ORDERED_BY_STATE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_60_ORDERED_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_24_ORDERED_BY_STATE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_60_ORDERED_$1" :=
            
            "EXPR_24_ORDERED_BY_STATE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_61_ORDERED_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_25_ORDERED_BY_PROVINCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_61_ORDERED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_25_ORDERED_BY_PROVINCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_61_ORDERED_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_25_ORDERED_BY_PROVINCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_61_ORDERED_$1" :=
            
            "EXPR_25_ORDERED_BY_PROVINCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_62_ORDERED_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_47_ORDEREDBYPOSTAL$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_62_ORDERED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_47_ORDEREDBYPOSTAL$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_62_ORDERED_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_47_ORDEREDBYPOSTAL$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_62_ORDERED_$1" :=
            
            "FLTR_47_ORDEREDBYPOSTAL$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_63_ORDERED_$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_46_ORDEREDBYCOUNTRY$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_63_ORDERED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_46_ORDEREDBYCOUNTRY$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_63_ORDERED_$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_46_ORDEREDBYCOUNTRY$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_63_ORDERED_$1" :=
            
            "FLTR_46_ORDEREDBYCOUNTRY$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_64_ORDERED_$1"("SALES_ORDER_FACT_i") := 
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID$1"("FLTR_i$1"));',0,2000);
            error_column := SUBSTRB('"SALES_OR_64_ORDERED_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB(RTRIM("FLTR_45_ORDEREDBYCONTACTID$1"("FLTR_i$1")),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_64_ORDERED_$1"("SALES_ORDER_FACT_i") :=
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID$1"("FLTR_i$1"));
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_64_ORDERED_$1" :=
            
            RTRIM("FLTR_45_ORDEREDBYCONTACTID$1"("FLTR_i$1"));
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_65_CUST_ID_$1"("SALES_ORDER_FACT_i") := 
            
            "EXPR_1_2_ZIP_CODE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_65_CUST_ID_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EXPR_1_2_ZIP_CODE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_65_CUST_ID_$1"("SALES_ORDER_FACT_i") :=
            
            "EXPR_1_2_ZIP_CODE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_65_CUST_ID_$1" :=
            
            "EXPR_1_2_ZIP_CODE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_OR_66_PAYMENT_$1"("SALES_ORDER_FACT_i") := 
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_OR_66_PAYMENT_$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_OR_66_PAYMENT_$1"("SALES_ORDER_FACT_i") :=
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_OR_66_PAYMENT_$1" :=
            
            "EVXBILLPAYMENT_31_METHOD$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_67_PO_NUMB"("SALES_ORDER_FACT_i") := 
            
            "FLTR_51_PURCHASEORDER$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_67_PO_NUMB"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_51_PURCHASEORDER$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_67_PO_NUMB"("SALES_ORDER_FACT_i") :=
            
            "FLTR_51_PURCHASEORDER$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_67_PO_NU" :=
            
            "FLTR_51_PURCHASEORDER$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_70_SOURCE$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_95_SOURCE$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_70_SOURCE$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_95_SOURCE$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_70_SOURCE$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_95_SOURCE$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_70_SOUR" :=
            
            "FLTR_95_SOURCE$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"SALES_ORDER_FACT_71_CHANNEL$1"("SALES_ORDER_FACT_i") := 
            
            "FLTR_96_CHANNEL$1"("FLTR_i$1");',0,2000);
            error_column := SUBSTRB('"SALES_ORDER_FACT_71_CHANNEL$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("FLTR_96_CHANNEL$1"("FLTR_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "SALES_ORDER_FACT_71_CHANNEL$1"("SALES_ORDER_FACT_i") :=
            
            "FLTR_96_CHANNEL$1"("FLTR_i$1");
            
            ELSIF get_row_status THEN
              "SV_SALES_ORDER_FACT_71_CHANN" :=
            
            "FLTR_96_CHANNEL$1"("FLTR_i$1");
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "SALES_ORDER_FACT_srk"("SALES_ORDER_FACT_i") := get_rowkey + "FLTR_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_SALES_ORDER_FACT_srk" := get_rowkey + "FLTR_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "SALES_ORDER_FACT_new" := TRUE;
                ELSE
                  "SALES_ORDER_FACT_i" := "SALES_ORDER_FACT_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "FLTR_ER$1"('TRACE 255: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "FLTR_i$1");
                  
                  "SALES_ORDER_FACT_err" := "SALES_ORDER_FACT_err" + 1;
                  
                  IF get_errors + "SALES_ORDER_FACT_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("SALES_ORDER_FACT_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "SALES_ORDER_FACT_new" 
            AND (NOT "SALES_ORDER_FACT_nul") THEN
              "SALES_ORDER_FACT_ir"(dml_bsize) := "SALES_ORDER_FACT_i";
            	"SALES_OR_0_SALES_OR$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_0_SALES_OR$1";
            	"SALES_ORDER_FACT_1_PROD_NUM$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_1_PROD_N";
            	"SALES_ORDER_FACT_3_KEYCODE$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_3_KEYCO";
            	"SALES_OR_4_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_4_SHIP_TO_$1";
            	"SALES_OR_5_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_5_SHIP_TO_$1";
            	"SALES_OR_6_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_6_SHIP_TO_$1";
            	"SALES_OR_7_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_7_SHIP_TO_$1";
            	"SALES_OR_8_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_8_SHIP_TO_$1";
            	"SALES_OR_9_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_9_SHIP_TO_$1";
            	"SALES_OR_10_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_10_SHIP_TO_$1";
            	"SALES_OR_11_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_11_SHIP_TO_$1";
            	"SALES_OR_12_SHIP_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_12_SHIP_TO_$1";
            	"SALES_OR_13_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_13_BILL_TO_$1";
            	"SALES_OR_14_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_14_BILL_TO_$1";
            	"SALES_OR_15_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_15_BILL_TO_$1";
            	"SALES_OR_16_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_16_BILL_TO_$1";
            	"SALES_OR_17_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_17_BILL_TO_$1";
            	"SALES_OR_18_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_18_BILL_TO_$1";
            	"SALES_OR_19_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_19_BILL_TO_$1";
            	"SALES_OR_20_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_20_BILL_TO_$1";
            	"SALES_OR_21_BILL_TO_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_21_BILL_TO_$1";
            	"SALES_OR_22_CANCEL_D$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_22_CANCEL_D$1";
            	"SALES_ORDER_FACT_23_SHIP_DA"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_23_SHIP_";
            	"SALES_OR_24_CREATION$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_24_CREATION$1";
            	"SALES_OR_25_LAST_UPD$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_25_LAST_UPD$1";
            	"SALES_OR_30_GKDW_SOU$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_30_GKDW_SOU$1";
            	"SALES_ORDER_FACT_33_COUNTRY$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_33_COUNT";
            	"SALES_ORDER_FACT_35_TERRITO"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_35_TERRI";
            	"SALES_ORDER_FACT_36_REGION$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_36_REGI";
            	"SALES_ORDER_FACT_37_SALES_R"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_37_SALES";
            	"SALES_ORDER_FACT_38_REGION_R"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_38_REGI";
            	"SALES_ORDER_FACT_39_BOOK_DA"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_39_BOOK_";
            	"SALES_ORDER_FACT_40_REV_DATE$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_40_REV_";
            	"SALES_ORDER_FACT_41_QUANTITY$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_41_QUAN";
            	"SALES_ORDER_FACT_42_BOOK_AMT$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_42_BOOK";
            	"SALES_ORDER_FACT_43_CURR_CO"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_43_CURR_";
            	"SALES_OR_45_SALESPER$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_45_SALESPER$1";
            	"SALES_OR_47_OPPORTUN$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_47_OPPORTUN$1";
            	"SALES_ORDER_FACT_51_CUST_ID$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_51_CUST_";
            	"SALES_ORDER_FACT_52_PRODUCT_"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_52_PROD";
            	"SALES_ORDER_FACT_53_BILL_DA"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_53_BILL_";
            	"SALES_OR_54_RECORD_T$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_54_RECORD_T$1";
            	"SALES_OR_55_RECORD_T$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_55_RECORD_T$1";
            	"SALES_ORDER_FACT_56_SO_STAT"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_56_SO_ST";
            	"SALES_ORDER_FACT_57_PPCARD_"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_57_PPCAR";
            	"SALES_OR_59_PP_SALES$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_59_PP_SALES$1";
            	"SALES_OR_60_ORDERED_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_60_ORDERED_$1";
            	"SALES_OR_61_ORDERED_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_61_ORDERED_$1";
            	"SALES_OR_62_ORDERED_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_62_ORDERED_$1";
            	"SALES_OR_63_ORDERED_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_63_ORDERED_$1";
            	"SALES_OR_64_ORDERED_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_64_ORDERED_$1";
            	"SALES_OR_65_CUST_ID_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_65_CUST_ID_$1";
            	"SALES_OR_66_PAYMENT_$1"("SALES_ORDER_FACT_i") := "SV_SALES_OR_66_PAYMENT_$1";
            	"SALES_ORDER_FACT_67_PO_NUMB"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_67_PO_NU";
            	"SALES_ORDER_FACT_70_SOURCE$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_70_SOUR";
            	"SALES_ORDER_FACT_71_CHANNEL$1"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_71_CHANN";
              "SALES_ORDER_FACT_srk"("SALES_ORDER_FACT_i") := "SV_SALES_ORDER_FACT_srk";
              "SALES_ORDER_FACT_i" := "SALES_ORDER_FACT_i" + 1;
            ELSE
              "SALES_ORDER_FACT_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "FLTR_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "FLTR_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "FLTR_ER$1"('TRACE 253: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "FLTR_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        


        cursor_exhausted := "FLTR_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "FLTR_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "FLTR_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "FLTR_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
    IF NOT "SALES_ORDER_FACT_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"SALES_ORDER_FACT_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"SALES_ORDER_FACT_ins",
        p_upd=>"SALES_ORDER_FACT_upd",
        p_del=>"SALES_ORDER_FACT_del",
        p_err=>"SALES_ORDER_FACT_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "SALES_ORDER_FACT_ins";
    get_updated  := get_updated  + "SALES_ORDER_FACT_upd";
    get_deleted  := get_deleted  + "SALES_ORDER_FACT_del";
    get_errors   := get_errors   + "SALES_ORDER_FACT_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "FLTR_t";







PROCEDURE Initialize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  get_selected := 0;
  get_inserted := 0;
  get_updated  := 0;
  get_deleted  := 0;
  get_merged   := 0;
  get_errors   := 0;
  get_logical_errors := 0;
  get_abort    := FALSE;
  get_abort_procedure  := FALSE;

  FOR i IN 1..p_env.COUNT LOOP
    IF p_env(i).param_value IS NOT NULL THEN
      IF p_env(i).param_name = 'MAX_NO_OF_ERRORS' THEN
        get_max_errors := p_env(i).param_value;

      ELSIF p_env(i).param_name = 'COMMIT_FREQUENCY' THEN
        get_commit_frequency := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OPERATING_MODE' THEN
        get_operating_mode := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'BULK_SIZE' THEN
        get_bulk_size := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_LEVEL' THEN
        get_audit_level := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_ID' THEN
        get_audit_id := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'PURGE_GROUP' THEN
        get_purge_group := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OBJECT_ID' THEN
        OWB$MAP_OBJECT_ID := p_env(i).param_value;
      END IF;
    END IF;
  END LOOP;




  IF NOT (get_audit_level = AUDIT_NONE) THEN
    get_runtime_audit_id := WB_RT_MAPAUDIT.audit_begin(  -- Template AuditBegin
      p_auditid=>get_audit_id,
      p_lob_uoid=>get_lob_uoid,
      p_lob_name=>get_model_name,
      p_purge_group=>get_purge_group,
      p_parent=>NULL,
      p_source=>'"SLXDW"."EVXSO","SLXDW"."EVXSODETAIL","PRODUCT_DIM","CUST_DIM","MARKET_DIM","SLXDW"."ORACLETX_HISTORY","SLXDW"."EVXPPCARD","SLXDW"."EVXBILLPAYMENT"',
      p_source_uoid=>'A41FFB19BA065678E040007F01006C7D,A41FFB19B9B25678E040007F01006C7D,A41FFB19B9805678E040007F01006C7D,A41FFB19BA045678E040007F01006C7D,A41FFB19B9B15678E040007F01006C7D,A41FFB19B9815678E040007F01006C7D,A41FFB19BA075678E040007F01006C7D,A41FFB19B9825678E040007F01006C7D',
      p_target=>'"SALES_ORDER_FACT"',
      p_target_uoid=>'A41FFB19B9835678E040007F01006C7D',      p_info=>NULL,
      
            p_type=>'PLSQLMap',
      
      p_date=>get_cycle_date
    );
  END IF;



BEGIN
  -- Expression statement
      error_stmt := SUBSTRB('
  
      
      GET_MAX_DATE("OWB_SALES_ORDER_FACT"."GET_CONST_0_TABLE_NAME","OWB_SALES_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT","OWB_SALES_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT");
  
  ',0,2000);
  
      
      GET_MAX_DATE("OWB_SALES_ORDER_FACT"."GET_CONST_0_TABLE_NAME","OWB_SALES_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT","OWB_SALES_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT");
  
    -- End expression statement
    --"OWB_SALES_ORDER_FACT"."PREMAPPING_1_CREATE_DATE_OUT" := '01-JAN-2011';
    --"OWB_SALES_ORDER_FACT"."PREMAPPING_2_MODIFY_DATE_OUT" := '01-JAN-2011';
  
  
EXCEPTION WHEN OTHERS THEN
  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_rtd=>NULL,
      p_rowkey=>0,
      p_table=>NULL,
      p_column=>NULL,
      p_dstval=>NULL,
      p_stm=>'PRE_MAP_TRIGGER',
      p_sqlerr=>SQLCODE,
      p_sqlerrm=>SQLERRM,
      p_rowid=>NULL
    );
  END IF;
  get_errors := get_errors + 1;
  get_abort  := TRUE;
  get_trigger_success := FALSE;
END;
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.1
  END IF;
END Initialize;

PROCEDURE Analyze_Targets IS
BEGIN
  FOR i IN 1..tables_to_analyze.COUNT LOOP
    WB_RT_MAPAUDIT_UTIL_INVOKER.gather_table_stats(
      p_ownname          => tables_to_analyze(i).ownname,
      p_tabname          => tables_to_analyze(i).tabname,
      p_estimate_percent => tables_to_analyze(i).estimate_percent,
      p_granularity      => tables_to_analyze(i).granularity,
      p_cascade          => tables_to_analyze(i).cascade,
      p_degree           => tables_to_analyze(i).degree);
  END LOOP;
END Analyze_Targets;


PROCEDURE Finalize(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.13
  END IF;


  IF get_abort THEN
    get_status := 1;
  ELSIF get_errors > 0 THEN
    get_status := 2;
  ELSE
    get_status := 0;
  END IF;
  get_processed := get_inserted + get_deleted + get_updated + get_merged; 
  IF (get_errors = 0) THEN
    get_error_ratio := 0;
  ELSE
    get_error_ratio := (get_errors /(get_errors + get_processed)) * 100;
  END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
  IF get_status = 0 THEN
    WB_RT_MAPAUDIT.audit_end(
      p_rta=>get_runtime_audit_id,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  ELSE
    WB_RT_MAPAUDIT.audit_fail(
      p_rta=>get_runtime_audit_id,
      p_status=>get_status,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  END IF;
END IF;


  Analyze_Targets;
END Finalize;



FUNCTION Main(p_env IN WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN

  IF WB_RT_MAPAUDIT_UTIL.supportsDesignClient(p_designVersion=>'10.2.0.1.31', p_minRuntimeVersion=>'10.2.0.1.0') < 1 THEN
    raise_application_error(-20103, 'Incompatible runtime and design client versions.');
  END IF;
  Initialize(p_env);
  
  
  
  
  
  -- Initialize all batch status variables
  "SALES_ORDER_FACT_St" := FALSE;
  IF get_trigger_success THEN

  --  Processing for different operating modes
  IF get_operating_mode = MODE_SET THEN
    RAISE_APPLICATION_ERROR(-20101, 'Set based mode not supported');
  END IF;
  IF get_operating_mode = MODE_ROW THEN
		"FLTR_p";
  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW THEN
    IF get_use_hc THEN
      IF NOT get_batch_status AND get_use_hc THEN
        get_inserted := 0;
        get_updated  := 0;
        get_deleted  := 0;
        get_merged   := 0;
        get_logical_errors := 0;
"SALES_ORDER_FACT_St" := FALSE;

      END IF;
    END IF;

"FLTR_p";

  END IF;
  IF get_operating_mode = MODE_ROW_TARGET THEN
"FLTR_t";

  END IF;
  IF get_operating_mode = MODE_SET_FAILOVER_ROW_TARGET THEN
    IF NOT get_batch_status AND get_use_hc THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
"SALES_ORDER_FACT_St" := FALSE;

    END IF;
"FLTR_t";

  END IF;
END IF;

  Finalize(p_env);
  RETURN get_status;
  END;

FUNCTION encode_operating_mode(p_operating_mode IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_operating_mode IS NULL THEN
    RETURN get_operating_mode;
  END IF;
  IF p_operating_mode = 'SET_BASED' THEN
    RETURN MODE_SET;
  ELSIF p_operating_mode = 'ROW_BASED' THEN
    RETURN MODE_ROW;
  ELSIF p_operating_mode = 'ROW_BASED_TARGET_ONLY' THEN
    RETURN MODE_ROW_TARGET;
  ELSIF p_operating_mode = 'SET_BASED_FAIL_OVER_TO_ROW_BASED' THEN
    RETURN MODE_SET_FAILOVER_ROW;
  ELSE
    RETURN MODE_SET_FAILOVER_ROW_TARGET;
  END IF;
END encode_operating_mode;

FUNCTION encode_audit_level(p_audit_level IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_audit_level IS NULL THEN
    RETURN get_audit_level;
  END IF;
  IF p_audit_level = 'NONE' THEN
    RETURN AUDIT_NONE;
  ELSIF p_audit_level = 'STATISTICS' THEN
    RETURN AUDIT_STATISTICS;
  ELSIF p_audit_level = 'ERROR_DETAILS' THEN
    RETURN AUDIT_ERROR_DETAILS;
  ELSE
    RETURN AUDIT_COMPLETE;
  END IF;
END encode_audit_level;


PROCEDURE Main(p_status OUT VARCHAR2,
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL) IS

  x_schema      VARCHAR2(30);

  x_audit_id    NUMBER;
  x_object_id   NUMBER;

  x_env         wb_rt_mapaudit.wb_rt_name_values;
  x_param       wb_rt_mapaudit.wb_rt_name_value;

  x_result      NUMBER;
  x_return_code NUMBER;

BEGIN
  -- validate parameters

  IF NOT wb_rt_mapaudit_util.validate_runtime_parameter('MAX_NO_OF_ERRORS',
                                                        p_max_no_of_errors) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('COMMIT_FREQUENCY',
                                                        p_commit_frequency) OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('OPERATING_MODE',
                                                        p_operating_mode)   OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('BULK_SIZE',
                                                        p_bulk_size)        OR
     NOT wb_rt_mapaudit_util.validate_runtime_parameter('AUDIT_LEVEL',
                                                        p_audit_level) THEN
    p_status := 'FAILURE';
    RETURN;
  END IF;

  -- perform pre-run setup

  SELECT ao.owner INTO x_schema
  FROM   user_objects uo, all_objects ao
  WHERE  uo.object_type = 'PACKAGE'
  AND    uo.object_name = 'OWB_SALES_ORDER_FACT'
  AND    uo.object_id = ao.object_id;

  wb_rt_mapaudit_util.premap('OWB_SALES_ORDER_FACT', x_schema, x_audit_id, x_object_id);

  -- prepare parameters for Main:

  x_param.param_name := 'AUDIT_ID';
  x_param.param_value := x_audit_id;
  x_env(1) := x_param;

  x_param.param_name := 'OBJECT_ID';
  x_param.param_value := x_object_id;
  x_env(2) := x_param;

  x_param.param_name := 'MAX_NO_OF_ERRORS';
  x_param.param_value := p_max_no_of_errors;
  x_env(3) := x_param;

  x_param.param_name := 'COMMIT_FREQUENCY';
  x_param.param_value := p_commit_frequency;
  x_env(4) := x_param;

  x_param.param_name := 'OPERATING_MODE';
  x_param.param_value := encode_operating_mode(p_operating_mode);
  x_env(5) := x_param;

  x_param.param_name := 'BULK_SIZE';
  x_param.param_value := p_bulk_size;
  x_env(6) := x_param;

  x_param.param_name := 'AUDIT_LEVEL';
  x_param.param_value := encode_audit_level(p_audit_level);
  x_env(7) := x_param;

  x_param.param_name := 'PURGE_GROUP';
  x_param.param_value := p_purge_group;
  x_env(8) := x_param;

  -- register "system" parameters:
  FOR i IN 3..8 LOOP
    IF x_env(i).param_value IS NOT NULL THEN
      wb_rt_mapaudit_util.register_sys_param(x_audit_id,
                                             x_env(i).param_name,
                                             x_env(i).param_value);
    END IF;
  END LOOP;

  -- really run it:
  -- return code from mapping is
  --   0 - success
  --   1 - failure
  --   2 - completed (with errors/warnings)
  x_return_code := NULL;
  BEGIN
    x_result := Main(x_env);
  EXCEPTION
    WHEN OTHERS THEN
      x_result := 1;
      x_return_code := SQLCODE;
  END;

  -- perform post map cleanup

  wb_rt_mapaudit_util.postmap(x_audit_id, x_result, x_return_code);

  -- show results:
  wb_rt_mapaudit_util.show_run_results(x_audit_id);

  -- set return status
  IF x_result = 0 THEN
    p_status := 'OK';
  ELSIF x_result = 1 THEN
    p_status := 'FAILURE';
  ELSE
    p_status := 'OK_WITH_WARNINGS';
  END IF;

END Main;

PROCEDURE Close_Cursors IS
BEGIN
BEGIN
  IF "FLTR_c"%ISOPEN THEN
    CLOSE "FLTR_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "FLTR_c$1"%ISOPEN THEN
    CLOSE "FLTR_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;

END Close_Cursors;



END "OWB_SALES_ORDER_FACT";
/


GRANT DEBUG ON GKDW.OWB_SALES_ORDER_FACT TO DWHREAD;

